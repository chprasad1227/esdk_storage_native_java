/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:33:28
 * Time to generate: 01:23.391 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.host.HostHandlerImpl:36b316f0732d6ec2ef31f36dcd896a0b
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.host;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public class HostHandlerImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HostHandlerImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostHandlerImplIp", 100);
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(restRequestHandler, "testHostHandlerImplDeviceID");
        assertEquals("hostHandlerImpl.deviceID", "testHostHandlerImplDeviceID", getPrivateField(hostHandlerImpl, "deviceID"));
        assertNull("hostHandlerImpl.hostIterator", getPrivateField(hostHandlerImpl, "hostIterator"));
        assertSame("hostHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(hostHandlerImpl, "restRequestHandler"));
    }
    
    public void testCreateWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "HOST");
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        HostHandlerImpl hostHandlerImpl = (HostHandlerImpl) Mockingbird.getProxyObject(HostHandlerImpl.class, true);
        HostMO hostMO = (HostMO) Mockingbird.getProxyObject(HostMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(hostHandlerImpl, "deviceID", "");
        setPrivateField(hostHandlerImpl, "restRequestHandler", null);
        setPrivateField(hostMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOST", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", map);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, map, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        HostMO result = hostHandlerImpl.create(hostMO);
        assertNull("result", result);
    }
    
    public void testDeleteWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "HOST");
        HostHandlerImpl hostHandlerImpl = (HostHandlerImpl) Mockingbird.getProxyObject(HostHandlerImpl.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(hostHandlerImpl, "deviceID", "");
        setPrivateField(hostHandlerImpl, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOST", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        hostHandlerImpl.delete("");
        assertEquals("hostHandlerImpl.deviceID", "", getPrivateField(hostHandlerImpl, "deviceID"));
        assertNull("hostHandlerImpl.restRequestHandler", getPrivateField(hostHandlerImpl, "restRequestHandler"));
    }
    
    public void testGetBatch() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        HostIterator result = hostHandlerImpl.getBatch(new HostQuery(new HostMO(), 100L, 1000L));
        assertSame("hostHandlerImpl.hostIterator", result, getPrivateField(hostHandlerImpl, "hostIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 3, result.getConcretFilterHeaders().length);
    }
    
    public void testGetBatch1() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        HostQuery cond = new HostQuery(new HostMO(), 100L, 1000L);
        HostIterator batch = hostHandlerImpl.getBatch(cond);
        HostIterator result = hostHandlerImpl.getBatch(cond);
        assertSame("result", batch, result);
    }
    
    public void testGetHostbyHostGroupWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "HOST");
        storeStaticField(MOType.class, "HOSTGROUP");
        HostHandlerImpl hostHandlerImpl = (HostHandlerImpl) Mockingbird.getProxyObject(HostHandlerImpl.class, true);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(hostHandlerImpl, "deviceID", "");
        setPrivateField(hostHandlerImpl, "restRequestHandler", null);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(MOType.class, "HOST", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ASSOCIATEOBJTYPE", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        List result = hostHandlerImpl.getHostbyHostGroup("");
        assertNull("result", result);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "HOST");
        HostHandlerImpl hostHandlerImpl = (HostHandlerImpl) Mockingbird.getProxyObject(HostHandlerImpl.class, true);
        HostMO hostMO = (HostMO) Mockingbird.getProxyObject(HostMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(hostHandlerImpl, "deviceID", "");
        setPrivateField(hostHandlerImpl, "restRequestHandler", null);
        setPrivateField(hostMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOST", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", null);
        Mockingbird.setReturnValue(hostMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        hostHandlerImpl.modify(hostMO);
        assertEquals("hostHandlerImpl.deviceID", "", getPrivateField(hostHandlerImpl, "deviceID"));
        assertNull("hostHandlerImpl.restRequestHandler", getPrivateField(hostHandlerImpl, "restRequestHandler"));
    }
    
    public void testCreateThrowsApiException() throws Throwable {
        try {
            new HostHandlerImpl(null, "testHostHandlerImplDeviceID").create(new HostMO(new MO()));
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "HOST");
        HostHandlerImpl hostHandlerImpl = (HostHandlerImpl) Mockingbird.getProxyObject(HostHandlerImpl.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(hostHandlerImpl, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOST", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("hostHandlerImpl.deviceID", "", getPrivateField(hostHandlerImpl, "deviceID"));
            assertNull("hostHandlerImpl.restRequestHandler", getPrivateField(hostHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsIllegalArgumentException() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImpl\rDeviceID");
        try {
            hostHandlerImpl.create(new HostMO(new MO()));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostHandlerImplIp", 100);
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(restRequestHandler, "testHostHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.create(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostHandlerImpl.deviceID", "testHostHandlerImplDeviceID", getPrivateField(hostHandlerImpl, "deviceID"));
            assertSame("hostHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(hostHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsNullPointerException1() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        try {
            hostHandlerImpl.create(new HostMO((MO) null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostHandlerImpl.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException2() throws Throwable {
        MO mo = new MO(new JSONObject());
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        Map propertyMap = new HashMap(100, 100.0F);
        propertyMap.put((Object) null, new Integer(0));
        mo.setProperty((Map) propertyMap);
        try {
            hostHandlerImpl.create(new HostMO(mo));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
        }
    }
    
    public void testDeleteThrowsApiException() throws Throwable {
        try {
            new HostHandlerImpl(null, "testHostHandlerImplDeviceID").delete("testHostHandlerImplHostID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testDeleteThrowsIllegalArgumentException() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        try {
            hostHandlerImpl.delete("testHostHandlerImpl\rHostID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostHandlerImplIp", 100);
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(restRequestHandler, "testHostHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.delete("testHostHandlerImplHostID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostHandlerImpl.deviceID", "testHostHandlerImplDeviceID", getPrivateField(hostHandlerImpl, "deviceID"));
            assertSame("hostHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(hostHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testGetHostbyHostGroupThrowsApiException() throws Throwable {
        try {
            new HostHandlerImpl(null, "testHostHandlerImplDeviceID").getHostbyHostGroup("testHostHandlerImplHostGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetHostbyHostGroupThrowsIllegalArgumentException() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        try {
            hostHandlerImpl.getHostbyHostGroup("testHostHandlerImpl\rHostGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetHostbyHostGroupThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostHandlerImplIp", 100);
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(restRequestHandler, "testHostHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.getHostbyHostGroup("testHostHandlerImplHostGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostHandlerImpl.deviceID", "testHostHandlerImplDeviceID", getPrivateField(hostHandlerImpl, "deviceID"));
            assertSame("hostHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(hostHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new HostHandlerImpl(null, "testHostHandlerImplDeviceID").get("testHostHandlerImplHostID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        try {
            hostHandlerImpl.get("testHostHandlerImpl\rHostID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostHandlerImplIp", 100);
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(restRequestHandler, "testHostHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.get("testHostHandlerImplHostID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostHandlerImpl.deviceID", "testHostHandlerImplDeviceID", getPrivateField(hostHandlerImpl, "deviceID"));
            assertSame("hostHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(hostHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        HostMO mo = new HostMO();
        try {
            new HostHandlerImpl(null, "testHostHandlerImplDeviceID").modify(mo);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "HOST");
        HostHandlerImpl hostHandlerImpl = (HostHandlerImpl) Mockingbird.getProxyObject(HostHandlerImpl.class, true);
        HostMO hostMO = (HostMO) Mockingbird.getProxyObject(HostMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(hostHandlerImpl, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOST", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(hostMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.modify(hostMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("hostHandlerImpl.deviceID", "", getPrivateField(hostHandlerImpl, "deviceID"));
            assertNull("hostHandlerImpl.restRequestHandler", getPrivateField(hostHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImpl\rIp", 100), "testHostHandlerImplDeviceID");
        try {
            hostHandlerImpl.modify(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        MO mo = new MO(new JSONObject());
        Map propertyMap = new HashMap(100, 100.0F);
        propertyMap.put((Object) null, new Integer(0));
        mo.setProperty((Map) propertyMap);
        HostMO mo2 = new HostMO(mo);
        try {
            hostHandlerImpl.modify(mo2);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
            assertNull("mo2.getDescription()", mo2.getDescription());
        }
    }
    
    public void testModifyThrowsNullPointerException1() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        HostMO mo = new HostMO();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsNullPointerException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostHandlerImplIp", 100);
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(restRequestHandler, "testHostHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostHandlerImpl.class);
        try {
            hostHandlerImpl.modify(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostHandlerImpl.deviceID", "testHostHandlerImplDeviceID", getPrivateField(hostHandlerImpl, "deviceID"));
            assertSame("hostHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(hostHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsNullPointerException3() throws Throwable {
        HostHandlerImpl hostHandlerImpl = new HostHandlerImpl(new RestRequestHandler("testHostHandlerImplIp", 100), "testHostHandlerImplDeviceID");
        HostMO mo = new HostMO((MO) null);
        try {
            hostHandlerImpl.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
        }
    }
}

