/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:39:49
 * Time to generate: 01:27.375 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.commu.rest.RestRequestHandler:7c50eae2685fcb6c28645ea89561aa14
 *
 */

package com.huawei.ism.openapi.common.commu.rest;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.http.HttpClientFactory;
import com.huawei.ism.openapi.common.commu.http.HttpClientManager;
import com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.entity.StringEntity;
import org.json.JSONObject;

public class RestRequestHandlerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return RestRequestHandler.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        assertEquals("restRequestHandler.port", 100, ((Number) getPrivateField(restRequestHandler, "port")).intValue());
        assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
        assertEquals("restRequestHandler.ip", "testRestRequestHandlerIp", getPrivateField(restRequestHandler, "ip"));
    }
    
    public void testReleaseConnection() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
    }
    
    public void testRestGetRequestWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class, true);
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        HttpClient httpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        setPrivateField(restRequestHandler, "ip", "");
        setPrivateField(restRequestHandler, "port", new Integer(0));
        setPrivateField(restRequestHandler, "httpClientManager", httpClientManager);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restRequestHandler, "composeUri", "(java.lang.String,int,java.lang.String,java.util.Map)java.lang.String", "", 1);
        HttpGet httpGet = (HttpGet) Mockingbird.getProxyObject(HttpGet.class);
        Mockingbird.replaceObjectForRecording(HttpGet.class, "<init>(java.lang.String)", httpGet);
        Mockingbird.setReturnValue(false, restRequestHandler, "setHttpRequstConfigure", "(org.apache.http.client.methods.HttpRequestBase)void", new Object[] {httpGet}, null, 1);
        Mockingbird.setReturnValue(true, String.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(httpClientManager.getHttpClient(), httpClient);
        Mockingbird.setReturnValue(httpClient.execute(httpGet), null);
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        Mockingbird.replaceObjectForRecording(HttpResponseDefaultHandlerImp.class, "<init>()", httpResponseDefaultHandlerImp);
        Mockingbird.setReturnValue(false, httpResponseDefaultHandlerImp, "handleResponse", "(org.apache.http.HttpResponse,org.apache.http.cookie.Cookie)org.json.JSONObject", null, 1);
        httpGet.releaseConnection();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestRequestHandler.class);
        JSONObject result = restRequestHandler.restGetRequest("", null);
        assertNull("result", result);
    }
    
    public void testRestPostRequestWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class, true);
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Set set2 = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        HttpClient httpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        setPrivateField(restRequestHandler, "ip", "");
        setPrivateField(restRequestHandler, "port", new Integer(0));
        restRequestHandler.setBaseToken("");
        setPrivateField(restRequestHandler, "httpClientManager", httpClientManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(map.isEmpty(), false);
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.size(), 1);
        Mockingbird.setReturnValue(map.entrySet(), set2);
        Mockingbird.setReturnValue(set2.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), "");
        Mockingbird.setReturnValue(entry.getValue(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), "");
        Mockingbird.setReturnValue(entry2.getValue(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), "");
        Mockingbird.setReturnValue(entry3.getValue(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(iterator.hasNext(), false);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        HttpPost httpPost = (HttpPost) Mockingbird.getProxyObject(HttpPost.class);
        Mockingbird.replaceObjectForRecording(HttpPost.class, "<init>(java.lang.String)", httpPost);
        httpPost.setHeader("Content-Type", "application/json");
        Mockingbird.setNormalReturnForVoid();
        httpPost.setHeader("Accept-Language", "zh-CN,en;");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, httpPost, "setHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, String.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(httpClientManager.getHttpClient(), httpClient);
        Mockingbird.setReturnValue(httpClient.execute(httpPost), null);
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        Mockingbird.replaceObjectForRecording(HttpResponseDefaultHandlerImp.class, "<init>()", httpResponseDefaultHandlerImp);
        Mockingbird.setReturnValue(false, httpResponseDefaultHandlerImp, "handleResponse", "(org.apache.http.HttpResponse,org.apache.http.cookie.Cookie)org.json.JSONObject", null, 1);
        httpPost.releaseConnection();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestRequestHandler.class);
        JSONObject result = restRequestHandler.restPostRequest("", (Map) map, null);
        assertNull("result", result);
        assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
    }
    
    public void testRestPutRequestWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class, true);
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        HttpClient httpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        setPrivateField(restRequestHandler, "ip", "");
        setPrivateField(restRequestHandler, "port", new Integer(0));
        restRequestHandler.setBaseToken("");
        setPrivateField(restRequestHandler, "httpClientManager", httpClientManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(map.isEmpty(), true);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        HttpPut httpPut = (HttpPut) Mockingbird.getProxyObject(HttpPut.class);
        Mockingbird.replaceObjectForRecording(HttpPut.class, "<init>(java.lang.String)", httpPut);
        httpPut.setHeader("Content-Type", "application/json");
        Mockingbird.setNormalReturnForVoid();
        httpPut.setHeader("Accept-Language", "zh-CN,en;");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, httpPut, "setHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, String.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(httpClientManager.getHttpClient(), httpClient);
        Mockingbird.setReturnValue(httpClient.execute(httpPut), null);
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        Mockingbird.replaceObjectForRecording(HttpResponseDefaultHandlerImp.class, "<init>()", httpResponseDefaultHandlerImp);
        Mockingbird.setReturnValue(false, httpResponseDefaultHandlerImp, "handleResponse", "(org.apache.http.HttpResponse,org.apache.http.cookie.Cookie)org.json.JSONObject", null, 1);
        httpPut.releaseConnection();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestRequestHandler.class);
        JSONObject result = restRequestHandler.restPutRequest("", (Map) map, null);
        assertNull("result", result);
        assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
    }
    
    public void testSetBaseToken() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        assertEquals("restRequestHandler.iBaseToken", "testRestRequestHandlerHttpBaseToken", getPrivateField(restRequestHandler, "iBaseToken"));
    }
    
    public void testSetConnectionTimeout() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        restRequestHandler.setConnectionTimeout(100);
        assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
    }
    
    public void testSetConnectionTimeout1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setConnectionTimeout(100);
        Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
        assertEquals("restRequestHandler.httpClientManager.httpClientFactory.connectTimeOut", 100, ((Number) getPrivateField(privateField, "connectTimeOut")).intValue());
        assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
    }
    
    public void testSetSocTimeout() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        restRequestHandler.setSocTimeout(100);
        assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
    }
    
    public void testSetSocTimeout1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setSocTimeout(100);
        Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
        assertEquals("restRequestHandler.httpClientManager.httpClientFactory.socketTimeOut", 100, ((Number) getPrivateField(privateField, "socketTimeOut")).intValue());
        assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
    }
    
    public void testReleaseConnectionThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        try {
            restRequestHandler.releaseConnection();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HttpClientFactory.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
        }
    }
    
    public void testRestDelRequestThrowsApiException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("", "testString");
        headerParams.put("testString", "testString");
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?=testString&testString=testString", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?=testString&testString=testString", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsApiException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "");
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsApiException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("", "3q\u001CBrqp?8\u000E\u0014nC");
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsIllegalArgumentException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "please check the s=rver");
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsIllegalArgumentException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restDelRequest("testRestRequestHandler\rRelativePath", headerParams);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("", "testString");
        headerParams.put("testString", "testString");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("", "testString");
        headerParams.put("testString", "testString");
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsNullPointerException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "");
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsNullPointerException3() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "");
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsNullPointerException4() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestDelRequestThrowsNullPointerException5() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restDelRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestGetOrDelRequestThrowsApiException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        Map hashMap = new HashMap(100, 100.0F);
        hashMap.put("testString", "testString");
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestRequestHandler", "restGetOrDelRequest", new Class[] {boolean.class, String.class, Map.class}, restRequestHandler, new Object[] {Boolean.TRUE, "testRestRequestHandlerRelativePath", hashMap});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) hashMap.size()", 1, hashMap.size());
        }
    }
    
    public void testRestGetOrDelRequestThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "IOEXPMSG");
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class, true);
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        HttpClient httpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        LogUtil logUtil2 = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        setPrivateField(restRequestHandler, "ip", "");
        setPrivateField(restRequestHandler, "port", new Integer(0));
        restRequestHandler.setBaseToken("");
        setPrivateField(restRequestHandler, "httpClientManager", httpClientManager);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "IOEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        HttpDelete httpDelete = (HttpDelete) Mockingbird.getProxyObject(HttpDelete.class);
        Mockingbird.replaceObjectForRecording(HttpDelete.class, "<init>(java.lang.String)", httpDelete);
        httpDelete.setHeader("Content-Type", "application/json");
        Mockingbird.setNormalReturnForVoid();
        httpDelete.setHeader("Accept-Language", "zh-CN,en;");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, httpDelete, "setHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, String.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(httpClientManager.getHttpClient(), httpClient);
        Mockingbird.setException(httpClient.execute(httpDelete), iOException);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil2);
        logUtil2.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        httpDelete.releaseConnection();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestRequestHandler.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestRequestHandler", "restGetOrDelRequest", new Class[] {boolean.class, String.class, Map.class}, restRequestHandler, new Object[] {Boolean.FALSE, "", null});
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
        }
    }
    
    public void testRestGetRequestThrowsApiException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restGetRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "please check the servtr");
        headerParams.put("UTF-W", "httpC");
        try {
            restRequestHandler.restGetRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsIllegalArgumentException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restGetRequest("testRestRequestHandler\rRelativePath", headerParams);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsIllegalArgumentException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restGetRequest("testRestRequestHandler\rRelativePath", headerParams);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        headerParams.put("", "testString");
        try {
            restRequestHandler.restGetRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        headerParams.put("", "testString");
        try {
            restRequestHandler.restGetRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsNullPointerException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restGetRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsNullPointerException3() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restGetRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestGetRequestThrowsNullPointerException4() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restGetRequest("testRestRequestHandlerRelativePath", headerParams);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsApiException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsApiException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsApiException2() throws Throwable {
        String[] sa = new String[1];
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject(new JSONObject(), sa);
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        headerParams.put("ut", "");
        JSONObject body = new JSONObject();
        try {
            restRequestHandler.restPostRequest("testRestRequestHandler\rRelativePath", headerParams, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsIllegalArgumentException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "%s | %s| %s | %s ");
        JSONObject body = new JSONObject();
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsIllegalArgumentException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandler\rIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject();
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsIllegalArgumentException3() throws Throwable {
        Mockingbird.enterRecordingMode();
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class);
        Mockingbird.replaceObjectForRecording(HttpClientManager.class, "<init>()", httpClientManager);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        RestRequestHandler restRequestHandler = new RestRequestHandler("", 1);
        HashMap headerParams = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, headerParams, "isEmpty", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        HttpClient defaultHttpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        Mockingbird.setReturnValue(httpClientManager.getHttpClient(), defaultHttpClient);
        Mockingbird.setException(true, defaultHttpClient.execute(null), (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(RestRequestHandler.class);
        try {
            restRequestHandler.restPostRequest("testString", headerParams, null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertSame("restRequestHandler.httpClientManager", httpClientManager, getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsIllegalArgumentException4() throws Throwable {
        Mockingbird.enterRecordingMode();
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class);
        Mockingbird.replaceObjectForRecording(HttpClientManager.class, "<init>()", httpClientManager);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        RestRequestHandler restRequestHandler = new RestRequestHandler("", 1);
        HashMap headerParams = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, headerParams, "isEmpty", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        HttpClient defaultHttpClient = (HttpClient) Mockingbird.getProxyObject(HttpClient.class);
        Mockingbird.setReturnValue(httpClientManager.getHttpClient(), defaultHttpClient);
        Mockingbird.setException(true, defaultHttpClient.execute(null), (Throwable) Mockingbird.getProxyObject(IllegalArgumentException.class));
        Mockingbird.enterTestMode(RestRequestHandler.class);
        try {
            restRequestHandler.restPostRequest("testString", headerParams, null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertSame("restRequestHandler.httpClientManager", httpClientManager, getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsIllegalArgumentException5() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        JSONObject body = new JSONObject();
        try {
            restRequestHandler.restPostRequest("testRestRequestHandler\rRelativePath", null, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
        }
    }
    
    public void testRestPostRequestThrowsNullPointerException() throws Throwable {
        String[] sa = new String[0];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        body.put("testRestRequestHandlerKey", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "");
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 1, body.length());
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsNullPointerException1() throws Throwable {
        String[] sa = new String[0];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        body.put("testRestRequestHandlerKey", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "");
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 1, body.length());
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsNullPointerException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        HashMap headerParams = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, headerParams, "isEmpty", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, headerParams, "entrySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Mockingbird.setReturnValue(false, abstractSet, "size", "()int", new Object[] {}, new Integer(2), 1);
        Mockingbird.setReturnValue(false, headerParams, "entrySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, entry, 1);
        Mockingbird.setReturnValue(false, entry, "getKey", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, entry, "getValue", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, entry2, 1);
        Mockingbird.setReturnValue(false, entry2, "getKey", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, entry2, "getValue", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsNullPointerException3() throws Throwable {
        String[] sa = new String[1];
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject(new JSONObject(), sa);
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsNullPointerException4() throws Throwable {
        String[] sa = new String[1];
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject(new JSONObject(), sa);
        try {
            restRequestHandler.restPostRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPostRequestThrowsThrowableWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "IOEXPMSG");
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        LogUtil logUtil2 = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        UnsupportedEncodingException unsupportedEncodingException = (UnsupportedEncodingException) Mockingbird.getProxyObject(UnsupportedEncodingException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        LogUtil logUtil3 = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        setPrivateField(restRequestHandler, "ip", "");
        setPrivateField(restRequestHandler, "port", new Integer(0));
        restRequestHandler.setBaseToken("");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "IOEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuffer.class), "toString", "()java.lang.String", "", 1);
        HttpPost httpPost = (HttpPost) Mockingbird.getProxyObject(HttpPost.class);
        Mockingbird.replaceObjectForRecording(HttpPost.class, "<init>(java.lang.String)", httpPost);
        httpPost.setHeader("Content-Type", "application/json");
        Mockingbird.setNormalReturnForVoid();
        httpPost.setHeader("Accept-Language", "zh-CN,en;");
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, httpPost, "setHeader", "(java.lang.String,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(true, String.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(jSONObject.toString(), "");
        Mockingbird.setReturnValue(true, String.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil2);
        Mockingbird.setReturnValue(false, logUtil2, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(jSONObject.toString(), "");
        Mockingbird.setConstructorForException(StringEntity.class, "<init>(java.lang.String,java.lang.String)", unsupportedEncodingException);
        Mockingbird.setReturnValue(false, unsupportedEncodingException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil3);
        logUtil3.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        httpPost.releaseConnection();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestRequestHandler.class);
        try {
            restRequestHandler.restPostRequest("", null, jSONObject);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
        }
    }
    
    public void testRestPutRequestThrowsApiException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        JSONObject body = new JSONObject();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsApiException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath?testString=testString", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsApiException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        JSONObject body = new JSONObject();
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsApiException3() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManaer/rest", 100);
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClientFactory");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClientInstance")).getConnectionManager();
            assertNotNull("restRequestHandler.httpClientManager.httpClientFactory.httpClientInstance.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            HttpClient privateField2 = (HttpClient) getPrivateField(getPrivateField(restRequestHandler, "httpClientManager"), "httpClient");
            assertNotNull("restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", privateField2.getConnectionManager().getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManaer/rest:100/deviceManager/resttestRestRequestHandlerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("", " |s");
        headerParams.put("testString", "\\f");
        JSONObject body = new JSONObject();
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsIllegalArgumentException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        JSONObject body = new JSONObject();
        try {
            restRequestHandler.restPutRequest("testRestRequestHandler\rRelativePath", headerParams, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsIllegalArgumentException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject();
        body.put("testRestRequestHandlerKey", 100);
        try {
            restRequestHandler.restPutRequest("testRestRequestHandler\rRelativePath", headerParams, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 1, body.length());
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsIllegalArgumentException3() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandler\rIp", 100);
        JSONObject body = new JSONObject();
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", null, body);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "UTF8");
        headerParams.put("/deviceManager/r!est", "testString");
        JSONObject body = new JSONObject(new HashMap(1000, 1000.0F));
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "UTF8");
        headerParams.put("/deviceManager/r!est", "testString");
        JSONObject body = new JSONObject(new HashMap(1000, 1000.0F));
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 2, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "UTF8");
        JSONObject body = new JSONObject(new HashMap(1000, 1000.0F));
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException3() throws Throwable {
        JSONObject body = new JSONObject();
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException4() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "testString");
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 1, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException5() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        HashMap headerParams = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, headerParams, "isEmpty", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, headerParams, "entrySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Mockingbird.setReturnValue(false, abstractSet, "size", "()int", new Object[] {}, new Integer(1), 1);
        Mockingbird.setReturnValue(false, headerParams, "entrySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, entry, 1);
        Mockingbird.setReturnValue(false, entry, "getKey", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, entry, "getValue", "()java.lang.Object", new Object[] {}, "testString", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNotNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException6() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        restRequestHandler.setBaseToken("testRestRequestHandlerHttpBaseToken");
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
    
    public void testRestPutRequestThrowsNullPointerException7() throws Throwable {
        JSONObject body = new JSONObject();
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestRequestHandlerIp", 100);
        Mockingbird.enterRecordingMode();
        ((HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class)).releaseHttpClient();
        Mockingbird.setNormalReturnForVoid(true);
        Mockingbird.enterTestMode(RestRequestHandler.class);
        restRequestHandler.releaseConnection();
        Map headerParams = new HashMap(100, 100.0F);
        try {
            restRequestHandler.restPutRequest("testRestRequestHandlerRelativePath", headerParams, body);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertNull("restRequestHandler.httpClientManager", getPrivateField(restRequestHandler, "httpClientManager"));
            assertEquals("body.length()", 0, body.length());
            assertEquals("(HashMap) headerParams.size()", 0, headerParams.size());
        }
    }
}

