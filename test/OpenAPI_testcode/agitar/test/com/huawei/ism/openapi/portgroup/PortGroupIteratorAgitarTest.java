/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:38:56
 * Time to generate: 01:02.343 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.portgroup.PortGroupIterator:389850290d80a61a284c71e587bdc6a8
 * agitar.src.md5=com.huawei.ism.openapi.common.batchquery.ApiIterator:592fbb87e71ade6d26e6fe9200d66392
 *
 */

package com.huawei.ism.openapi.portgroup;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import org.json.JSONObject;

public class PortGroupIteratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PortGroupIterator.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testPortGroupIteratorIp", 100);
        PortGroupQuery queryCondition = new PortGroupQuery(new PortGroupMO(), 100L, 1000L);
        PortGroupIterator portGroupIterator = new PortGroupIterator(restRequestHandler, "testPortGroupIteratorDeviceID", queryCondition);
        assertNull("portGroupIterator.headerMap", getPrivateField(portGroupIterator, "headerMap"));
        assertEquals("portGroupIterator.totalCount", 0L, ((Number) getPrivateField(portGroupIterator, "totalCount")).longValue());
        assertSame("portGroupIterator.restRequestHandler", restRequestHandler, getPrivateField(portGroupIterator, "restRequestHandler"));
        assertEquals("portGroupIterator.curIndex", 100L, ((Number) getPrivateField(portGroupIterator, "curIndex")).longValue());
        assertEquals("portGroupIterator.deviceID", "testPortGroupIteratorDeviceID", getPrivateField(portGroupIterator, "deviceID"));
        assertSame("portGroupIterator.getQuery()", queryCondition, portGroupIterator.getQuery());
    }
    
    public void testGetConcretCountWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "PortGroup");
        PortGroupIterator portGroupIterator = (PortGroupIterator) Mockingbird.getProxyObject(PortGroupIterator.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        PortGroupMO portGroupMO = (PortGroupMO) Mockingbird.getProxyObject(PortGroupMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        setPrivateField(portGroupIterator, "deviceID", "");
        setPrivateField(portGroupIterator, "queryCondition", null);
        setPrivateField(portGroupIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "PortGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(portGroupMO, "mo", mO);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), portGroupMO);
        Mockingbird.setReturnValue(false, mO, "getProperty", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(java.lang.String)java.lang.Long", new Long(0L), 1);
        Mockingbird.enterTestMode(PortGroupIterator.class);
        long result = portGroupIterator.getConcretCount();
        assertEquals("result", 0L, result);
        assertNull("portGroupIterator.headerMap", getPrivateField(portGroupIterator, "headerMap"));
    }
    
    public void testGetConcretFilterHeaders() throws Throwable {
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIteratorDeviceID", new PortGroupQuery(new PortGroupMO(), 100L, 1000L));
        String[] result = portGroupIterator.getConcretFilterHeaders();
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", "ID", result[0]);
    }
    
    public void testGetConcretMoMap() throws Throwable {
        PortGroupMO mo = new PortGroupMO();
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIteratorDeviceID", new PortGroupQuery(mo, 100L, 1000L));
        ConcurrentHashMap result = (ConcurrentHashMap) portGroupIterator.getConcretMoMap(mo);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ConcurrentHashMap) result.get(\"TYPE\")", new Integer(257), result.get("TYPE"));
    }
    
    public void testGetConcretMoMap1() throws Throwable {
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIteratorDeviceID", new PortGroupQuery(new PortGroupMO(), 100L, 1000L));
        Map result = portGroupIterator.getConcretMoMap((PortGroupMO) null);
        assertNull("result", result);
    }
    
    public void testGetConcretBatchNextThrowsApiException() throws Throwable {
        PortGroupMO mo = new PortGroupMO();
        mo.setId("testPortGroupIteratorId");
        PortGroupIterator portGroupIterator = new PortGroupIterator(null, "testPortGroupIteratorDeviceID", new PortGroupQuery(mo, 100L, 1000L));
        try {
            portGroupIterator.getConcretBatchNext();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("portGroupIterator.headerMap.size()", 1, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException() throws Throwable {
        PortGroupMO mo = new PortGroupMO();
        PortGroupQuery queryCondition = new PortGroupQuery(mo, 100L, 1000L);
        mo.setId("testPortGroupIteratorId");
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIterator\rDeviceID", queryCondition);
        try {
            portGroupIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("portGroupIterator.headerMap.size()", 1, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException1() throws Throwable {
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIterator\rIp", 100), "testPortGroupIteratorDeviceID", new PortGroupQuery(new PortGroupMO(), 100L, 1000L));
        try {
            portGroupIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("portGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException() throws Throwable {
        PortGroupMO mo = new PortGroupMO();
        mo.setId("testPortGroupIteratorId");
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIteratorDeviceID", new PortGroupQuery(mo, 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(PortGroupIterator.class);
        try {
            portGroupIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("portGroupIterator.headerMap.size()", 1, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsApiException() throws Throwable {
        PortGroupMO mo = new PortGroupMO();
        PortGroupIterator portGroupIterator = new PortGroupIterator(null, "testPortGroupIteratorDeviceID", new PortGroupQuery(mo, 100L, 1000L));
        mo.setId("testPortGroupIteratorId");
        try {
            portGroupIterator.getConcretCount();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("portGroupIterator.headerMap.size()", 1, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsIllegalArgumentException() throws Throwable {
        PortGroupMO mo = new PortGroupMO();
        PortGroupQuery queryCondition = new PortGroupQuery(mo, 100L, 1000L);
        mo.setId("testPortGroupIteratorId");
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIterator\rDeviceID", queryCondition);
        try {
            portGroupIterator.getConcretCount();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("portGroupIterator.headerMap.size()", 1, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException() throws Throwable {
        PortGroupMO mo = new PortGroupMO();
        mo.setId("testPortGroupIteratorId");
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIteratorDeviceID", new PortGroupQuery(mo, 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(PortGroupIterator.class);
        try {
            portGroupIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("portGroupIterator.headerMap.size()", 1, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException1() throws Throwable {
        PortGroupIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testPortGroupIteratorIp", 100), "testPortGroupIteratorDeviceID", new PortGroupQuery(new PortGroupMO(), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(PortGroupIterator.class);
        try {
            portGroupIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("portGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException2() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testPortGroupIteratorIp", 100);
        Map map = new HashMap(100, 100.0F);
        map.put((Object) null, Boolean.TRUE);
        JSONObject jObject = new JSONObject(map);
        jObject.putOpt("testPortGroupIteratorKey", new Float(100.0F));
        PortGroupIterator portGroupIterator = new PortGroupIterator(restRequestHandler, "testPortGroupIteratorDeviceID", new PortGroupQuery(new PortGroupMO(jObject), 100L, 1000L));
        try {
            portGroupIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
            assertNull("portGroupIterator.headerMap", getPrivateField(portGroupIterator, "headerMap"));
        }
    }
}

