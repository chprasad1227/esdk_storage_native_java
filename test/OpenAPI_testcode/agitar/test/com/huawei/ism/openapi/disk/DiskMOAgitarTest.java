/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:28:27
 * Time to generate: 00:43.032 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.disk.DiskMO:4d3d7682abdb3f58e4ce186c8cb40fa1
 *
 */

package com.huawei.ism.openapi.disk;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;

public class DiskMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DiskMO.class;
    }
    
    public void testConstructor() throws Throwable {
        DiskMO diskMO = new DiskMO();
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        DiskMO diskMO = new DiskMO(new JSONObject());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetBandwidth() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Integer result = diskMO.getBandwidth();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetCapacityUsage() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Integer result = diskMO.getCapacityUsage();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetCount() throws Throwable {
        DiskMO diskMO = new DiskMO(new JSONObject());
        long result = diskMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetFirmwareVer() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String result = diskMO.getFirmwareVer();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetId() throws Throwable {
        DiskMO diskMO = new DiskMO();
        diskMO.setId("testDiskMOId");
        String result = diskMO.getId();
        assertEquals("result", "testDiskMOId", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetId1() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String result = diskMO.getId();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetLocation() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String result = diskMO.getLocation();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        DiskMO diskMO = new DiskMO(new JSONObject());
        MO result = diskMO.getMO();
        assertEquals("result.getProperties().size()", 2, result.getProperties().size());
    }
    
    public void testGetManufacturer() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String result = diskMO.getManufacturer();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetModel() throws Throwable {
        DiskMO diskMO = new DiskMO(new JSONObject());
        String result = diskMO.getModel();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetMultiPath() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String[] result = diskMO.getMultiPath();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetPoolId() throws Throwable {
        DiskMO diskMO = new DiskMO();
        diskMO.setPoolId("testDiskMOPoolId");
        String result = diskMO.getPoolId();
        assertEquals("result", "testDiskMOPoolId", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetPoolId1() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String result = diskMO.getPoolId();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetPoolName() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String result = diskMO.getPoolName();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetProgress() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Integer result = diskMO.getProgress();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetRunTime() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Integer result = diskMO.getRunTime();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetSectorSize() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Integer result = diskMO.getSectorSize();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetSectors() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Long result = diskMO.getSectors();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetSerialNumber() throws Throwable {
        DiskMO diskMO = new DiskMO();
        String result = diskMO.getSerialNumber();
        assertNull("result", result);
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetSpeedRPM() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Integer result = diskMO.getSpeedRPM();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testGetTemperature() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Integer result = diskMO.getTemperature();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testIsCofferDisk() throws Throwable {
        DiskMO diskMO = new DiskMO();
        Boolean result = diskMO.isCofferDisk();
        assertFalse("result", result.booleanValue());
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testSetId() throws Throwable {
        DiskMO diskMO = new DiskMO();
        diskMO.setId("testDiskMOId");
        assertEquals("diskMO.mo.getProperties().size()", 3, ((MO) getPrivateField(diskMO, "mo")).getProperties().size());
        assertEquals("diskMO.mo.getProperties().get(\"ID\")", "testDiskMOId", ((MO) getPrivateField(diskMO, "mo")).getProperties().get("ID"));
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testSetPoolId() throws Throwable {
        DiskMO diskMO = new DiskMO(new JSONObject());
        diskMO.setPoolId("testDiskMOPoolId");
        assertEquals("diskMO.mo.getProperties().size()", 3, ((MO) getPrivateField(diskMO, "mo")).getProperties().size());
        assertEquals("diskMO.mo.getProperties().get(\"POOLID\")", "testDiskMOPoolId", ((MO) getPrivateField(diskMO, "mo")).getProperties().get("POOLID"));
        assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put(new Object(), new JSONArray());
        try {
            new DiskMO(new JSONObject(map));
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 30", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        JSONObject jObject = new JSONObject(new HashMap(100, 100.0F));
        Mockingbird.enterRecordingMode();
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        Mockingbird.replaceObjectForRecording(MO.class, "<init>(org.json.JSONObject)", mO);
        mO.setProperty("PARENTTYPE", new Integer(206));
        Mockingbird.setExceptionForVoid((Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DiskMO.class);
        try {
            new DiskMO(jObject);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetDiskFormThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO();
        try {
            diskMO.getDiskForm();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DiskMO.class, ex);
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
    
    public void testGetDiskIFTypeThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO();
        try {
            diskMO.getDiskIFType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DiskMO.class, ex);
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
    
    public void testGetDiskTypeThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO();
        try {
            diskMO.getDiskType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DiskMO.class, ex);
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO();
        try {
            diskMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DiskMO.class, ex);
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO(new JSONObject());
        try {
            diskMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DiskMO.class, ex);
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
    
    public void testGetlogicTypeThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO();
        try {
            diskMO.getlogicType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(DiskMO.class, ex);
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO();
        try {
            diskMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
    
    public void testSetPoolIdThrowsNullPointerException() throws Throwable {
        DiskMO diskMO = new DiskMO();
        try {
            diskMO.setPoolId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("diskMO.mo", getPrivateField(diskMO, "mo"));
        }
    }
}

