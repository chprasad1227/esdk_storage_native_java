/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:27:39
 * Time to generate: 00:23.906 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.hardware.controller.ControllerMO:66ac6b8793cc2414281dfd9492419bb6
 *
 */

package com.huawei.ism.openapi.hardware.controller;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import java.util.HashMap;
import org.json.JSONObject;

public class ControllerMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ControllerMO.class;
    }
    
    public void testConstructor() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testConstructor1() throws Throwable {
        ControllerMO controllerMO = new ControllerMO();
        assertEquals("controllerMO.getMO().getProperties().size()", 0, controllerMO.getMO().getProperties().size());
    }
    
    public void testConstructor2() throws Throwable {
        String[] sa = new String[0];
        JSONObject jObject = new JSONObject(new JSONObject(), sa);
        jObject.put("testControllerMOKey", new Double(0.0));
        ControllerMO controllerMO = new ControllerMO(jObject);
        assertEquals("controllerMO.getMO().getProperties().size()", 1, controllerMO.getMO().getProperties().size());
    }
    
    public void testGetCpuInfo() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getCpuInfo();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetCpuUsage() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getCpuUsage();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetDescription() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getDescription();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetId() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        ControllerMO controllerMO = new ControllerMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("ID"), "P  ");
        Mockingbird.enterTestMode(ControllerMO.class);
        String result = controllerMO.getId();
        assertEquals("result", "P  ", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetId1() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getId();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetLocation() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getLocation();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetMO() throws Throwable {
        MO mo = new MO();
        MO result = new ControllerMO(mo).getMO();
        assertSame("result", mo, result);
    }
    
    public void testGetMemorySize() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        Long result = controllerMO.getMemorySize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetMemoryUsage() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getMemoryUsage();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetRole() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getRole();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetSoftVer() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getSoftVer();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetTemperature() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        Long result = controllerMO.getTemperature();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testGetVoltage() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        String result = controllerMO.getVoltage();
        assertNull("result", result);
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testSetId() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        controllerMO.setId("testControllerMOId");
        assertEquals("controllerMO.getMO().getProperties().size()", 1, controllerMO.getMO().getProperties().size());
        assertEquals("controllerMO.getMO().getProperties().get(\"ID\")", "testControllerMOId", controllerMO.getMO().getProperties().get("ID"));
        assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject(new HashMap(100, 100.0F));
        jObject.put("testString", 100.0);
        jObject.accumulate("testString", "");
        try {
            new ControllerMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetCpuInfoThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getCpuInfo();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetCpuUsageThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getCpuUsage();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetDescriptionThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getDescription();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        try {
            controllerMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException1() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetIdThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetLocationThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getLocation();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetMemorySizeThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getMemorySize();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetMemoryUsageThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getMemoryUsage();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetRoleThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getRole();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        try {
            controllerMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException1() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetSoftVerThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getSoftVer();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetTemperatureThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getTemperature();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetTypeThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testGetTypeThrowsNullPointerException1() throws Throwable {
        MO mo = new MO();
        ControllerMO controllerMO = new ControllerMO(mo);
        try {
            controllerMO.getType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertSame("controllerMO.getMO()", mo, controllerMO.getMO());
        }
    }
    
    public void testGetVoltageThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.getVoltage();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        ControllerMO controllerMO = new ControllerMO((MO) null);
        try {
            controllerMO.setId("testControllerMOId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ControllerMO.class, ex);
            assertNull("controllerMO.getMO()", controllerMO.getMO());
        }
    }
}

