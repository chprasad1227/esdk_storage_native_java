/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:25:30
 * Time to generate: 00:22.687 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.alarm.AlarmHandlerImp:7fd72aafb8261aa6ba437ec197ce3b46
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.alarm;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;

public class AlarmHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AlarmHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testAlarmHandlerImpIp", 100);
        AlarmHandlerImp alarmHandlerImp = new AlarmHandlerImp(restRequestHandler, "testAlarmHandlerImpDeviceID");
        assertNull("alarmHandlerImp.alarmIterator", getPrivateField(alarmHandlerImp, "alarmIterator"));
        assertEquals("alarmHandlerImp.deviceID", "testAlarmHandlerImpDeviceID", getPrivateField(alarmHandlerImp, "deviceID"));
        assertSame("alarmHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(alarmHandlerImp, "restRequestHandler"));
    }
    
    public void testClearAlarmWithAggressiveMocks() throws Throwable {
        AlarmHandlerImp alarmHandlerImp = (AlarmHandlerImp) Mockingbird.getProxyObject(AlarmHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(alarmHandlerImp, "deviceID", "");
        setPrivateField(alarmHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(AlarmHandlerImp.class);
        alarmHandlerImp.clearAlarm(null);
        assertEquals("alarmHandlerImp.deviceID", "", getPrivateField(alarmHandlerImp, "deviceID"));
        assertNull("alarmHandlerImp.restRequestHandler", getPrivateField(alarmHandlerImp, "restRequestHandler"));
    }
    
    public void testGetActiveAlarmBatch() throws Throwable {
        AlarmHandlerImp alarmHandlerImp = new AlarmHandlerImp(new RestRequestHandler("testAlarmHandlerImpIp", 100), "testAlarmHandlerImpDeviceID");
        AlarmQuery alarmQuery = new AlarmQuery(new AlarmInfoMO(), 100L, 1000L);
        AlarmIterator activeAlarmBatch = alarmHandlerImp.getActiveAlarmBatch(alarmQuery);
        AlarmIterator result = alarmHandlerImp.getActiveAlarmBatch(alarmQuery);
        assertSame("result", activeAlarmBatch, result);
    }
    
    public void testGetActiveAlarmBatch1() throws Throwable {
        AlarmHandlerImp alarmHandlerImp = new AlarmHandlerImp(new RestRequestHandler("testAlarmHandlerImpIp", 100), "testAlarmHandlerImpDeviceID");
        AlarmIterator result = alarmHandlerImp.getActiveAlarmBatch(new AlarmQuery(new AlarmInfoMO(), 100L, 1000L));
        assertSame("alarmHandlerImp.alarmIterator", result, getPrivateField(alarmHandlerImp, "alarmIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 0, result.getConcretFilterHeaders().length);
    }
    
    public void testGetHistoryAlarmBatch() throws Throwable {
        AlarmHandlerImp alarmHandlerImp = new AlarmHandlerImp(new RestRequestHandler("testAlarmHandlerImpIp", 100), "testAlarmHandlerImpDeviceID");
        AlarmQuery alarmQuery = new AlarmQuery(new AlarmInfoMO(), 100L, 1000L);
        AlarmIterator historyAlarmBatch = alarmHandlerImp.getHistoryAlarmBatch(alarmQuery);
        AlarmIterator result = alarmHandlerImp.getHistoryAlarmBatch(alarmQuery);
        assertSame("result", historyAlarmBatch, result);
    }
    
    public void testGetHistoryAlarmBatch1() throws Throwable {
        AlarmHandlerImp alarmHandlerImp = new AlarmHandlerImp(new RestRequestHandler("testAlarmHandlerImpIp", 100), "testAlarmHandlerImpDeviceID");
        AlarmIterator result = alarmHandlerImp.getHistoryAlarmBatch(new AlarmQuery(new AlarmInfoMO(), 100L, 1000L));
        assertSame("alarmHandlerImp.alarmIterator", result, getPrivateField(alarmHandlerImp, "alarmIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 0, result.getConcretFilterHeaders().length);
    }
    
    public void testClearAlarmThrowsApiException() throws Throwable {
        try {
            new AlarmHandlerImp(null, "testAlarmHandlerImpDeviceID").clearAlarm(new Long(100L));
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testClearAlarmThrowsIllegalArgumentException() throws Throwable {
        AlarmHandlerImp alarmHandlerImp = new AlarmHandlerImp(new RestRequestHandler("testAlarmHandlerImpIp", 100), "testAlarmHandlerImp\rDeviceID");
        try {
            alarmHandlerImp.clearAlarm(new Long(100L));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testClearAlarmThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testAlarmHandlerImpIp", 100);
        AlarmHandlerImp alarmHandlerImp = new AlarmHandlerImp(restRequestHandler, "testAlarmHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(AlarmHandlerImp.class);
        try {
            alarmHandlerImp.clearAlarm(new Long(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("alarmHandlerImp.deviceID", "testAlarmHandlerImpDeviceID", getPrivateField(alarmHandlerImp, "deviceID"));
            assertSame("alarmHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(alarmHandlerImp, "restRequestHandler"));
        }
    }
}

