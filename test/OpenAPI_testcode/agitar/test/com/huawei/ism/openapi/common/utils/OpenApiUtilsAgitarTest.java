/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:37:48
 * Time to generate: 00:33.110 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.utils.OpenApiUtils:053f834134ff70b557f0f64c311a0c65
 *
 */

package com.huawei.ism.openapi.common.utils;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONException;
import org.json.JSONObject;

public class OpenApiUtilsAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return OpenApiUtils.class;
    }
    
    public void testConstructor() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        assertFalse("openApiUtils.isJunitTest()", openApiUtils.isJunitTest());
    }
    
    public void testAddStringToArray() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] srcArray = new String[2];
        String[] result = openApiUtils.addStringToArray(srcArray, 0, "testOpenApiUtilsValue");
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", "testOpenApiUtilsValue", result[0]);
    }
    
    public void testAddStringToArray1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] result = openApiUtils.addStringToArray((String[]) null, 100, "testOpenApiUtilsValue");
        assertNull("result", result);
    }
    
    public void testComposeFromMap() throws Throwable {
        Map properties = new HashMap(100, 100.0F);
        JSONObject requestBody = new JSONObject();
        OpenApiUtils.getOpenApiUtilsInstance().composeFromMap(requestBody, (Map) properties);
        assertEquals("requestBody.length()", 0, requestBody.length());
        assertEquals("(HashMap) properties.size()", 0, properties.size());
    }
    
    public void testComposeFromMap1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        Map properties = new HashMap(100, 100.0F);
        properties.put("testString", new Integer(0));
        JSONObject requestBody = new JSONObject();
        openApiUtils.composeFromMap(requestBody, (Map) properties);
        assertEquals("requestBody.length()", 1, requestBody.length());
        assertEquals("requestBody.myHashMap.get(\"testString\")", new Integer(0), ((Map) getPrivateField(requestBody, "myHashMap")).get("testString"));
    }
    
    public void testComposeFromMap2() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        Map properties = new HashMap(100, 100.0F);
        openApiUtils.composeFromMap(null, (Map) properties);
        assertEquals("(HashMap) properties.size()", 0, properties.size());
    }
    
    public void testComposeFromMap3() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        JSONObject requestBody = new JSONObject();
        openApiUtils.composeFromMap(requestBody, null);
        assertEquals("requestBody.length()", 0, requestBody.length());
    }
    
    public void testComposeList() throws Throwable {
        String[] args = new String[0];
        ArrayList result = (ArrayList) OpenApiUtils.getOpenApiUtilsInstance().composeList(args);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testComposeList1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] args = new String[2];
        ArrayList result = (ArrayList) openApiUtils.composeList(args);
        assertEquals("result.size()", 2, result.size());
        assertNull("(ArrayList) result.get(0)", result.get(0));
    }
    
    public void testComposeRelativeUri() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] args = new String[0];
        String result = openApiUtils.composeRelativeUri(args);
        assertEquals("result", "", result);
    }
    
    public void testComposeRelativeUri1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] args = new String[1];
        String result = openApiUtils.composeRelativeUri(args);
        assertEquals("result", "/null", result);
    }
    
    public void testConvertToStringMaps() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        Map srcMaps = new HashMap(100, 100.0F);
        srcMaps.put("testString", "testString");
        HashMap result = (HashMap) openApiUtils.convertToStringMaps((Map) srcMaps);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"testString\")", "testString", result.get("testString"));
    }
    
    public void testConvertToStringMaps1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        HashMap result = (HashMap) openApiUtils.convertToStringMaps((Map) new HashMap(100, 100.0F));
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetOpenApiUtilsInstance() throws Throwable {
        OpenApiUtils result = OpenApiUtils.getOpenApiUtilsInstance();
        assertFalse("result.isJunitTest()", result.isJunitTest());
    }
    
    public void testGetOpenApiUtilsInstance1() throws Throwable {
        storeStaticField(OpenApiUtils.class, "openApiUtilsInstanceApiUtils");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(OpenApiUtils.class, "<init>()", Mockingbird.getProxyObject(OpenApiUtils.class, true));
        setPrivateField(OpenApiUtils.class, "openApiUtilsInstanceApiUtils", null);
        Mockingbird.enterTestMode(OpenApiUtils.class);
        OpenApiUtils result = OpenApiUtils.getOpenApiUtilsInstance();
        assertFalse("result.isJunitTest()", result.isJunitTest());
        assertNotNull("OpenApiUtils.openApiUtilsInstanceApiUtils", getPrivateField(OpenApiUtils.class, "openApiUtilsInstanceApiUtils"));
    }
    
    public void testGetUTCTime() throws Throwable {
        OpenApiUtils.getOpenApiUtilsInstance().getUTCTime();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testIsContainKey() throws Throwable {
        String[] keyArray = new String[3];
        keyArray[0] = "testString";
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isContainKey("testString", keyArray);
        assertTrue("result", result);
    }
    
    public void testIsContainKey1() throws Throwable {
        String[] keyArray = new String[3];
        keyArray[0] = ".";
        keyArray[1] = "testString";
        boolean result = OpenApiUtils.getOpenApiUtilsInstance().isContainKey("testString", keyArray);
        assertTrue("result", result);
    }
    
    public void testIsContainKey2() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] keyArray = new String[0];
        boolean result = openApiUtils.isContainKey("testOpenApiUtilsKey", keyArray);
        assertFalse("result", result);
    }
    
    public void testIsContainKey3() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] keyArray = new String[1];
        keyArray[0] = "testString";
        boolean result = openApiUtils.isContainKey("testOpenApiUtilsKey", keyArray);
        assertFalse("result", result);
    }
    
    public void testIsContainKey4() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] keyArray = new String[0];
        boolean result = openApiUtils.isContainKey(null, keyArray);
        assertFalse("result", result);
    }
    
    public void testIsContainKey5() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isContainKey("testOpenApiUtilsKey", (String[]) null);
        assertFalse("result", result);
    }
    
    public void testIsJunitTest() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isJunitTest();
        assertFalse("result", result);
    }
    
    public void testIsJunitTestWithAggressiveMocks() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"ISM_JUNIT"}, "", 1);
        Mockingbird.setReturnValue(true, Boolean.class, "parseBoolean", "(java.lang.String)boolean", Boolean.TRUE, 1);
        Mockingbird.enterTestMode(OpenApiUtils.class);
        boolean result = openApiUtils.isJunitTest();
        assertTrue("result", result);
    }
    
    public void testIsJunitTestWithAggressiveMocks1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class, true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, System.class, "getProperty", "(java.lang.String)java.lang.String", new Object[] {"ISM_JUNIT"}, "", 1);
        Mockingbird.setReturnValue(true, Boolean.class, "parseBoolean", "(java.lang.String)boolean", Boolean.FALSE, 1);
        Mockingbird.enterTestMode(OpenApiUtils.class);
        boolean result = openApiUtils.isJunitTest();
        assertFalse("result", result);
    }
    
    public void testIsNullArray() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        Object[] t = new Object[1];
        boolean result = openApiUtils.isNullArray(t);
        assertFalse("result", result);
    }
    
    public void testIsNullArray1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        Object[] t = new Object[0];
        boolean result = openApiUtils.isNullArray(t);
        assertTrue("result", result);
    }
    
    public void testIsNullArray2() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullArray((Object[]) null);
        assertTrue("result", result);
    }
    
    public void testIsNullList() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        List fList = new ArrayList(100);
        fList.add(openApiUtils);
        boolean result = openApiUtils.isNullList(fList);
        assertFalse("result", result);
    }
    
    public void testIsNullList1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullList(new ArrayList(100));
        assertTrue("result", result);
    }
    
    public void testIsNullList2() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullList((List) null);
        assertTrue("result", result);
    }
    
    public void testIsNullStr() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullStr("testOpenApiUtilsContent");
        assertFalse("result", result);
    }
    
    public void testIsNullStr1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullStr("");
        assertTrue("result", result);
    }
    
    public void testIsNullStr2() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullStr(null);
        assertTrue("result", result);
    }
    
    public void testIsNullString() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullString(" ", false);
        assertFalse("result", result);
    }
    
    public void testIsNullString1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullString("2C", true);
        assertFalse("result", result);
    }
    
    public void testIsNullString2() throws Throwable {
        boolean result = OpenApiUtils.getOpenApiUtilsInstance().isNullString("\r \r", true);
        assertTrue("result", result);
    }
    
    public void testIsNullString3() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullString("X\r\n ", true);
        assertFalse("result", result);
    }
    
    public void testIsNullString4() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullString("", true);
        assertTrue("result", result);
    }
    
    public void testIsNullString5() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        boolean result = openApiUtils.isNullString(null, true);
        assertTrue("result", result);
    }
    
    public void testRemoveStringFromArray() throws Throwable {
        String[] srcArray = new String[1];
        String[] result = OpenApiUtils.getOpenApiUtilsInstance().removeStringFromArray(srcArray, 0);
        assertEquals("result.length", 0, result.length);
    }
    
    public void testRemoveStringFromArray1() throws Throwable {
        String[] srcArray = new String[2];
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] result = openApiUtils.removeStringFromArray(srcArray, 0);
        assertEquals("result.length", 1, result.length);
        assertNull("result[0]", result[0]);
    }
    
    public void testRemoveStringFromArray2() throws Throwable {
        String[] result = OpenApiUtils.getOpenApiUtilsInstance().removeStringFromArray((String[]) null, 100);
        assertNull("result", result);
    }
    
    public void testRemoveStringFromArray3() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] result = openApiUtils.removeStringFromArray((String[]) null, "testOpenApiUtilsValue");
        assertNull("result", result);
    }
    
    public void testRemoveStringFromArray4() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] srcArray = new String[1];
        String[] result = openApiUtils.removeStringFromArray(srcArray, "testOpenApiUtilsValue");
        assertEquals("result.length", 1, result.length);
        assertNull("result[0]", result[0]);
    }
    
    public void testRemoveStringFromArray5() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] srcArray = new String[0];
        String[] result = openApiUtils.removeStringFromArray(srcArray, "testOpenApiUtilsValue");
        assertEquals("result.length", 0, result.length);
    }
    
    public void testAddStringToArrayThrowsIndexOutOfBoundsException() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] srcArray = new String[1];
        try {
            openApiUtils.addStringToArray(srcArray, 100, "testOpenApiUtilsValue");
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 100, Size: 1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
        }
    }
    
    public void testComposeFromMapThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        Set set = (Set) Mockingbird.getProxyObject(Set.class);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Map.Entry entry = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Map.Entry entry2 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj2 = Mockingbird.getProxyObject(Object.class);
        Map.Entry entry3 = (Map.Entry) Mockingbird.getProxyObject(Map.Entry.class);
        Object obj3 = Mockingbird.getProxyObject(Object.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", Mockingbird.getProxyObject(ApiMessage.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(map.entrySet(), set);
        Mockingbird.setReturnValue(set.iterator(), iterator);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry);
        Mockingbird.setReturnValue(entry.getKey(), obj);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(entry.getValue(), null);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry2);
        Mockingbird.setReturnValue(entry2.getKey(), obj2);
        Mockingbird.setReturnValue(false, obj2, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(entry2.getValue(), null);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(iterator.hasNext(), true);
        Mockingbird.setReturnValue(iterator.next(), entry3);
        Mockingbird.setReturnValue(entry3.getKey(), obj3);
        Mockingbird.setReturnValue(false, obj3, "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(entry3.getValue(), null);
        Mockingbird.setException(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", jSONException, 1);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(OpenApiUtils.class);
        try {
            openApiUtils.composeFromMap(jSONObject, (Map) map);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertFalse("openApiUtils.isJunitTest()", openApiUtils.isJunitTest());
        }
    }
    
    public void testComposeListThrowsNullPointerException() throws Throwable {
        try {
            OpenApiUtils.getOpenApiUtilsInstance().composeList((String[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
        }
    }
    
    public void testComposeRelativeUriThrowsNullPointerException() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        try {
            openApiUtils.composeRelativeUri((String[]) null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
        }
    }
    
    public void testConvertToStringMapsThrowsNullPointerException() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        Map srcMaps = new HashMap(100, 100.0F);
        srcMaps.put((Object) null, "");
        try {
            openApiUtils.convertToStringMaps((Map) srcMaps);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
            assertEquals("(HashMap) srcMaps.size()", 1, srcMaps.size());
        }
    }
    
    public void testConvertToStringMapsThrowsNullPointerException1() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        Map srcMaps = new HashMap(0, 1.0F);
        srcMaps.put("", (Object) null);
        srcMaps.put((Object) null, (Object) null);
        try {
            openApiUtils.convertToStringMaps((Map) srcMaps);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
            assertEquals("(HashMap) srcMaps.size()", 2, srcMaps.size());
        }
    }
    
    public void testConvertToStringMapsThrowsNullPointerException2() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        try {
            openApiUtils.convertToStringMaps(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
        }
    }
    
    public void testIsContainKeyThrowsNullPointerException() throws Throwable {
        OpenApiUtils openApiUtils = (OpenApiUtils) callPrivateMethod("com.huawei.ism.openapi.common.utils.OpenApiUtils", "<init>", new Class[] {}, null, new Object[] {});
        String[] keyArray = new String[6];
        keyArray[0] = "testString";
        keyArray[1] = "abcdefghijkQlmnopqrstuvwxyz";
        keyArray[2] = "ISM_UNIT";
        keyArray[3] = "testString";
        keyArray[4] = "1";
        try {
            openApiUtils.isContainKey("testOpenApiUtilsKey", keyArray);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
        }
    }
    
    public void testIsContainKeyThrowsNullPointerException1() throws Throwable {
        String[] keyArray = new String[1];
        try {
            OpenApiUtils.getOpenApiUtilsInstance().isContainKey("testOpenApiUtilsKey", keyArray);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(OpenApiUtils.class, ex);
        }
    }
    
    public void testRemoveStringFromArrayThrowsArrayIndexOutOfBoundsException() throws Throwable {
        String[] srcArray = new String[0];
        try {
            OpenApiUtils.getOpenApiUtilsInstance().removeStringFromArray(srcArray, -1);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "-1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
        }
    }
    
    public void testRemoveStringFromArrayThrowsIndexOutOfBoundsException() throws Throwable {
        String[] srcArray = new String[1];
        try {
            OpenApiUtils.getOpenApiUtilsInstance().removeStringFromArray(srcArray, 100);
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "Index: 100, Size: 1", ex.getMessage());
            assertThrownBy(ArrayList.class, ex);
        }
    }
}

