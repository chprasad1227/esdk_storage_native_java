/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:38:11
 * Time to generate: 00:14.515 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.portgroup.PortGroupMO:da40d943378d19b8d3f86813b55699c5
 *
 */

package com.huawei.ism.openapi.portgroup;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import org.json.JSONObject;

public class PortGroupMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PortGroupMO.class;
    }
    
    public void testConstructor() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO(new JSONObject());
        assertEquals("portGroupMO.getMO().getProperties().size()", 0, portGroupMO.getMO().getProperties().size());
    }
    
    public void testGetDescription() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        String result = portGroupMO.getDescription();
        assertNull("result", result);
        assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
    }
    
    public void testGetDescription1() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        portGroupMO.setDescription("testPortGroupMODescription");
        String result = portGroupMO.getDescription();
        assertEquals("result", "testPortGroupMODescription", result);
        assertEquals("portGroupMO.getMO().getProperties().size()", 2, portGroupMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        portGroupMO.setId("testPortGroupMOId");
        String result = portGroupMO.getId();
        assertEquals("result", "testPortGroupMOId", result);
        assertEquals("portGroupMO.getMO().getProperties().size()", 2, portGroupMO.getMO().getProperties().size());
    }
    
    public void testGetId1() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        String result = portGroupMO.getId();
        assertNull("result", result);
        assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
    }
    
    public void testGetMO() throws Throwable {
        MO result = new PortGroupMO().getMO();
        assertEquals("result.getProperties().size()", 1, result.getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        String result = portGroupMO.getName();
        assertNull("result", result);
        assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
    }
    
    public void testGetName1() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        portGroupMO.setName("testPortGroupMOName");
        String result = portGroupMO.getName();
        assertEquals("result", "testPortGroupMOName", result);
        assertEquals("portGroupMO.getMO().getProperties().size()", 2, portGroupMO.getMO().getProperties().size());
    }
    
    public void testSetDescription() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        portGroupMO.setDescription("testPortGroupMODescription");
        assertEquals("portGroupMO.getMO().getProperties().size()", 2, portGroupMO.getMO().getProperties().size());
        assertEquals("portGroupMO.getMO().getProperties().get(\"DESCRIPTION\")", "testPortGroupMODescription", portGroupMO.getMO().getProperties().get("DESCRIPTION"));
        assertEquals("portGroupMO.getMO().getProperties().size()", 2, portGroupMO.getMO().getProperties().size());
    }
    
    public void testSetId() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO(new JSONObject());
        portGroupMO.setId("testPortGroupMOId");
        assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
        assertEquals("portGroupMO.getMO().getProperties().get(\"ID\")", "testPortGroupMOId", portGroupMO.getMO().getProperties().get("ID"));
        assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
    }
    
    public void testSetName() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        portGroupMO.setName("testPortGroupMOName");
        assertEquals("portGroupMO.getMO().getProperties().size()", 2, portGroupMO.getMO().getProperties().size());
        assertEquals("portGroupMO.getMO().getProperties().get(\"NAME\")", "testPortGroupMOName", portGroupMO.getMO().getProperties().get("NAME"));
        assertEquals("portGroupMO.getMO().getProperties().size()", 2, portGroupMO.getMO().getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testString", 100);
        jObject.accumulate("testString", new Object());
        jObject.put("testPortGroupMOKey", 100.0);
        try {
            new PortGroupMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        try {
            portGroupMO.setDescription(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        try {
            portGroupMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        PortGroupMO portGroupMO = new PortGroupMO();
        try {
            portGroupMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("portGroupMO.getMO().getProperties().size()", 1, portGroupMO.getMO().getProperties().size());
        }
    }
}

