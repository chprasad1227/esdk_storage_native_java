/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:34:18
 * Time to generate: 01:18.172 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.iscsiinitiator.ISCSIInitiatorHandlerImp:975d2800208a71477a222a645e71d59c
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.iscsiinitiator;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import org.json.JSONException;
import org.json.JSONObject;

public class ISCSIInitiatorHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ISCSIInitiatorHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100);
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(restRequestHandler, "testISCSIInitiatorHandlerImpDeviceId");
        assertEquals("iSCSIInitiatorHandlerImp.deviceID", "testISCSIInitiatorHandlerImpDeviceId", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
        assertSame("iSCSIInitiatorHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
    }
    
    public void testGetBatch() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100), "testISCSIInitiatorHandlerImpDeviceId");
        ISCSIInitiatorQuery cond = new ISCSIInitiatorQuery(new ISCSIInitiatorMO(), 100L, 1000L);
        ISCSIInitiatorIterator batch = iSCSIInitiatorHandlerImp.getBatch(cond);
        ISCSIInitiatorIterator result = iSCSIInitiatorHandlerImp.getBatch(cond);
        assertSame("result", batch, result);
    }
    
    public void testGetBatch1() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100), "testISCSIInitiatorHandlerImpDeviceId");
        ISCSIInitiatorIterator result = iSCSIInitiatorHandlerImp.getBatch(new ISCSIInitiatorQuery(new ISCSIInitiatorMO(), 100L, 1000L));
        assertSame("iSCSIInitiatorHandlerImp.initiatorIterator", result, getPrivateField(iSCSIInitiatorHandlerImp, "initiatorIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 2, result.getConcretFilterHeaders().length);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "ISCSI_INITIATOR");
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = (ISCSIInitiatorHandlerImp) Mockingbird.getProxyObject(ISCSIInitiatorHandlerImp.class, true);
        ISCSIInitiatorMO iSCSIInitiatorMO = (ISCSIInitiatorMO) Mockingbird.getProxyObject(ISCSIInitiatorMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(iSCSIInitiatorHandlerImp, "deviceID", "");
        setPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler", null);
        setPrivateField(iSCSIInitiatorMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "ISCSI_INITIATOR", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", null);
        Mockingbird.setReturnValue(iSCSIInitiatorMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        iSCSIInitiatorHandlerImp.modify(iSCSIInitiatorMO);
        assertEquals("iSCSIInitiatorHandlerImp.deviceID", "", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
        assertNull("iSCSIInitiatorHandlerImp.restRequestHandler", getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveIscsiFromHostWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "ISCSI_INITIATOR");
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = (ISCSIInitiatorHandlerImp) Mockingbird.getProxyObject(ISCSIInitiatorHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(iSCSIInitiatorHandlerImp, "deviceID", "");
        setPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "ISCSI_INITIATOR", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        iSCSIInitiatorHandlerImp.removeIscsiFromHost("");
        assertEquals("iSCSIInitiatorHandlerImp.deviceID", "", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
        assertNull("iSCSIInitiatorHandlerImp.restRequestHandler", getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateThrowsApiException() throws Throwable {
        try {
            new ISCSIInitiatorHandlerImp(null, "testISCSIInitiatorHandlerImpDeviceId").create(new ISCSIInitiatorMO());
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "ISCSI_INITIATOR");
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = (ISCSIInitiatorHandlerImp) Mockingbird.getProxyObject(ISCSIInitiatorHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(iSCSIInitiatorHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "ISCSI_INITIATOR", null);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", ""), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("iSCSIInitiatorHandlerImp.deviceID", "", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
            assertNull("iSCSIInitiatorHandlerImp.restRequestHandler", getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsIllegalArgumentException() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100), "testISCSIInitiatorHandlerImp\rDeviceId");
        try {
            iSCSIInitiatorHandlerImp.create(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100);
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(restRequestHandler, "testISCSIInitiatorHandlerImpDeviceId");
        ISCSIInitiatorMO mo = new ISCSIInitiatorMO();
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.create(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("iSCSIInitiatorHandlerImp.deviceID", "testISCSIInitiatorHandlerImpDeviceId", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
            assertSame("iSCSIInitiatorHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testDeleteThrowsApiException() throws Throwable {
        try {
            new ISCSIInitiatorHandlerImp(null, "testISCSIInitiatorHandlerImpDeviceId").delete("testISCSIInitiatorHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testDeleteThrowsIllegalArgumentException() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100), "testISCSIInitiatorHandlerImpDeviceId");
        try {
            iSCSIInitiatorHandlerImp.delete("testISCSIInitiatorHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100);
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(restRequestHandler, "testISCSIInitiatorHandlerImpDeviceId");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.delete("testISCSIInitiatorHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("iSCSIInitiatorHandlerImp.deviceID", "testISCSIInitiatorHandlerImpDeviceId", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
            assertSame("iSCSIInitiatorHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new ISCSIInitiatorHandlerImp(null, "testISCSIInitiatorHandlerImpDeviceId").get("testISCSIInitiatorHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100), "testISCSIInitiatorHandlerImp\rDeviceId");
        try {
            iSCSIInitiatorHandlerImp.get("testISCSIInitiatorHandlerImpId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100);
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(restRequestHandler, "testISCSIInitiatorHandlerImpDeviceId");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.get("testISCSIInitiatorHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("iSCSIInitiatorHandlerImp.deviceID", "testISCSIInitiatorHandlerImpDeviceId", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
            assertSame("iSCSIInitiatorHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        try {
            new ISCSIInitiatorHandlerImp(null, "testISCSIInitiatorHandlerImpDeviceId").modify(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "ISCSI_INITIATOR");
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = (ISCSIInitiatorHandlerImp) Mockingbird.getProxyObject(ISCSIInitiatorHandlerImp.class, true);
        ISCSIInitiatorMO iSCSIInitiatorMO = (ISCSIInitiatorMO) Mockingbird.getProxyObject(ISCSIInitiatorMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(iSCSIInitiatorHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "ISCSI_INITIATOR", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(iSCSIInitiatorMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.modify(iSCSIInitiatorMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("iSCSIInitiatorHandlerImp.deviceID", "", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
            assertNull("iSCSIInitiatorHandlerImp.restRequestHandler", getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImp\rIp", 100), "testISCSIInitiatorHandlerImpDeviceId");
        ISCSIInitiatorMO mo = new ISCSIInitiatorMO();
        try {
            iSCSIInitiatorHandlerImp.modify(mo);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("mo.getChapName()", "null", mo.getChapName());
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100), "testISCSIInitiatorHandlerImpDeviceId");
        ISCSIInitiatorMO mo = new ISCSIInitiatorMO();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("mo.getChapName()", "null", mo.getChapName());
        }
    }
    
    public void testRemoveIscsiFromHostThrowsApiException() throws Throwable {
        try {
            new ISCSIInitiatorHandlerImp(null, "testISCSIInitiatorHandlerImpDeviceId").removeIscsiFromHost("testISCSIInitiatorHandlerImpInitiatorId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRemoveIscsiFromHostThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "ISCSI_INITIATOR");
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = (ISCSIInitiatorHandlerImp) Mockingbird.getProxyObject(ISCSIInitiatorHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(iSCSIInitiatorHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "ISCSI_INITIATOR", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setException(jSONObject.put("ID", ""), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.removeIscsiFromHost("");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("iSCSIInitiatorHandlerImp.deviceID", "", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
            assertNull("iSCSIInitiatorHandlerImp.restRequestHandler", getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testRemoveIscsiFromHostThrowsIllegalArgumentException() throws Throwable {
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(new RestRequestHandler("testISCSIInitiatorHandlerImp\rIp", 100), "testISCSIInitiatorHandlerImpDeviceId");
        try {
            iSCSIInitiatorHandlerImp.removeIscsiFromHost("testISCSIInitiatorHandlerImpInitiatorId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveIscsiFromHostThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testISCSIInitiatorHandlerImpIp", 100);
        ISCSIInitiatorHandlerImp iSCSIInitiatorHandlerImp = new ISCSIInitiatorHandlerImp(restRequestHandler, "testISCSIInitiatorHandlerImpDeviceId");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(ISCSIInitiatorHandlerImp.class);
        try {
            iSCSIInitiatorHandlerImp.removeIscsiFromHost("testISCSIInitiatorHandlerImpInitiatorId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("iSCSIInitiatorHandlerImp.deviceID", "testISCSIInitiatorHandlerImpDeviceId", getPrivateField(iSCSIInitiatorHandlerImp, "deviceID"));
            assertSame("iSCSIInitiatorHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(iSCSIInitiatorHandlerImp, "restRequestHandler"));
        }
    }
}

