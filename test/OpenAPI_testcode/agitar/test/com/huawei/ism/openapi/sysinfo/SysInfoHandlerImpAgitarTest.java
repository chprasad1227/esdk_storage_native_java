/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:41:15
 * Time to generate: 01:16.235 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.sysinfo.SysInfoHandlerImp:ad495e3ffb2c8f8dbab498c8ec243842
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.sysinfo;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;

public class SysInfoHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SysInfoHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testSysInfoHandlerImpIp", 100);
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(restRequestHandler, "testSysInfoHandlerImpDeviceID");
        assertEquals("sysInfoHandlerImp.deviceID", "testSysInfoHandlerImpDeviceID", getPrivateField(sysInfoHandlerImp, "deviceID"));
        assertSame("sysInfoHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
    }
    
    public void testForceRebootWithAggressiveMocks() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = (SysInfoHandlerImp) Mockingbird.getProxyObject(SysInfoHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(sysInfoHandlerImp, "deviceID", "");
        setPrivateField(sysInfoHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        sysInfoHandlerImp.forceReboot();
        assertEquals("sysInfoHandlerImp.deviceID", "", getPrivateField(sysInfoHandlerImp, "deviceID"));
        assertNull("sysInfoHandlerImp.restRequestHandler", getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
    }
    
    public void testPoweroffWithAggressiveMocks() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = (SysInfoHandlerImp) Mockingbird.getProxyObject(SysInfoHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(sysInfoHandlerImp, "deviceID", "");
        setPrivateField(sysInfoHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        sysInfoHandlerImp.poweroff();
        assertEquals("sysInfoHandlerImp.deviceID", "", getPrivateField(sysInfoHandlerImp, "deviceID"));
        assertNull("sysInfoHandlerImp.restRequestHandler", getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
    }
    
    public void testRebootWithAggressiveMocks() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = (SysInfoHandlerImp) Mockingbird.getProxyObject(SysInfoHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(sysInfoHandlerImp, "deviceID", "");
        setPrivateField(sysInfoHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        sysInfoHandlerImp.reboot();
        assertEquals("sysInfoHandlerImp.deviceID", "", getPrivateField(sysInfoHandlerImp, "deviceID"));
        assertNull("sysInfoHandlerImp.restRequestHandler", getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
    }
    
    public void testSystemGetWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "SYSTEM");
        SysInfoHandlerImp sysInfoHandlerImp = (SysInfoHandlerImp) Mockingbird.getProxyObject(SysInfoHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        SystemMO systemMO = (SystemMO) Mockingbird.getProxyObject(SystemMO.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        SystemMO systemMO2 = (SystemMO) Mockingbird.getProxyObject(SystemMO.class);
        OpenApiUtils openApiUtils3 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        SystemMO systemMO3 = (SystemMO) Mockingbird.getProxyObject(SystemMO.class);
        setPrivateField(sysInfoHandlerImp, "deviceID", "");
        setPrivateField(sysInfoHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "SYSTEM", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), systemMO);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        RestManager restManager2 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager2);
        Mockingbird.setReturnValue(restManager2.getGetRequestMO(), systemMO2);
        Mockingbird.setReturnValue(systemMO2.ptotectedGetSystemStatus(), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils3);
        Mockingbird.setReturnValue(false, openApiUtils3, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        RestManager restManager3 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager3);
        Mockingbird.setReturnValue(restManager3.getGetRequestMO(), systemMO3);
        Mockingbird.setReturnValue(systemMO3.protectedGetCmoSysUtcTime(), new Long(0L));
        systemMO.setCmoSysUtcTime(new Long(0L));
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        SystemMO result = sysInfoHandlerImp.systemGet();
        assertNotNull("result", result);
    }
    
    public void testForceRebootThrowsApiException() throws Throwable {
        try {
            new SysInfoHandlerImp(null, "testSysInfoHandlerImpDeviceID").forceReboot();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testForceRebootThrowsIllegalArgumentException() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(new RestRequestHandler("testSysInfoHandlerImpIp", 100), "testSysInfoHandlerImp\rDeviceID");
        try {
            sysInfoHandlerImp.forceReboot();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testForceRebootThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testSysInfoHandlerImpIp", 100);
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(restRequestHandler, "testSysInfoHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        try {
            sysInfoHandlerImp.forceReboot();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("sysInfoHandlerImp.deviceID", "testSysInfoHandlerImpDeviceID", getPrivateField(sysInfoHandlerImp, "deviceID"));
            assertSame("sysInfoHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetSysUtcTimeThrowsIllegalArgumentException() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(new RestRequestHandler("testSysInfoHandlerImp\rIp", 100), "testSysInfoHandlerImpDeviceID");
        try {
            callPrivateMethod("com.huawei.ism.openapi.sysinfo.SysInfoHandlerImp", "getSysUtcTime", new Class[] {}, sysInfoHandlerImp, new Object[] {});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetSystemStatusThrowsApiException() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(null, "testSysInfoHandlerImpDeviceID");
        try {
            callPrivateMethod("com.huawei.ism.openapi.sysinfo.SysInfoHandlerImp", "getSystemStatus", new Class[] {}, sysInfoHandlerImp, new Object[] {});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testPoweroffThrowsApiException() throws Throwable {
        try {
            new SysInfoHandlerImp(null, "testSysInfoHandlerImpDeviceID").poweroff();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testPoweroffThrowsIllegalArgumentException() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(new RestRequestHandler("testSysInfoHandlerImp\rIp", 100), "testSysInfoHandlerImpDeviceID");
        try {
            sysInfoHandlerImp.poweroff();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testPoweroffThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testSysInfoHandlerImpIp", 100);
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(restRequestHandler, "testSysInfoHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        try {
            sysInfoHandlerImp.poweroff();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("sysInfoHandlerImp.deviceID", "testSysInfoHandlerImpDeviceID", getPrivateField(sysInfoHandlerImp, "deviceID"));
            assertSame("sysInfoHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testRebootThrowsApiException() throws Throwable {
        try {
            new SysInfoHandlerImp(null, "testSysInfoHandlerImpDeviceID").reboot();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRebootThrowsIllegalArgumentException() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(new RestRequestHandler("testSysInfoHandlerImp\rIp", 100), "testSysInfoHandlerImpDeviceID");
        try {
            sysInfoHandlerImp.reboot();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRebootThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testSysInfoHandlerImpIp", 100);
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(restRequestHandler, "testSysInfoHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        try {
            sysInfoHandlerImp.reboot();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("sysInfoHandlerImp.deviceID", "testSysInfoHandlerImpDeviceID", getPrivateField(sysInfoHandlerImp, "deviceID"));
            assertSame("sysInfoHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testSystemGetThrowsApiException() throws Throwable {
        try {
            new SysInfoHandlerImp(null, "testSysInfoHandlerImpDeviceID").systemGet();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testSystemGetThrowsIllegalArgumentException() throws Throwable {
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(new RestRequestHandler("testSysInfoHandlerImpIp", 100), "testSysInfoHandlerImp\rDeviceID");
        try {
            sysInfoHandlerImp.systemGet();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testSystemGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testSysInfoHandlerImpIp", 100);
        SysInfoHandlerImp sysInfoHandlerImp = new SysInfoHandlerImp(restRequestHandler, "testSysInfoHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(SysInfoHandlerImp.class);
        try {
            sysInfoHandlerImp.systemGet();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("sysInfoHandlerImp.deviceID", "testSysInfoHandlerImpDeviceID", getPrivateField(sysInfoHandlerImp, "deviceID"));
            assertSame("sysInfoHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(sysInfoHandlerImp, "restRequestHandler"));
        }
    }
}

