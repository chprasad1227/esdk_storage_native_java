/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:30:33
 * Time to generate: 01:30.312 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.keydeifines.EnumDefine:5e560d9dcbf1b11eab9ff089a914cc1c
 *
 */

package com.huawei.ism.openapi.common.keydeifines;

import com.agitar.lib.junit.AgitarTestCase;

public class EnumDefineAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return EnumDefine.class;
    }
    
    public void testConstructor() throws Throwable {
        new EnumDefine();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testANALYSIS_RAID_LEVEL_EGetValue() throws Throwable {
        int result = EnumDefine.ANALYSIS_RAID_LEVEL_E.RAID3_5.getValue();
        assertEquals("result", 6, result);
    }
    
    public void testANALYSIS_RAID_LEVEL_EToString() throws Throwable {
        String result = EnumDefine.ANALYSIS_RAID_LEVEL_E.RAID3_3.toString();
        assertEquals("result", "ANALYSIS_RAID_LEVEL_E.RAID3_3", result);
    }
    
    public void testANALYSIS_RAID_LEVEL_EValueOf() throws Throwable {
        EnumDefine.ANALYSIS_RAID_LEVEL_E result = EnumDefine.ANALYSIS_RAID_LEVEL_E.valueOf("RAID10");
        assertEquals("result", EnumDefine.ANALYSIS_RAID_LEVEL_E.RAID10, result);
    }
    
    public void testANALYSIS_RAID_LEVEL_EValueOf1() throws Throwable {
        EnumDefine.ANALYSIS_RAID_LEVEL_E result = EnumDefine.ANALYSIS_RAID_LEVEL_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testANALYSIS_RAID_LEVEL_EValueOf2() throws Throwable {
        EnumDefine.ANALYSIS_RAID_LEVEL_E result = EnumDefine.ANALYSIS_RAID_LEVEL_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testANALYSIS_RAID_LEVEL_EValueOf3() throws Throwable {
        EnumDefine.ANALYSIS_RAID_LEVEL_E result = EnumDefine.ANALYSIS_RAID_LEVEL_E.valueOf(0);
        assertEquals("result", EnumDefine.ANALYSIS_RAID_LEVEL_E.RAID0, result);
    }
    
    public void testANALYSIS_RAID_LEVEL_EValueOf4() throws Throwable {
        EnumDefine.ANALYSIS_RAID_LEVEL_E result = EnumDefine.ANALYSIS_RAID_LEVEL_E.valueOf(1);
        assertEquals("result", EnumDefine.ANALYSIS_RAID_LEVEL_E.RAID10, result);
    }
    
    public void testANALYSIS_RAID_LEVEL_EValues() throws Throwable {
        EnumDefine.ANALYSIS_RAID_LEVEL_E[] result = EnumDefine.ANALYSIS_RAID_LEVEL_E.values();
        assertEquals("result.length", 10, result.length);
        assertEquals("result[0]", EnumDefine.ANALYSIS_RAID_LEVEL_E.RAID0, result[0]);
    }
    
    public void testASSOCIATE_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.ASSOCIATE_TYPE_E.MAPPING.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testASSOCIATE_TYPE_EToString() throws Throwable {
        String result = EnumDefine.ASSOCIATE_TYPE_E.MAPPING.toString();
        assertEquals("result", "ASSOCIATE_TYPE_E.MAPPING", result);
    }
    
    public void testASSOCIATE_TYPE_EValueOf() throws Throwable {
        EnumDefine.ASSOCIATE_TYPE_E result = EnumDefine.ASSOCIATE_TYPE_E.valueOf("MAPPING");
        assertEquals("result", EnumDefine.ASSOCIATE_TYPE_E.MAPPING, result);
    }
    
    public void testASSOCIATE_TYPE_EValueOf1() throws Throwable {
        EnumDefine.ASSOCIATE_TYPE_E result = EnumDefine.ASSOCIATE_TYPE_E.valueOf(0);
        assertEquals("result", EnumDefine.ASSOCIATE_TYPE_E.MAPPING, result);
    }
    
    public void testASSOCIATE_TYPE_EValueOf2() throws Throwable {
        EnumDefine.ASSOCIATE_TYPE_E result = EnumDefine.ASSOCIATE_TYPE_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testASSOCIATE_TYPE_EValueOf3() throws Throwable {
        EnumDefine.ASSOCIATE_TYPE_E result = EnumDefine.ASSOCIATE_TYPE_E.valueOf(1);
        assertNull("result", result);
    }
    
    public void testASSOCIATE_TYPE_EValues() throws Throwable {
        EnumDefine.ASSOCIATE_TYPE_E[] result = EnumDefine.ASSOCIATE_TYPE_E.values();
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", EnumDefine.ASSOCIATE_TYPE_E.MAPPING, result[0]);
    }
    
    public void testAccessPermissionGetValue() throws Throwable {
        int result = EnumDefine.AccessPermission.CIFS_ALLCONTROL.getValue();
        assertEquals("result", 3, result);
    }
    
    public void testAccessPermissionToString() throws Throwable {
        String result = EnumDefine.AccessPermission.NFS_RW_NOROOT.toString();
        assertEquals("result", "AccessPermission.NFS_RW_NOROOT", result);
    }
    
    public void testAccessPermissionValueOf() throws Throwable {
        EnumDefine.AccessPermission result = EnumDefine.AccessPermission.valueOf(1);
        assertEquals("result", EnumDefine.AccessPermission.CIFS_READ, result);
    }
    
    public void testAccessPermissionValueOf1() throws Throwable {
        EnumDefine.AccessPermission result = EnumDefine.AccessPermission.valueOf(0);
        assertNull("result", result);
    }
    
    public void testAccessPermissionValueOf2() throws Throwable {
        EnumDefine.AccessPermission result = EnumDefine.AccessPermission.valueOf(2);
        assertEquals("result", EnumDefine.AccessPermission.CIFS_READ_WRITE, result);
    }
    
    public void testAccessPermissionValueOf3() throws Throwable {
        EnumDefine.AccessPermission result = EnumDefine.AccessPermission.valueOf("CIFS_READ_WRITE");
        assertEquals("result", EnumDefine.AccessPermission.CIFS_READ_WRITE, result);
    }
    
    public void testAccessPermissionValues() throws Throwable {
        EnumDefine.AccessPermission[] result = EnumDefine.AccessPermission.values();
        assertEquals("result.length", 9, result.length);
        assertEquals("result[0]", EnumDefine.AccessPermission.CIFS_READ, result[0]);
    }
    
    public void testCACHE_MIRROR_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.CACHE_MIRROR_STATUS_E.CACHE_MIRROR_ENABLE.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testCACHE_MIRROR_STATUS_EGetValue1() throws Throwable {
        int result = EnumDefine.CACHE_MIRROR_STATUS_E.CACHE_MIRROR_DISABLE.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testCACHE_MIRROR_STATUS_EToString() throws Throwable {
        String result = EnumDefine.CACHE_MIRROR_STATUS_E.CACHE_MIRROR_DISABLE.toString();
        assertEquals("result", "CACHE_MIRROR_STATUS_E.CACHE_MIRROR_DISABLE", result);
    }
    
    public void testCACHE_MIRROR_STATUS_EValueOf() throws Throwable {
        EnumDefine.CACHE_MIRROR_STATUS_E result = EnumDefine.CACHE_MIRROR_STATUS_E.valueOf("CACHE_MIRROR_DISABLE");
        assertEquals("result", EnumDefine.CACHE_MIRROR_STATUS_E.CACHE_MIRROR_DISABLE, result);
    }
    
    public void testCACHE_MIRROR_STATUS_EValueOf1() throws Throwable {
        EnumDefine.CACHE_MIRROR_STATUS_E result = EnumDefine.CACHE_MIRROR_STATUS_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testCACHE_MIRROR_STATUS_EValueOf2() throws Throwable {
        EnumDefine.CACHE_MIRROR_STATUS_E result = EnumDefine.CACHE_MIRROR_STATUS_E.valueOf(1);
        assertEquals("result", EnumDefine.CACHE_MIRROR_STATUS_E.CACHE_MIRROR_ENABLE, result);
    }
    
    public void testCACHE_MIRROR_STATUS_EValues() throws Throwable {
        EnumDefine.CACHE_MIRROR_STATUS_E[] result = EnumDefine.CACHE_MIRROR_STATUS_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.CACHE_MIRROR_STATUS_E.CACHE_MIRROR_DISABLE, result[0]);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EGetValue() throws Throwable {
        int result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.CACHE_READ_AHEAD_STRATEGY_NOTHING.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EGetValue1() throws Throwable {
        int result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.CACHE_READ_AHEAD_STRATEGY_INTELLIGENT.getValue();
        assertEquals("result", 3, result);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EToString() throws Throwable {
        String result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.CACHE_READ_AHEAD_STRATEGY_INTELLIGENT.toString();
        assertEquals("result", "CACHE_READ_AHEAD_STRATEGY_E.CACHE_READ_AHEAD_STRATEGY_INTELLIGENT", result);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EValueOf() throws Throwable {
        EnumDefine.CACHE_READ_AHEAD_STRATEGY_E result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EValueOf1() throws Throwable {
        EnumDefine.CACHE_READ_AHEAD_STRATEGY_E result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.valueOf(1);
        assertEquals("result", EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.CACHE_READ_AHEAD_STRATEGY_FASTNESS, result);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EValueOf2() throws Throwable {
        EnumDefine.CACHE_READ_AHEAD_STRATEGY_E result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EValueOf3() throws Throwable {
        EnumDefine.CACHE_READ_AHEAD_STRATEGY_E result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.valueOf("CACHE_READ_AHEAD_STRATEGY_FASTNESS");
        assertEquals("result", EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.CACHE_READ_AHEAD_STRATEGY_FASTNESS, result);
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EValues() throws Throwable {
        EnumDefine.CACHE_READ_AHEAD_STRATEGY_E[] result = EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.CACHE_READ_AHEAD_STRATEGY_NOTHING, result[0]);
    }
    
    public void testCACHE_WRITE_BACK_EGetValue() throws Throwable {
        int result = EnumDefine.CACHE_WRITE_BACK_E.WRITE_BACK.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testCACHE_WRITE_BACK_EToString() throws Throwable {
        String result = EnumDefine.CACHE_WRITE_BACK_E.WRITE_BACK.toString();
        assertEquals("result", "CACHE_WRITE_BACK_E.WRITE_BACK", result);
    }
    
    public void testCACHE_WRITE_BACK_EValueOf() throws Throwable {
        EnumDefine.CACHE_WRITE_BACK_E result = EnumDefine.CACHE_WRITE_BACK_E.valueOf("WRITE_BACK_MANDATORY");
        assertEquals("result", EnumDefine.CACHE_WRITE_BACK_E.WRITE_BACK_MANDATORY, result);
    }
    
    public void testCACHE_WRITE_BACK_EValueOf1() throws Throwable {
        EnumDefine.CACHE_WRITE_BACK_E result = EnumDefine.CACHE_WRITE_BACK_E.valueOf(2);
        assertEquals("result", EnumDefine.CACHE_WRITE_BACK_E.WRITE_THROUGH, result);
    }
    
    public void testCACHE_WRITE_BACK_EValueOf2() throws Throwable {
        EnumDefine.CACHE_WRITE_BACK_E result = EnumDefine.CACHE_WRITE_BACK_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testCACHE_WRITE_BACK_EValueOf3() throws Throwable {
        EnumDefine.CACHE_WRITE_BACK_E result = EnumDefine.CACHE_WRITE_BACK_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testCACHE_WRITE_BACK_EValues() throws Throwable {
        EnumDefine.CACHE_WRITE_BACK_E[] result = EnumDefine.CACHE_WRITE_BACK_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.CACHE_WRITE_BACK_E.WRITE_BACK, result[0]);
    }
    
    public void testCPY_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.CPY_TYPE_E.CPY_TYPE_INCREMENT.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testCPY_TYPE_EToString() throws Throwable {
        String result = EnumDefine.CPY_TYPE_E.CPY_TYPE_INCREMENT.toString();
        assertEquals("result", "CPY_TYPE_E.CPY_TYPE_INCREMENT", result);
    }
    
    public void testCPY_TYPE_EValueOf() throws Throwable {
        EnumDefine.CPY_TYPE_E result = EnumDefine.CPY_TYPE_E.valueOf("CPY_TYPE_FULL");
        assertEquals("result", EnumDefine.CPY_TYPE_E.CPY_TYPE_FULL, result);
    }
    
    public void testCPY_TYPE_EValueOf1() throws Throwable {
        EnumDefine.CPY_TYPE_E result = EnumDefine.CPY_TYPE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testCPY_TYPE_EValueOf2() throws Throwable {
        EnumDefine.CPY_TYPE_E result = EnumDefine.CPY_TYPE_E.valueOf(3);
        assertNull("result", result);
    }
    
    public void testCPY_TYPE_EValueOf3() throws Throwable {
        EnumDefine.CPY_TYPE_E result = EnumDefine.CPY_TYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.CPY_TYPE_E.CPY_TYPE_FULL, result);
    }
    
    public void testCPY_TYPE_EValues() throws Throwable {
        EnumDefine.CPY_TYPE_E[] result = EnumDefine.CPY_TYPE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.CPY_TYPE_E.CPY_TYPE_FULL, result[0]);
    }
    
    public void testDISKSCAN_IOTYPE_EGetValue() throws Throwable {
        int result = EnumDefine.DISKSCAN_IOTYPE_E.READ.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testDISKSCAN_IOTYPE_EToString() throws Throwable {
        String result = EnumDefine.DISKSCAN_IOTYPE_E.READ.toString();
        assertEquals("result", "DISKSCAN_IOTYPE_E.READ", result);
    }
    
    public void testDISKSCAN_IOTYPE_EValueOf() throws Throwable {
        EnumDefine.DISKSCAN_IOTYPE_E result = EnumDefine.DISKSCAN_IOTYPE_E.valueOf("READ");
        assertEquals("result", EnumDefine.DISKSCAN_IOTYPE_E.READ, result);
    }
    
    public void testDISKSCAN_IOTYPE_EValueOf1() throws Throwable {
        EnumDefine.DISKSCAN_IOTYPE_E result = EnumDefine.DISKSCAN_IOTYPE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testDISKSCAN_IOTYPE_EValueOf2() throws Throwable {
        EnumDefine.DISKSCAN_IOTYPE_E result = EnumDefine.DISKSCAN_IOTYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.DISKSCAN_IOTYPE_E.READ, result);
    }
    
    public void testDISKSCAN_IOTYPE_EValueOf3() throws Throwable {
        EnumDefine.DISKSCAN_IOTYPE_E result = EnumDefine.DISKSCAN_IOTYPE_E.valueOf(2);
        assertEquals("result", EnumDefine.DISKSCAN_IOTYPE_E.VERIFY, result);
    }
    
    public void testDISKSCAN_IOTYPE_EValues() throws Throwable {
        EnumDefine.DISKSCAN_IOTYPE_E[] result = EnumDefine.DISKSCAN_IOTYPE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.DISKSCAN_IOTYPE_E.READ, result[0]);
    }
    
    public void testDST_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.DST_STATUS_E.INACTIVE.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testDST_STATUS_EToString() throws Throwable {
        String result = EnumDefine.DST_STATUS_E.ACTIVE.toString();
        assertEquals("result", "DST_STATUS_E.ACTIVE", result);
    }
    
    public void testDST_STATUS_EValueOf() throws Throwable {
        EnumDefine.DST_STATUS_E result = EnumDefine.DST_STATUS_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testDST_STATUS_EValueOf1() throws Throwable {
        EnumDefine.DST_STATUS_E result = EnumDefine.DST_STATUS_E.valueOf(2);
        assertEquals("result", EnumDefine.DST_STATUS_E.INACTIVE, result);
    }
    
    public void testDST_STATUS_EValueOf2() throws Throwable {
        EnumDefine.DST_STATUS_E result = EnumDefine.DST_STATUS_E.valueOf("INACTIVE");
        assertEquals("result", EnumDefine.DST_STATUS_E.INACTIVE, result);
    }
    
    public void testDST_STATUS_EValues() throws Throwable {
        EnumDefine.DST_STATUS_E[] result = EnumDefine.DST_STATUS_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.DST_STATUS_E.ACTIVE, result[0]);
    }
    
    public void testDiskFormEGetValue() throws Throwable {
        int result = EnumDefine.DiskFormE.Unknown.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testDiskFormEGetValue1() throws Throwable {
        int result = EnumDefine.DiskFormE.DISK_1_8_INCH.getValue();
        assertEquals("result", 4, result);
    }
    
    public void testDiskFormEToString() throws Throwable {
        String result = EnumDefine.DiskFormE.Unknown.toString();
        assertEquals("result", "DiskFormE.Unknown", result);
    }
    
    public void testDiskFormEValueOf() throws Throwable {
        EnumDefine.DiskFormE result = EnumDefine.DiskFormE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testDiskFormEValueOf1() throws Throwable {
        EnumDefine.DiskFormE result = EnumDefine.DiskFormE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testDiskFormEValueOf2() throws Throwable {
        EnumDefine.DiskFormE result = EnumDefine.DiskFormE.valueOf(1);
        assertEquals("result", EnumDefine.DiskFormE.DISK_5_25_INCH, result);
    }
    
    public void testDiskFormEValueOf3() throws Throwable {
        EnumDefine.DiskFormE result = EnumDefine.DiskFormE.valueOf("Unknown");
        assertEquals("result", EnumDefine.DiskFormE.Unknown, result);
    }
    
    public void testDiskFormEValues() throws Throwable {
        EnumDefine.DiskFormE[] result = EnumDefine.DiskFormE.values();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", EnumDefine.DiskFormE.Unknown, result[0]);
    }
    
    public void testDiskLogicTypeEGetValue() throws Throwable {
        int result = EnumDefine.DiskLogicTypeE.SPARE.getValue();
        assertEquals("result", 3, result);
    }
    
    public void testDiskLogicTypeEToString() throws Throwable {
        String result = EnumDefine.DiskLogicTypeE.SPARE.toString();
        assertEquals("result", "DiskLogicTypeE.SPARE", result);
    }
    
    public void testDiskLogicTypeEValueOf() throws Throwable {
        EnumDefine.DiskLogicTypeE result = EnumDefine.DiskLogicTypeE.valueOf(1);
        assertEquals("result", EnumDefine.DiskLogicTypeE.FREE, result);
    }
    
    public void testDiskLogicTypeEValueOf1() throws Throwable {
        EnumDefine.DiskLogicTypeE result = EnumDefine.DiskLogicTypeE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testDiskLogicTypeEValueOf2() throws Throwable {
        EnumDefine.DiskLogicTypeE result = EnumDefine.DiskLogicTypeE.valueOf(2);
        assertEquals("result", EnumDefine.DiskLogicTypeE.MEMBER, result);
    }
    
    public void testDiskLogicTypeEValueOf3() throws Throwable {
        EnumDefine.DiskLogicTypeE result = EnumDefine.DiskLogicTypeE.valueOf(0);
        assertNull("result", result);
    }
    
    public void testDiskLogicTypeEValueOf4() throws Throwable {
        EnumDefine.DiskLogicTypeE result = EnumDefine.DiskLogicTypeE.valueOf("SPARE");
        assertEquals("result", EnumDefine.DiskLogicTypeE.SPARE, result);
    }
    
    public void testDiskLogicTypeEValues() throws Throwable {
        EnumDefine.DiskLogicTypeE[] result = EnumDefine.DiskLogicTypeE.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.DiskLogicTypeE.FREE, result[0]);
    }
    
    public void testDiskSsdIfTypeEGetValue() throws Throwable {
        int result = EnumDefine.DiskSsdIfTypeE.NA.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testDiskSsdIfTypeEGetValue1() throws Throwable {
        int result = EnumDefine.DiskSsdIfTypeE.FC_SSD.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testDiskSsdIfTypeEToString() throws Throwable {
        String result = EnumDefine.DiskSsdIfTypeE.NL_SAS_SSD.toString();
        assertEquals("result", "DiskSsdIfTypeE.NL_SAS_SSD", result);
    }
    
    public void testDiskSsdIfTypeEValueOf() throws Throwable {
        EnumDefine.DiskSsdIfTypeE result = EnumDefine.DiskSsdIfTypeE.valueOf("SATA3_SSD");
        assertEquals("result", EnumDefine.DiskSsdIfTypeE.SATA3_SSD, result);
    }
    
    public void testDiskSsdIfTypeEValueOf1() throws Throwable {
        EnumDefine.DiskSsdIfTypeE result = EnumDefine.DiskSsdIfTypeE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testDiskSsdIfTypeEValueOf2() throws Throwable {
        EnumDefine.DiskSsdIfTypeE result = EnumDefine.DiskSsdIfTypeE.valueOf(0);
        assertEquals("result", EnumDefine.DiskSsdIfTypeE.NA, result);
    }
    
    public void testDiskSsdIfTypeEValueOf3() throws Throwable {
        EnumDefine.DiskSsdIfTypeE result = EnumDefine.DiskSsdIfTypeE.valueOf(1);
        assertEquals("result", EnumDefine.DiskSsdIfTypeE.FC_SSD, result);
    }
    
    public void testDiskSsdIfTypeEValues() throws Throwable {
        EnumDefine.DiskSsdIfTypeE[] result = EnumDefine.DiskSsdIfTypeE.values();
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", EnumDefine.DiskSsdIfTypeE.NA, result[0]);
    }
    
    public void testDiskTypeEGetValue() throws Throwable {
        int result = EnumDefine.DiskTypeE.NL_SAS.getValue();
        assertEquals("result", 4, result);
    }
    
    public void testDiskTypeEToString() throws Throwable {
        String result = EnumDefine.DiskTypeE.MLC_SSD.toString();
        assertEquals("result", "DiskTypeE.MLC_SSD", result);
    }
    
    public void testDiskTypeEValueOf() throws Throwable {
        EnumDefine.DiskTypeE result = EnumDefine.DiskTypeE.valueOf("FC");
        assertEquals("result", EnumDefine.DiskTypeE.FC, result);
    }
    
    public void testDiskTypeEValueOf1() throws Throwable {
        EnumDefine.DiskTypeE result = EnumDefine.DiskTypeE.valueOf(0);
        assertEquals("result", EnumDefine.DiskTypeE.FC, result);
    }
    
    public void testDiskTypeEValueOf2() throws Throwable {
        EnumDefine.DiskTypeE result = EnumDefine.DiskTypeE.valueOf(7);
        assertNull("result", result);
    }
    
    public void testDiskTypeEValueOf3() throws Throwable {
        EnumDefine.DiskTypeE result = EnumDefine.DiskTypeE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testDiskTypeEValues() throws Throwable {
        EnumDefine.DiskTypeE[] result = EnumDefine.DiskTypeE.values();
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", EnumDefine.DiskTypeE.FC, result[0]);
    }
    
    public void testETH_PORT_DUPLEX_EGetValue() throws Throwable {
        int result = EnumDefine.ETH_PORT_DUPLEX_E.DUPLEX.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testETH_PORT_DUPLEX_EToString() throws Throwable {
        String result = EnumDefine.ETH_PORT_DUPLEX_E.DUPLEX.toString();
        assertEquals("result", "ETH_PORT_DUPLEX_E.DUPLEX", result);
    }
    
    public void testETH_PORT_DUPLEX_EValueOf() throws Throwable {
        EnumDefine.ETH_PORT_DUPLEX_E result = EnumDefine.ETH_PORT_DUPLEX_E.valueOf("AUTO");
        assertEquals("result", EnumDefine.ETH_PORT_DUPLEX_E.AUTO, result);
    }
    
    public void testETH_PORT_DUPLEX_EValueOf1() throws Throwable {
        EnumDefine.ETH_PORT_DUPLEX_E result = EnumDefine.ETH_PORT_DUPLEX_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testETH_PORT_DUPLEX_EValueOf2() throws Throwable {
        EnumDefine.ETH_PORT_DUPLEX_E result = EnumDefine.ETH_PORT_DUPLEX_E.valueOf(1);
        assertEquals("result", EnumDefine.ETH_PORT_DUPLEX_E.HALF_DUPLEX, result);
    }
    
    public void testETH_PORT_DUPLEX_EValueOf3() throws Throwable {
        EnumDefine.ETH_PORT_DUPLEX_E result = EnumDefine.ETH_PORT_DUPLEX_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testETH_PORT_DUPLEX_EValueOf4() throws Throwable {
        EnumDefine.ETH_PORT_DUPLEX_E result = EnumDefine.ETH_PORT_DUPLEX_E.valueOf(2);
        assertEquals("result", EnumDefine.ETH_PORT_DUPLEX_E.DUPLEX, result);
    }
    
    public void testETH_PORT_DUPLEX_EValues() throws Throwable {
        EnumDefine.ETH_PORT_DUPLEX_E[] result = EnumDefine.ETH_PORT_DUPLEX_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.ETH_PORT_DUPLEX_E.HALF_DUPLEX, result[0]);
    }
    
    public void testEXC_AND_REC_MODE_EGetValue() throws Throwable {
        int result = EnumDefine.EXC_AND_REC_MODE_E.EXC_AND_REC_MODE_AUTO.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testEXC_AND_REC_MODE_EToString() throws Throwable {
        String result = EnumDefine.EXC_AND_REC_MODE_E.EXC_AND_REC_MODE_AUTO.toString();
        assertEquals("result", "EXC_AND_REC_MODE_E.EXC_AND_REC_MODE_AUTO", result);
    }
    
    public void testEXC_AND_REC_MODE_EValueOf() throws Throwable {
        EnumDefine.EXC_AND_REC_MODE_E result = EnumDefine.EXC_AND_REC_MODE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testEXC_AND_REC_MODE_EValueOf1() throws Throwable {
        EnumDefine.EXC_AND_REC_MODE_E result = EnumDefine.EXC_AND_REC_MODE_E.valueOf(2);
        assertEquals("result", EnumDefine.EXC_AND_REC_MODE_E.EXC_AND_REC_MODE_MANUAL, result);
    }
    
    public void testEXC_AND_REC_MODE_EValueOf2() throws Throwable {
        EnumDefine.EXC_AND_REC_MODE_E result = EnumDefine.EXC_AND_REC_MODE_E.valueOf("EXC_AND_REC_MODE_AUTO");
        assertEquals("result", EnumDefine.EXC_AND_REC_MODE_E.EXC_AND_REC_MODE_AUTO, result);
    }
    
    public void testEXC_AND_REC_MODE_EValues() throws Throwable {
        EnumDefine.EXC_AND_REC_MODE_E[] result = EnumDefine.EXC_AND_REC_MODE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.EXC_AND_REC_MODE_E.EXC_AND_REC_MODE_AUTO, result[0]);
    }
    
    public void testEventLevelEGetValue() throws Throwable {
        int result = EnumDefine.EventLevelE.CRITICAL.getValue();
        assertEquals("result", 6, result);
    }
    
    public void testEventLevelEToString() throws Throwable {
        String result = EnumDefine.EventLevelE.INFO.toString();
        assertEquals("result", "EventLevelE.INFO", result);
    }
    
    public void testEventLevelEValueOf() throws Throwable {
        EnumDefine.EventLevelE result = EnumDefine.EventLevelE.valueOf(2);
        assertEquals("result", EnumDefine.EventLevelE.INFO, result);
    }
    
    public void testEventLevelEValueOf1() throws Throwable {
        EnumDefine.EventLevelE result = EnumDefine.EventLevelE.valueOf(1);
        assertNull("result", result);
    }
    
    public void testEventLevelEValueOf2() throws Throwable {
        EnumDefine.EventLevelE result = EnumDefine.EventLevelE.valueOf(3);
        assertEquals("result", EnumDefine.EventLevelE.WARNING, result);
    }
    
    public void testEventLevelEValueOf3() throws Throwable {
        EnumDefine.EventLevelE result = EnumDefine.EventLevelE.valueOf("MAJOR");
        assertEquals("result", EnumDefine.EventLevelE.MAJOR, result);
    }
    
    public void testEventLevelEValues() throws Throwable {
        EnumDefine.EventLevelE[] result = EnumDefine.EventLevelE.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.EventLevelE.INFO, result[0]);
    }
    
    public void testFAN_LEVEL_EGetValue() throws Throwable {
        int result = EnumDefine.FAN_LEVEL_E.NORMAL.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testFAN_LEVEL_EGetValue1() throws Throwable {
        int result = EnumDefine.FAN_LEVEL_E.LOW.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testFAN_LEVEL_EToString() throws Throwable {
        String result = EnumDefine.FAN_LEVEL_E.LOW.toString();
        assertEquals("result", "FAN_LEVEL_E.LOW", result);
    }
    
    public void testFAN_LEVEL_EValueOf() throws Throwable {
        EnumDefine.FAN_LEVEL_E result = EnumDefine.FAN_LEVEL_E.valueOf("LOW");
        assertEquals("result", EnumDefine.FAN_LEVEL_E.LOW, result);
    }
    
    public void testFAN_LEVEL_EValueOf1() throws Throwable {
        EnumDefine.FAN_LEVEL_E result = EnumDefine.FAN_LEVEL_E.valueOf(2);
        assertEquals("result", EnumDefine.FAN_LEVEL_E.HIGH, result);
    }
    
    public void testFAN_LEVEL_EValueOf2() throws Throwable {
        EnumDefine.FAN_LEVEL_E result = EnumDefine.FAN_LEVEL_E.valueOf(-2);
        assertEquals("result", EnumDefine.FAN_LEVEL_E.UNKNOWN, result);
    }
    
    public void testFAN_LEVEL_EValues() throws Throwable {
        EnumDefine.FAN_LEVEL_E[] result = EnumDefine.FAN_LEVEL_E.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.FAN_LEVEL_E.UNKNOWN, result[0]);
    }
    
    public void testFCPortModeEGetValue() throws Throwable {
        int result = EnumDefine.FCPortModeE.UNKNOWN.getValue();
        assertEquals("result", -1, result);
    }
    
    public void testFCPortModeEGetValue1() throws Throwable {
        int result = EnumDefine.FCPortModeE.FABRIC.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testFCPortModeEToString() throws Throwable {
        String result = EnumDefine.FCPortModeE.POINT2POINT.toString();
        assertEquals("result", "FCPortModeE.POINT2POINT", result);
    }
    
    public void testFCPortModeEValueOf() throws Throwable {
        EnumDefine.FCPortModeE result = EnumDefine.FCPortModeE.valueOf("POINT2POINT");
        assertEquals("result", EnumDefine.FCPortModeE.POINT2POINT, result);
    }
    
    public void testFCPortModeEValueOf1() throws Throwable {
        EnumDefine.FCPortModeE result = EnumDefine.FCPortModeE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testFCPortModeEValueOf2() throws Throwable {
        EnumDefine.FCPortModeE result = EnumDefine.FCPortModeE.valueOf(-2);
        assertNull("result", result);
    }
    
    public void testFCPortModeEValueOf3() throws Throwable {
        EnumDefine.FCPortModeE result = EnumDefine.FCPortModeE.valueOf(0);
        assertEquals("result", EnumDefine.FCPortModeE.FABRIC, result);
    }
    
    public void testFCPortModeEValues() throws Throwable {
        EnumDefine.FCPortModeE[] result = EnumDefine.FCPortModeE.values();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", EnumDefine.FCPortModeE.UNKNOWN, result[0]);
    }
    
    public void testHOSTGROUP_WORKMODE_EGetValue() throws Throwable {
        int result = EnumDefine.HOSTGROUP_WORKMODE_E.AAA.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testHOSTGROUP_WORKMODE_EGetValue1() throws Throwable {
        int result = EnumDefine.HOSTGROUP_WORKMODE_E.APF.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testHOSTGROUP_WORKMODE_EToString() throws Throwable {
        String result = EnumDefine.HOSTGROUP_WORKMODE_E.AAA.toString();
        assertEquals("result", "HOSTGROUP_WORKMODE_E.AAA", result);
    }
    
    public void testHOSTGROUP_WORKMODE_EValueOf() throws Throwable {
        EnumDefine.HOSTGROUP_WORKMODE_E result = EnumDefine.HOSTGROUP_WORKMODE_E.valueOf("AAA");
        assertEquals("result", EnumDefine.HOSTGROUP_WORKMODE_E.AAA, result);
    }
    
    public void testHOSTGROUP_WORKMODE_EValueOf1() throws Throwable {
        EnumDefine.HOSTGROUP_WORKMODE_E result = EnumDefine.HOSTGROUP_WORKMODE_E.valueOf(1);
        assertEquals("result", EnumDefine.HOSTGROUP_WORKMODE_E.AAA, result);
    }
    
    public void testHOSTGROUP_WORKMODE_EValueOf2() throws Throwable {
        EnumDefine.HOSTGROUP_WORKMODE_E result = EnumDefine.HOSTGROUP_WORKMODE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testHOSTGROUP_WORKMODE_EValueOf3() throws Throwable {
        EnumDefine.HOSTGROUP_WORKMODE_E result = EnumDefine.HOSTGROUP_WORKMODE_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testHOSTGROUP_WORKMODE_EValues() throws Throwable {
        EnumDefine.HOSTGROUP_WORKMODE_E[] result = EnumDefine.HOSTGROUP_WORKMODE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.HOSTGROUP_WORKMODE_E.APF, result[0]);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_ECompareEnum() throws Throwable {
        int result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.HIGH.compareEnum(EnumDefine.HOTSPARE_SPACE_STRATEGY_E.LOW);
        assertEquals("result", 0, result);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EGetValue() throws Throwable {
        int result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.NONE.getValue();
        assertEquals("result", 3, result);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EToString() throws Throwable {
        String result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.NONE.toString();
        assertEquals("result", "HOTSPARE_SPACE_STRATEGY_E.NONE", result);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EValueOf() throws Throwable {
        EnumDefine.HOTSPARE_SPACE_STRATEGY_E result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.valueOf("LOW");
        assertEquals("result", EnumDefine.HOTSPARE_SPACE_STRATEGY_E.LOW, result);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EValueOf1() throws Throwable {
        EnumDefine.HOTSPARE_SPACE_STRATEGY_E result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EValueOf2() throws Throwable {
        EnumDefine.HOTSPARE_SPACE_STRATEGY_E result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.valueOf(2);
        assertEquals("result", EnumDefine.HOTSPARE_SPACE_STRATEGY_E.HIGH, result);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EValueOf3() throws Throwable {
        EnumDefine.HOTSPARE_SPACE_STRATEGY_E result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EValues() throws Throwable {
        EnumDefine.HOTSPARE_SPACE_STRATEGY_E[] result = EnumDefine.HOTSPARE_SPACE_STRATEGY_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.HOTSPARE_SPACE_STRATEGY_E.LOW, result[0]);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.HYPERCLONE_LUN_STATUS_E.HYPERCLONE_LUN_STATUS_SYNCHRONIZED.getValue();
        assertEquals("result", 6, result);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EToString() throws Throwable {
        String result = EnumDefine.HYPERCLONE_LUN_STATUS_E.HYPERCLONE_LUN_STATUS_SYNCHRONIZED.toString();
        assertEquals("result", "HYPERCLONE_LUN_STATUS_E.HYPERCLONE_LUN_STATUS_SYNCHRONIZED", result);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValueOf() throws Throwable {
        EnumDefine.HYPERCLONE_LUN_STATUS_E result = EnumDefine.HYPERCLONE_LUN_STATUS_E.valueOf(1);
        assertEquals("result", EnumDefine.HYPERCLONE_LUN_STATUS_E.HYPERCLONE_LUN_STATUS_INCONSISTENT, result);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValueOf1() throws Throwable {
        EnumDefine.HYPERCLONE_LUN_STATUS_E result = EnumDefine.HYPERCLONE_LUN_STATUS_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValueOf2() throws Throwable {
        EnumDefine.HYPERCLONE_LUN_STATUS_E result = EnumDefine.HYPERCLONE_LUN_STATUS_E.valueOf(2);
        assertEquals("result", EnumDefine.HYPERCLONE_LUN_STATUS_E.HYPERCLONE_LUN_STATUS_REVINCONSISTENT, result);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValueOf3() throws Throwable {
        EnumDefine.HYPERCLONE_LUN_STATUS_E result = EnumDefine.HYPERCLONE_LUN_STATUS_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValueOf4() throws Throwable {
        EnumDefine.HYPERCLONE_LUN_STATUS_E result = EnumDefine.HYPERCLONE_LUN_STATUS_E.valueOf("HYPERCLONE_LUN_STATUS_REVSYNCHRONIZING");
        assertEquals("result", EnumDefine.HYPERCLONE_LUN_STATUS_E.HYPERCLONE_LUN_STATUS_REVSYNCHRONIZING, result);
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValues() throws Throwable {
        EnumDefine.HYPERCLONE_LUN_STATUS_E[] result = EnumDefine.HYPERCLONE_LUN_STATUS_E.values();
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", EnumDefine.HYPERCLONE_LUN_STATUS_E.HYPERCLONE_LUN_STATUS_INCONSISTENT, result[0]);
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.HYPERCLONE_PAIR_STATUS_E.HYPERCLONE_PAIR_STATUS_INTERRUPTED.getValue();
        assertEquals("result", 6, result);
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EToString() throws Throwable {
        String result = EnumDefine.HYPERCLONE_PAIR_STATUS_E.HYPERCLONE_PAIR_STATUS_REVSYNCHRONIZING.toString();
        assertEquals("result", "HYPERCLONE_PAIR_STATUS_E.HYPERCLONE_PAIR_STATUS_REVSYNCHRONIZING", result);
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EValueOf() throws Throwable {
        EnumDefine.HYPERCLONE_PAIR_STATUS_E result = EnumDefine.HYPERCLONE_PAIR_STATUS_E.valueOf("HYPERCLONE_PAIR_STATUS_SPLIT");
        assertEquals("result", EnumDefine.HYPERCLONE_PAIR_STATUS_E.HYPERCLONE_PAIR_STATUS_SPLIT, result);
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EValueOf1() throws Throwable {
        EnumDefine.HYPERCLONE_PAIR_STATUS_E result = EnumDefine.HYPERCLONE_PAIR_STATUS_E.valueOf(2);
        assertEquals("result", EnumDefine.HYPERCLONE_PAIR_STATUS_E.HYPERCLONE_PAIR_STATUS_SYNCHRONIZING, result);
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EValueOf2() throws Throwable {
        EnumDefine.HYPERCLONE_PAIR_STATUS_E result = EnumDefine.HYPERCLONE_PAIR_STATUS_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EValueOf3() throws Throwable {
        EnumDefine.HYPERCLONE_PAIR_STATUS_E result = EnumDefine.HYPERCLONE_PAIR_STATUS_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EValues() throws Throwable {
        EnumDefine.HYPERCLONE_PAIR_STATUS_E[] result = EnumDefine.HYPERCLONE_PAIR_STATUS_E.values();
        assertEquals("result.length", 8, result.length);
        assertEquals("result[0]", EnumDefine.HYPERCLONE_PAIR_STATUS_E.HYPERCLONE_PAIR_STATUS_SPLIT, result[0]);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_LOCAL.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EGetValue1() throws Throwable {
        int result = EnumDefine.HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_EXTS5000.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EToString() throws Throwable {
        String result = EnumDefine.HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_EXTS5000.toString();
        assertEquals("result", "HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_EXTS5000", result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValueOf() throws Throwable {
        EnumDefine.HYPERCOPY_LUN_TYPE_E result = EnumDefine.HYPERCOPY_LUN_TYPE_E.valueOf(0);
        assertEquals("result", EnumDefine.HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_LOCAL, result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValueOf1() throws Throwable {
        EnumDefine.HYPERCOPY_LUN_TYPE_E result = EnumDefine.HYPERCOPY_LUN_TYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_EXTS5000, result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValueOf2() throws Throwable {
        EnumDefine.HYPERCOPY_LUN_TYPE_E result = EnumDefine.HYPERCOPY_LUN_TYPE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValueOf3() throws Throwable {
        EnumDefine.HYPERCOPY_LUN_TYPE_E result = EnumDefine.HYPERCOPY_LUN_TYPE_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValueOf4() throws Throwable {
        EnumDefine.HYPERCOPY_LUN_TYPE_E result = EnumDefine.HYPERCOPY_LUN_TYPE_E.valueOf("HYPERCOPY_LUN_TYPE_LOCAL");
        assertEquals("result", EnumDefine.HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_LOCAL, result);
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValues() throws Throwable {
        EnumDefine.HYPERCOPY_LUN_TYPE_E[] result = EnumDefine.HYPERCOPY_LUN_TYPE_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.HYPERCOPY_LUN_TYPE_E.HYPERCOPY_LUN_TYPE_LOCAL, result[0]);
    }
    
    public void testHealthStatusEGetValue() throws Throwable {
        int result = EnumDefine.HealthStatusE.SINGLE_LINK_FAULT.getValue();
        assertEquals("result", 13, result);
    }
    
    public void testHealthStatusEGroup() throws Throwable {
        EnumDefine.STATE_GROUP_E result = EnumDefine.HealthStatusE.HAS_BAD_BLOCK.group();
        assertEquals("result", EnumDefine.STATE_GROUP_E.WARNING, result);
    }
    
    public void testHealthStatusEToString() throws Throwable {
        String result = EnumDefine.HealthStatusE.BUSY.toString();
        assertEquals("result", "HealthStatusE.BUSY", result);
    }
    
    public void testHealthStatusEValueOf() throws Throwable {
        EnumDefine.HealthStatusE result = EnumDefine.HealthStatusE.valueOf(-1);
        assertEquals("result", EnumDefine.HealthStatusE.UNKNOWN, result);
    }
    
    public void testHealthStatusEValueOf1() throws Throwable {
        EnumDefine.HealthStatusE result = EnumDefine.HealthStatusE.valueOf(1);
        assertEquals("result", EnumDefine.HealthStatusE.NORMAL, result);
    }
    
    public void testHealthStatusEValueOf2() throws Throwable {
        EnumDefine.HealthStatusE result = EnumDefine.HealthStatusE.valueOf("POWER_NOT_ENOUGH");
        assertEquals("result", EnumDefine.HealthStatusE.POWER_NOT_ENOUGH, result);
    }
    
    public void testHealthStatusEValues() throws Throwable {
        EnumDefine.HealthStatusE[] result = EnumDefine.HealthStatusE.values();
        assertEquals("result.length", 14, result.length);
        assertEquals("result[0]", EnumDefine.HealthStatusE.UNKNOWN, result[0]);
    }
    
    public void testIniOrTgtEGetValue() throws Throwable {
        int result = EnumDefine.IniOrTgtE.INI_AND_TGT.getValue();
        assertEquals("result", 4, result);
    }
    
    public void testIniOrTgtEToString() throws Throwable {
        String result = EnumDefine.IniOrTgtE.INI_AND_TGT.toString();
        assertEquals("result", "IniOrTgtE.INI_AND_TGT", result);
    }
    
    public void testIniOrTgtEValueOf() throws Throwable {
        EnumDefine.IniOrTgtE result = EnumDefine.IniOrTgtE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testIniOrTgtEValueOf1() throws Throwable {
        EnumDefine.IniOrTgtE result = EnumDefine.IniOrTgtE.valueOf(1);
        assertNull("result", result);
    }
    
    public void testIniOrTgtEValueOf2() throws Throwable {
        EnumDefine.IniOrTgtE result = EnumDefine.IniOrTgtE.valueOf(2);
        assertEquals("result", EnumDefine.IniOrTgtE.INI, result);
    }
    
    public void testIniOrTgtEValues() throws Throwable {
        EnumDefine.IniOrTgtE[] result = EnumDefine.IniOrTgtE.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.IniOrTgtE.INI, result[0]);
    }
    
    public void testInitTierPolicyEGetValue() throws Throwable {
        int result = EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_CAPACITY.getValue();
        assertEquals("result", 3, result);
    }
    
    public void testInitTierPolicyEGetValue1() throws Throwable {
        int result = EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_AUTO.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testInitTierPolicyEToString() throws Throwable {
        String result = EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_CAPACITY.toString();
        assertEquals("result", "InitTierPolicyE.INIT_TIER_POLICY_CAPACITY", result);
    }
    
    public void testInitTierPolicyEValueOf() throws Throwable {
        EnumDefine.InitTierPolicyE result = EnumDefine.InitTierPolicyE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testInitTierPolicyEValueOf1() throws Throwable {
        EnumDefine.InitTierPolicyE result = EnumDefine.InitTierPolicyE.valueOf(1);
        assertEquals("result", EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_EXTREME_PERFORMANCE, result);
    }
    
    public void testInitTierPolicyEValueOf2() throws Throwable {
        EnumDefine.InitTierPolicyE result = EnumDefine.InitTierPolicyE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testInitTierPolicyEValueOf3() throws Throwable {
        EnumDefine.InitTierPolicyE result = EnumDefine.InitTierPolicyE.valueOf("INIT_TIER_POLICY_PERFORMANCE");
        assertEquals("result", EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_PERFORMANCE, result);
    }
    
    public void testInitTierPolicyEValues() throws Throwable {
        EnumDefine.InitTierPolicyE[] result = EnumDefine.InitTierPolicyE.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_AUTO, result[0]);
    }
    
    public void testLINK_CONNECT_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.LINK_CONNECT_STATUS_E.LINK_CONNECT_STATUS_CONNECTED.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testLINK_CONNECT_STATUS_EToString() throws Throwable {
        String result = EnumDefine.LINK_CONNECT_STATUS_E.LINK_CONNECT_STATUS_UNCONNECTED.toString();
        assertEquals("result", "LINK_CONNECT_STATUS_E.LINK_CONNECT_STATUS_UNCONNECTED", result);
    }
    
    public void testLINK_CONNECT_STATUS_EValueOf() throws Throwable {
        EnumDefine.LINK_CONNECT_STATUS_E result = EnumDefine.LINK_CONNECT_STATUS_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testLINK_CONNECT_STATUS_EValueOf1() throws Throwable {
        EnumDefine.LINK_CONNECT_STATUS_E result = EnumDefine.LINK_CONNECT_STATUS_E.valueOf(1);
        assertEquals("result", EnumDefine.LINK_CONNECT_STATUS_E.LINK_CONNECT_STATUS_CONNECTED, result);
    }
    
    public void testLINK_CONNECT_STATUS_EValueOf2() throws Throwable {
        EnumDefine.LINK_CONNECT_STATUS_E result = EnumDefine.LINK_CONNECT_STATUS_E.valueOf(2);
        assertEquals("result", EnumDefine.LINK_CONNECT_STATUS_E.LINK_CONNECT_STATUS_UNCONNECTED, result);
    }
    
    public void testLINK_CONNECT_STATUS_EValueOf3() throws Throwable {
        EnumDefine.LINK_CONNECT_STATUS_E result = EnumDefine.LINK_CONNECT_STATUS_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testLINK_CONNECT_STATUS_EValueOf4() throws Throwable {
        EnumDefine.LINK_CONNECT_STATUS_E result = EnumDefine.LINK_CONNECT_STATUS_E.valueOf("LINK_CONNECT_STATUS_CONNECTED");
        assertEquals("result", EnumDefine.LINK_CONNECT_STATUS_E.LINK_CONNECT_STATUS_CONNECTED, result);
    }
    
    public void testLINK_CONNECT_STATUS_EValues() throws Throwable {
        EnumDefine.LINK_CONNECT_STATUS_E[] result = EnumDefine.LINK_CONNECT_STATUS_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.LINK_CONNECT_STATUS_E.LINK_CONNECT_STATUS_CONNECTED, result[0]);
    }
    
    public void testLINK_CONNECT_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.LINK_CONNECT_TYPE_E.LINK_CONNECT_TYPE_PARALLEL.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testLINK_CONNECT_TYPE_EToString() throws Throwable {
        String result = EnumDefine.LINK_CONNECT_TYPE_E.LINK_CONNECT_TYPE_PARALLEL.toString();
        assertEquals("result", "LINK_CONNECT_TYPE_E.LINK_CONNECT_TYPE_PARALLEL", result);
    }
    
    public void testLINK_CONNECT_TYPE_EValueOf() throws Throwable {
        EnumDefine.LINK_CONNECT_TYPE_E result = EnumDefine.LINK_CONNECT_TYPE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testLINK_CONNECT_TYPE_EValueOf1() throws Throwable {
        EnumDefine.LINK_CONNECT_TYPE_E result = EnumDefine.LINK_CONNECT_TYPE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testLINK_CONNECT_TYPE_EValueOf2() throws Throwable {
        EnumDefine.LINK_CONNECT_TYPE_E result = EnumDefine.LINK_CONNECT_TYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.LINK_CONNECT_TYPE_E.LINK_CONNECT_TYPE_PARALLEL, result);
    }
    
    public void testLINK_CONNECT_TYPE_EValueOf3() throws Throwable {
        EnumDefine.LINK_CONNECT_TYPE_E result = EnumDefine.LINK_CONNECT_TYPE_E.valueOf(3);
        assertNull("result", result);
    }
    
    public void testLINK_CONNECT_TYPE_EValueOf4() throws Throwable {
        EnumDefine.LINK_CONNECT_TYPE_E result = EnumDefine.LINK_CONNECT_TYPE_E.valueOf("LINK_CONNECT_TYPE_PARALLEL");
        assertEquals("result", EnumDefine.LINK_CONNECT_TYPE_E.LINK_CONNECT_TYPE_PARALLEL, result);
    }
    
    public void testLINK_CONNECT_TYPE_EValues() throws Throwable {
        EnumDefine.LINK_CONNECT_TYPE_E[] result = EnumDefine.LINK_CONNECT_TYPE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.LINK_CONNECT_TYPE_E.LINK_CONNECT_TYPE_PARALLEL, result[0]);
    }
    
    public void testLOG_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.LOG_TYPE_E.LOG_FAIL.getValue();
        assertEquals("result", 4, result);
    }
    
    public void testLOG_TYPE_EGetValue1() throws Throwable {
        int result = EnumDefine.LOG_TYPE_E.LOG_INFO.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testLOG_TYPE_EToString() throws Throwable {
        String result = EnumDefine.LOG_TYPE_E.LOG_DEBUG.toString();
        assertEquals("result", "LOG_TYPE_E.LOG_DEBUG", result);
    }
    
    public void testLOG_TYPE_EValueOf() throws Throwable {
        EnumDefine.LOG_TYPE_E result = EnumDefine.LOG_TYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.LOG_TYPE_E.LOG_ERROR, result);
    }
    
    public void testLOG_TYPE_EValueOf1() throws Throwable {
        EnumDefine.LOG_TYPE_E result = EnumDefine.LOG_TYPE_E.valueOf(3);
        assertNull("result", result);
    }
    
    public void testLOG_TYPE_EValueOf2() throws Throwable {
        EnumDefine.LOG_TYPE_E result = EnumDefine.LOG_TYPE_E.valueOf("LOG_INFO");
        assertEquals("result", EnumDefine.LOG_TYPE_E.LOG_INFO, result);
    }
    
    public void testLOG_TYPE_EValues() throws Throwable {
        EnumDefine.LOG_TYPE_E[] result = EnumDefine.LOG_TYPE_E.values();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", EnumDefine.LOG_TYPE_E.LOG_INFO, result[0]);
    }
    
    public void testLUNAllocTypeEGetValue() throws Throwable {
        int result = EnumDefine.LUNAllocTypeE.THIN.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testLUNAllocTypeEGetValue1() throws Throwable {
        int result = EnumDefine.LUNAllocTypeE.THICK.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testLUNAllocTypeEToString() throws Throwable {
        String result = EnumDefine.LUNAllocTypeE.THIN.toString();
        assertEquals("result", "LUNAllocTypeE.THIN", result);
    }
    
    public void testLUNAllocTypeEValueOf() throws Throwable {
        EnumDefine.LUNAllocTypeE result = EnumDefine.LUNAllocTypeE.valueOf(1);
        assertEquals("result", EnumDefine.LUNAllocTypeE.THIN, result);
    }
    
    public void testLUNAllocTypeEValueOf1() throws Throwable {
        EnumDefine.LUNAllocTypeE result = EnumDefine.LUNAllocTypeE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testLUNAllocTypeEValueOf2() throws Throwable {
        EnumDefine.LUNAllocTypeE result = EnumDefine.LUNAllocTypeE.valueOf("THIN");
        assertEquals("result", EnumDefine.LUNAllocTypeE.THIN, result);
    }
    
    public void testLUNAllocTypeEValues() throws Throwable {
        EnumDefine.LUNAllocTypeE[] result = EnumDefine.LUNAllocTypeE.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.LUNAllocTypeE.THICK, result[0]);
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.LUNCOPY_DEVICE_TYPE_E.HAWEI_DEVICE.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EToString() throws Throwable {
        String result = EnumDefine.LUNCOPY_DEVICE_TYPE_E.HAWEI_DEVICE.toString();
        assertEquals("result", "LUNCOPY_DEVICE_TYPE_E.HAWEI_DEVICE", result);
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EValueOf() throws Throwable {
        EnumDefine.LUNCOPY_DEVICE_TYPE_E result = EnumDefine.LUNCOPY_DEVICE_TYPE_E.valueOf("HAWEI_DEVICE");
        assertEquals("result", EnumDefine.LUNCOPY_DEVICE_TYPE_E.HAWEI_DEVICE, result);
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EValueOf1() throws Throwable {
        EnumDefine.LUNCOPY_DEVICE_TYPE_E result = EnumDefine.LUNCOPY_DEVICE_TYPE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EValueOf2() throws Throwable {
        EnumDefine.LUNCOPY_DEVICE_TYPE_E result = EnumDefine.LUNCOPY_DEVICE_TYPE_E.valueOf(2);
        assertEquals("result", EnumDefine.LUNCOPY_DEVICE_TYPE_E.OTHER_DEVICE, result);
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EValueOf3() throws Throwable {
        EnumDefine.LUNCOPY_DEVICE_TYPE_E result = EnumDefine.LUNCOPY_DEVICE_TYPE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EValues() throws Throwable {
        EnumDefine.LUNCOPY_DEVICE_TYPE_E[] result = EnumDefine.LUNCOPY_DEVICE_TYPE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.LUNCOPY_DEVICE_TYPE_E.HAWEI_DEVICE, result[0]);
    }
    
    public void testLUN_PRIORITY_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.LUN_PRIORITY_TYPE_E.LOW.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testLUN_PRIORITY_TYPE_EToString() throws Throwable {
        String result = EnumDefine.LUN_PRIORITY_TYPE_E.HIGHT.toString();
        assertEquals("result", "LUN_PRIORITY_TYPE_E.HIGHT", result);
    }
    
    public void testLUN_PRIORITY_TYPE_EValueOf() throws Throwable {
        EnumDefine.LUN_PRIORITY_TYPE_E result = EnumDefine.LUN_PRIORITY_TYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.LUN_PRIORITY_TYPE_E.LOW, result);
    }
    
    public void testLUN_PRIORITY_TYPE_EValueOf1() throws Throwable {
        EnumDefine.LUN_PRIORITY_TYPE_E result = EnumDefine.LUN_PRIORITY_TYPE_E.valueOf(2);
        assertEquals("result", EnumDefine.LUN_PRIORITY_TYPE_E.MIDDLE, result);
    }
    
    public void testLUN_PRIORITY_TYPE_EValueOf2() throws Throwable {
        EnumDefine.LUN_PRIORITY_TYPE_E result = EnumDefine.LUN_PRIORITY_TYPE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testLUN_PRIORITY_TYPE_EValueOf3() throws Throwable {
        EnumDefine.LUN_PRIORITY_TYPE_E result = EnumDefine.LUN_PRIORITY_TYPE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testLUN_PRIORITY_TYPE_EValueOf4() throws Throwable {
        EnumDefine.LUN_PRIORITY_TYPE_E result = EnumDefine.LUN_PRIORITY_TYPE_E.valueOf("LOW");
        assertEquals("result", EnumDefine.LUN_PRIORITY_TYPE_E.LOW, result);
    }
    
    public void testLUN_PRIORITY_TYPE_EValues() throws Throwable {
        EnumDefine.LUN_PRIORITY_TYPE_E[] result = EnumDefine.LUN_PRIORITY_TYPE_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.LUN_PRIORITY_TYPE_E.LOW, result[0]);
    }
    
    public void testLUN_RELATION_EGetValue() throws Throwable {
        int result = EnumDefine.LUN_RELATION_E.LUN_RELATION_MASTER.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testLUN_RELATION_EToString() throws Throwable {
        String result = EnumDefine.LUN_RELATION_E.LUN_RELATION_MASTER.toString();
        assertEquals("result", "LUN_RELATION_E.LUN_RELATION_MASTER", result);
    }
    
    public void testLUN_RELATION_EValueOf() throws Throwable {
        EnumDefine.LUN_RELATION_E result = EnumDefine.LUN_RELATION_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testLUN_RELATION_EValueOf1() throws Throwable {
        EnumDefine.LUN_RELATION_E result = EnumDefine.LUN_RELATION_E.valueOf(2);
        assertEquals("result", EnumDefine.LUN_RELATION_E.LUN_RELATION_SLAVE, result);
    }
    
    public void testLUN_RELATION_EValueOf2() throws Throwable {
        EnumDefine.LUN_RELATION_E result = EnumDefine.LUN_RELATION_E.valueOf("LUN_RELATION_MASTER");
        assertEquals("result", EnumDefine.LUN_RELATION_E.LUN_RELATION_MASTER, result);
    }
    
    public void testLUN_RELATION_EValues() throws Throwable {
        EnumDefine.LUN_RELATION_E[] result = EnumDefine.LUN_RELATION_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.LUN_RELATION_E.LUN_RELATION_MASTER, result[0]);
    }
    
    public void testLdapTransferEGetValue() throws Throwable {
        int result = EnumDefine.LdapTransferE.LDAP.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testLdapTransferEToString() throws Throwable {
        String result = EnumDefine.LdapTransferE.LDAP.toString();
        assertEquals("result", "LdapTransferE.LDAP", result);
    }
    
    public void testLdapTransferEValueOf() throws Throwable {
        EnumDefine.LdapTransferE result = EnumDefine.LdapTransferE.valueOf("LDAP");
        assertEquals("result", EnumDefine.LdapTransferE.LDAP, result);
    }
    
    public void testLdapTransferEValueOf1() throws Throwable {
        EnumDefine.LdapTransferE result = EnumDefine.LdapTransferE.valueOf(0);
        assertNull("result", result);
    }
    
    public void testLdapTransferEValueOf2() throws Throwable {
        EnumDefine.LdapTransferE result = EnumDefine.LdapTransferE.valueOf(2);
        assertEquals("result", EnumDefine.LdapTransferE.LDAPS, result);
    }
    
    public void testLdapTransferEValues() throws Throwable {
        EnumDefine.LdapTransferE[] result = EnumDefine.LdapTransferE.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.LdapTransferE.LDAP, result[0]);
    }
    
    public void testMIGRATION_MODE_EGetValue() throws Throwable {
        int result = EnumDefine.MIGRATION_MODE_E.MANUAL.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testMIGRATION_MODE_EToString() throws Throwable {
        String result = EnumDefine.MIGRATION_MODE_E.AUTO.toString();
        assertEquals("result", "MIGRATION_MODE_E.AUTO", result);
    }
    
    public void testMIGRATION_MODE_EValueOf() throws Throwable {
        EnumDefine.MIGRATION_MODE_E result = EnumDefine.MIGRATION_MODE_E.valueOf(1);
        assertEquals("result", EnumDefine.MIGRATION_MODE_E.AUTO, result);
    }
    
    public void testMIGRATION_MODE_EValueOf1() throws Throwable {
        EnumDefine.MIGRATION_MODE_E result = EnumDefine.MIGRATION_MODE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testMIGRATION_MODE_EValueOf2() throws Throwable {
        EnumDefine.MIGRATION_MODE_E result = EnumDefine.MIGRATION_MODE_E.valueOf(2);
        assertEquals("result", EnumDefine.MIGRATION_MODE_E.MANUAL, result);
    }
    
    public void testMIGRATION_MODE_EValueOf3() throws Throwable {
        EnumDefine.MIGRATION_MODE_E result = EnumDefine.MIGRATION_MODE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testMIGRATION_MODE_EValueOf4() throws Throwable {
        EnumDefine.MIGRATION_MODE_E result = EnumDefine.MIGRATION_MODE_E.valueOf("MANUAL");
        assertEquals("result", EnumDefine.MIGRATION_MODE_E.MANUAL, result);
    }
    
    public void testMIGRATION_MODE_EValues() throws Throwable {
        EnumDefine.MIGRATION_MODE_E[] result = EnumDefine.MIGRATION_MODE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.MIGRATION_MODE_E.AUTO, result[0]);
    }
    
    public void testMULTIPATH_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.MULTIPATH_TYPE_E.ALUA.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testMULTIPATH_TYPE_EGetValue1() throws Throwable {
        int result = EnumDefine.MULTIPATH_TYPE_E.DEFAULT.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testMULTIPATH_TYPE_EToString() throws Throwable {
        String result = EnumDefine.MULTIPATH_TYPE_E.DEFAULT.toString();
        assertEquals("result", "MULTIPATH_TYPE_E.DEFAULT", result);
    }
    
    public void testMULTIPATH_TYPE_EValueOf() throws Throwable {
        EnumDefine.MULTIPATH_TYPE_E result = EnumDefine.MULTIPATH_TYPE_E.valueOf(2);
        assertNull("result", result);
    }
    
    public void testMULTIPATH_TYPE_EValueOf1() throws Throwable {
        EnumDefine.MULTIPATH_TYPE_E result = EnumDefine.MULTIPATH_TYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.MULTIPATH_TYPE_E.ALUA, result);
    }
    
    public void testMULTIPATH_TYPE_EValueOf2() throws Throwable {
        EnumDefine.MULTIPATH_TYPE_E result = EnumDefine.MULTIPATH_TYPE_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testMULTIPATH_TYPE_EValueOf3() throws Throwable {
        EnumDefine.MULTIPATH_TYPE_E result = EnumDefine.MULTIPATH_TYPE_E.valueOf("ALUA");
        assertEquals("result", EnumDefine.MULTIPATH_TYPE_E.ALUA, result);
    }
    
    public void testMULTIPATH_TYPE_EValues() throws Throwable {
        EnumDefine.MULTIPATH_TYPE_E[] result = EnumDefine.MULTIPATH_TYPE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.MULTIPATH_TYPE_E.DEFAULT, result[0]);
    }
    
    public void testMigrateLUNPolicyEGetValue() throws Throwable {
        int result = EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_AUTO.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testMigrateLUNPolicyEGetValue1() throws Throwable {
        int result = EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_NONE.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testMigrateLUNPolicyEToString() throws Throwable {
        String result = EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_HIGHEST.toString();
        assertEquals("result", "MigrateLUNPolicyE.MIGRATE_LUN_POLICY_HIGHEST", result);
    }
    
    public void testMigrateLUNPolicyEValueOf() throws Throwable {
        EnumDefine.MigrateLUNPolicyE result = EnumDefine.MigrateLUNPolicyE.valueOf("MIGRATE_LUN_POLICY_HIGHEST");
        assertEquals("result", EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_HIGHEST, result);
    }
    
    public void testMigrateLUNPolicyEValueOf1() throws Throwable {
        EnumDefine.MigrateLUNPolicyE result = EnumDefine.MigrateLUNPolicyE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testMigrateLUNPolicyEValueOf2() throws Throwable {
        EnumDefine.MigrateLUNPolicyE result = EnumDefine.MigrateLUNPolicyE.valueOf(0);
        assertEquals("result", EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_NONE, result);
    }
    
    public void testMigrateLUNPolicyEValueOf3() throws Throwable {
        EnumDefine.MigrateLUNPolicyE result = EnumDefine.MigrateLUNPolicyE.valueOf(1);
        assertEquals("result", EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_AUTO, result);
    }
    
    public void testMigrateLUNPolicyEValues() throws Throwable {
        EnumDefine.MigrateLUNPolicyE[] result = EnumDefine.MigrateLUNPolicyE.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_NONE, result[0]);
    }
    
    public void testOSTypeEGetValue() throws Throwable {
        int result = EnumDefine.OSTypeE.ESX.getValue();
        assertEquals("result", 7, result);
    }
    
    public void testOSTypeEGetValue1() throws Throwable {
        int result = EnumDefine.OSTypeE.Linux.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testOSTypeEToString() throws Throwable {
        String result = EnumDefine.OSTypeE.MacOS.toString();
        assertEquals("result", "OSTypeE.MacOS", result);
    }
    
    public void testOSTypeEValueOf() throws Throwable {
        EnumDefine.OSTypeE result = EnumDefine.OSTypeE.valueOf(0);
        assertEquals("result", EnumDefine.OSTypeE.Linux, result);
    }
    
    public void testOSTypeEValueOf1() throws Throwable {
        EnumDefine.OSTypeE result = EnumDefine.OSTypeE.valueOf(1);
        assertEquals("result", EnumDefine.OSTypeE.Windows, result);
    }
    
    public void testOSTypeEValueOf2() throws Throwable {
        EnumDefine.OSTypeE result = EnumDefine.OSTypeE.valueOf(8);
        assertEquals("result", EnumDefine.OSTypeE.Linux, result);
    }
    
    public void testOSTypeEValueOf3() throws Throwable {
        EnumDefine.OSTypeE result = EnumDefine.OSTypeE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testOSTypeEValueOf4() throws Throwable {
        EnumDefine.OSTypeE result = EnumDefine.OSTypeE.valueOf("Windows");
        assertEquals("result", EnumDefine.OSTypeE.Windows, result);
    }
    
    public void testOSTypeEValues() throws Throwable {
        EnumDefine.OSTypeE[] result = EnumDefine.OSTypeE.values();
        assertEquals("result.length", 9, result.length);
        assertEquals("result[0]", EnumDefine.OSTypeE.Linux, result[0]);
    }
    
    public void testPORT_SFP_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.PORT_SFP_STATUS_E.OFFLINE.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testPORT_SFP_STATUS_EToString() throws Throwable {
        String result = EnumDefine.PORT_SFP_STATUS_E.OFFLINE.toString();
        assertEquals("result", "PORT_SFP_STATUS_E.OFFLINE", result);
    }
    
    public void testPORT_SFP_STATUS_EValueOf() throws Throwable {
        EnumDefine.PORT_SFP_STATUS_E result = EnumDefine.PORT_SFP_STATUS_E.valueOf("ONLINE");
        assertEquals("result", EnumDefine.PORT_SFP_STATUS_E.ONLINE, result);
    }
    
    public void testPORT_SFP_STATUS_EValueOf1() throws Throwable {
        EnumDefine.PORT_SFP_STATUS_E result = EnumDefine.PORT_SFP_STATUS_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testPORT_SFP_STATUS_EValueOf2() throws Throwable {
        EnumDefine.PORT_SFP_STATUS_E result = EnumDefine.PORT_SFP_STATUS_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testPORT_SFP_STATUS_EValueOf3() throws Throwable {
        EnumDefine.PORT_SFP_STATUS_E result = EnumDefine.PORT_SFP_STATUS_E.valueOf(2);
        assertEquals("result", EnumDefine.PORT_SFP_STATUS_E.ONLINE, result);
    }
    
    public void testPORT_SFP_STATUS_EValues() throws Throwable {
        EnumDefine.PORT_SFP_STATUS_E[] result = EnumDefine.PORT_SFP_STATUS_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.PORT_SFP_STATUS_E.NO_NEED, result[0]);
    }
    
    public void testPREDICTION_SWITCH_EGetValue() throws Throwable {
        int result = EnumDefine.PREDICTION_SWITCH_E.ON.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testPREDICTION_SWITCH_EToString() throws Throwable {
        String result = EnumDefine.PREDICTION_SWITCH_E.OFF.toString();
        assertEquals("result", "PREDICTION_SWITCH_E.OFF", result);
    }
    
    public void testPREDICTION_SWITCH_EValueOf() throws Throwable {
        EnumDefine.PREDICTION_SWITCH_E result = EnumDefine.PREDICTION_SWITCH_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testPREDICTION_SWITCH_EValueOf1() throws Throwable {
        EnumDefine.PREDICTION_SWITCH_E result = EnumDefine.PREDICTION_SWITCH_E.valueOf(1);
        assertEquals("result", EnumDefine.PREDICTION_SWITCH_E.ON, result);
    }
    
    public void testPREDICTION_SWITCH_EValueOf2() throws Throwable {
        EnumDefine.PREDICTION_SWITCH_E result = EnumDefine.PREDICTION_SWITCH_E.valueOf(2);
        assertEquals("result", EnumDefine.PREDICTION_SWITCH_E.OFF, result);
    }
    
    public void testPREDICTION_SWITCH_EValueOf3() throws Throwable {
        EnumDefine.PREDICTION_SWITCH_E result = EnumDefine.PREDICTION_SWITCH_E.valueOf("OFF");
        assertEquals("result", EnumDefine.PREDICTION_SWITCH_E.OFF, result);
    }
    
    public void testPREDICTION_SWITCH_EValues() throws Throwable {
        EnumDefine.PREDICTION_SWITCH_E[] result = EnumDefine.PREDICTION_SWITCH_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.PREDICTION_SWITCH_E.ON, result[0]);
    }
    
    public void testPasswordHashEGetValue() throws Throwable {
        int result = EnumDefine.PasswordHashE.CLEAR.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testPasswordHashEToString() throws Throwable {
        String result = EnumDefine.PasswordHashE.MD5.toString();
        assertEquals("result", "PasswordHashE.MD5", result);
    }
    
    public void testPasswordHashEValueOf() throws Throwable {
        EnumDefine.PasswordHashE result = EnumDefine.PasswordHashE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testPasswordHashEValueOf1() throws Throwable {
        EnumDefine.PasswordHashE result = EnumDefine.PasswordHashE.valueOf(0);
        assertNull("result", result);
    }
    
    public void testPasswordHashEValueOf2() throws Throwable {
        EnumDefine.PasswordHashE result = EnumDefine.PasswordHashE.valueOf(1);
        assertEquals("result", EnumDefine.PasswordHashE.CLEAR, result);
    }
    
    public void testPasswordHashEValueOf3() throws Throwable {
        EnumDefine.PasswordHashE result = EnumDefine.PasswordHashE.valueOf(2);
        assertEquals("result", EnumDefine.PasswordHashE.MD5, result);
    }
    
    public void testPasswordHashEValueOf4() throws Throwable {
        EnumDefine.PasswordHashE result = EnumDefine.PasswordHashE.valueOf("MD5");
        assertEquals("result", EnumDefine.PasswordHashE.MD5, result);
    }
    
    public void testPasswordHashEValues() throws Throwable {
        EnumDefine.PasswordHashE[] result = EnumDefine.PasswordHashE.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.PasswordHashE.CLEAR, result[0]);
    }
    
    public void testPortLogicTypeEGetValue() throws Throwable {
        int result = EnumDefine.PortLogicTypeE.INNER.getValue();
        assertEquals("result", 3, result);
    }
    
    public void testPortLogicTypeEToString() throws Throwable {
        String result = EnumDefine.PortLogicTypeE.HOST.toString();
        assertEquals("result", "PortLogicTypeE.HOST", result);
    }
    
    public void testPortLogicTypeEValueOf() throws Throwable {
        EnumDefine.PortLogicTypeE result = EnumDefine.PortLogicTypeE.valueOf(0);
        assertEquals("result", EnumDefine.PortLogicTypeE.HOST, result);
    }
    
    public void testPortLogicTypeEValueOf1() throws Throwable {
        EnumDefine.PortLogicTypeE result = EnumDefine.PortLogicTypeE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testPortLogicTypeEValueOf2() throws Throwable {
        EnumDefine.PortLogicTypeE result = EnumDefine.PortLogicTypeE.valueOf(1);
        assertEquals("result", EnumDefine.PortLogicTypeE.EXP, result);
    }
    
    public void testPortLogicTypeEValueOf3() throws Throwable {
        EnumDefine.PortLogicTypeE result = EnumDefine.PortLogicTypeE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testPortLogicTypeEValueOf4() throws Throwable {
        EnumDefine.PortLogicTypeE result = EnumDefine.PortLogicTypeE.valueOf("EXP");
        assertEquals("result", EnumDefine.PortLogicTypeE.EXP, result);
    }
    
    public void testPortLogicTypeEValues() throws Throwable {
        EnumDefine.PortLogicTypeE[] result = EnumDefine.PortLogicTypeE.values();
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", EnumDefine.PortLogicTypeE.HOST, result[0]);
    }
    
    public void testPriorityEGetValue() throws Throwable {
        int result = EnumDefine.PriorityE.MIDDLE.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testPriorityEToString() throws Throwable {
        String result = EnumDefine.PriorityE.HIGH.toString();
        assertEquals("result", "PriorityE.HIGH", result);
    }
    
    public void testPriorityEValueOf() throws Throwable {
        EnumDefine.PriorityE result = EnumDefine.PriorityE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testPriorityEValueOf1() throws Throwable {
        EnumDefine.PriorityE result = EnumDefine.PriorityE.valueOf(0);
        assertNull("result", result);
    }
    
    public void testPriorityEValueOf2() throws Throwable {
        EnumDefine.PriorityE result = EnumDefine.PriorityE.valueOf(3);
        assertEquals("result", EnumDefine.PriorityE.HIGH, result);
    }
    
    public void testPriorityEValueOf3() throws Throwable {
        EnumDefine.PriorityE result = EnumDefine.PriorityE.valueOf("HIGH");
        assertEquals("result", EnumDefine.PriorityE.HIGH, result);
    }
    
    public void testPriorityEValues() throws Throwable {
        EnumDefine.PriorityE[] result = EnumDefine.PriorityE.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.PriorityE.LOW, result[0]);
    }
    
    public void testProductModeEGetValue() throws Throwable {
        int result = EnumDefine.ProductModeE.V1500.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testProductModeEGetValue1() throws Throwable {
        int result = EnumDefine.ProductModeE.V1600N.getValue();
        assertEquals("result", 27, result);
    }
    
    public void testProductModeEToString() throws Throwable {
        String result = EnumDefine.ProductModeE.S5600T.toString();
        assertEquals("result", "ProductModeE.S5600T", result);
    }
    
    public void testProductModeEValueOf() throws Throwable {
        EnumDefine.ProductModeE result = EnumDefine.ProductModeE.valueOf("N8000_R710");
        assertEquals("result", EnumDefine.ProductModeE.N8000_R710, result);
    }
    
    public void testProductModeEValueOf1() throws Throwable {
        EnumDefine.ProductModeE result = EnumDefine.ProductModeE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testProductModeEValueOf2() throws Throwable {
        EnumDefine.ProductModeE result = EnumDefine.ProductModeE.valueOf(0);
        assertEquals("result", EnumDefine.ProductModeE.V1500, result);
    }
    
    public void testProductModeEValueOf3() throws Throwable {
        EnumDefine.ProductModeE result = EnumDefine.ProductModeE.valueOf(1);
        assertEquals("result", EnumDefine.ProductModeE.V1800, result);
    }
    
    public void testProductModeEValues() throws Throwable {
        EnumDefine.ProductModeE[] result = EnumDefine.ProductModeE.values();
        assertEquals("result.length", 59, result.length);
        assertEquals("result[0]", EnumDefine.ProductModeE.V1500, result[0]);
    }
    
    public void testRM_LUN_MIRROR_STATE_EGetValue() throws Throwable {
        int result = EnumDefine.RM_LUN_MIRROR_STATE_E.RM_LUN_MIRROR_STATE_CONSISTENT.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testRM_LUN_MIRROR_STATE_EToString() throws Throwable {
        String result = EnumDefine.RM_LUN_MIRROR_STATE_E.RM_LUN_MIRROR_STATE_INIT_SYNCING.toString();
        assertEquals("result", "RM_LUN_MIRROR_STATE_E.RM_LUN_MIRROR_STATE_INIT_SYNCING", result);
    }
    
    public void testRM_LUN_MIRROR_STATE_EValueOf() throws Throwable {
        EnumDefine.RM_LUN_MIRROR_STATE_E result = EnumDefine.RM_LUN_MIRROR_STATE_E.valueOf("RM_LUN_MIRROR_STATE_CONSISTENT");
        assertEquals("result", EnumDefine.RM_LUN_MIRROR_STATE_E.RM_LUN_MIRROR_STATE_CONSISTENT, result);
    }
    
    public void testRM_LUN_MIRROR_STATE_EValueOf1() throws Throwable {
        EnumDefine.RM_LUN_MIRROR_STATE_E result = EnumDefine.RM_LUN_MIRROR_STATE_E.valueOf(1);
        assertEquals("result", EnumDefine.RM_LUN_MIRROR_STATE_E.RM_LUN_MIRROR_STATE_SYNCED, result);
    }
    
    public void testRM_LUN_MIRROR_STATE_EValueOf2() throws Throwable {
        EnumDefine.RM_LUN_MIRROR_STATE_E result = EnumDefine.RM_LUN_MIRROR_STATE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testRM_LUN_MIRROR_STATE_EValueOf3() throws Throwable {
        EnumDefine.RM_LUN_MIRROR_STATE_E result = EnumDefine.RM_LUN_MIRROR_STATE_E.valueOf(2);
        assertEquals("result", EnumDefine.RM_LUN_MIRROR_STATE_E.RM_LUN_MIRROR_STATE_CONSISTENT, result);
    }
    
    public void testRM_LUN_MIRROR_STATE_EValues() throws Throwable {
        EnumDefine.RM_LUN_MIRROR_STATE_E[] result = EnumDefine.RM_LUN_MIRROR_STATE_E.values();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", EnumDefine.RM_LUN_MIRROR_STATE_E.RM_LUN_MIRROR_STATE_SYNCED, result[0]);
    }
    
    public void testRM_PAIR_STATE_EGetValue() throws Throwable {
        int result = EnumDefine.RM_PAIR_STATE_E.RM_PAIR_STATE_NORMAL.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testRM_PAIR_STATE_EToString() throws Throwable {
        String result = EnumDefine.RM_PAIR_STATE_E.RM_PAIR_STATE_TO_BE_RECOVERD.toString();
        assertEquals("result", "RM_PAIR_STATE_E.RM_PAIR_STATE_TO_BE_RECOVERD", result);
    }
    
    public void testRM_PAIR_STATE_EValueOf() throws Throwable {
        EnumDefine.RM_PAIR_STATE_E result = EnumDefine.RM_PAIR_STATE_E.valueOf("RM_PAIR_STATE_INTERRUPTED");
        assertEquals("result", EnumDefine.RM_PAIR_STATE_E.RM_PAIR_STATE_INTERRUPTED, result);
    }
    
    public void testRM_PAIR_STATE_EValueOf1() throws Throwable {
        EnumDefine.RM_PAIR_STATE_E result = EnumDefine.RM_PAIR_STATE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testRM_PAIR_STATE_EValueOf2() throws Throwable {
        EnumDefine.RM_PAIR_STATE_E result = EnumDefine.RM_PAIR_STATE_E.valueOf(1);
        assertEquals("result", EnumDefine.RM_PAIR_STATE_E.RM_PAIR_STATE_NORMAL, result);
    }
    
    public void testRM_PAIR_STATE_EValueOf3() throws Throwable {
        EnumDefine.RM_PAIR_STATE_E result = EnumDefine.RM_PAIR_STATE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testRM_PAIR_STATE_EValueOf4() throws Throwable {
        EnumDefine.RM_PAIR_STATE_E result = EnumDefine.RM_PAIR_STATE_E.valueOf(2);
        assertEquals("result", EnumDefine.RM_PAIR_STATE_E.RM_PAIR_STATE_SYNCING, result);
    }
    
    public void testRM_PAIR_STATE_EValues() throws Throwable {
        EnumDefine.RM_PAIR_STATE_E[] result = EnumDefine.RM_PAIR_STATE_E.values();
        assertEquals("result.length", 6, result.length);
        assertEquals("result[0]", EnumDefine.RM_PAIR_STATE_E.RM_PAIR_STATE_NORMAL, result[0]);
    }
    
    public void testRM_UPDATE_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.RM_UPDATE_TYPE_E.UNKNOWN.getValue();
        assertEquals("result", -1, result);
    }
    
    public void testRM_UPDATE_TYPE_EToString() throws Throwable {
        String result = EnumDefine.RM_UPDATE_TYPE_E.RM_UPDATE_TYPE_MANUAL.toString();
        assertEquals("result", "RM_UPDATE_TYPE_E.RM_UPDATE_TYPE_MANUAL", result);
    }
    
    public void testRM_UPDATE_TYPE_EValueOf() throws Throwable {
        EnumDefine.RM_UPDATE_TYPE_E result = EnumDefine.RM_UPDATE_TYPE_E.valueOf(100);
        assertEquals("result", EnumDefine.RM_UPDATE_TYPE_E.UNKNOWN, result);
    }
    
    public void testRM_UPDATE_TYPE_EValueOf1() throws Throwable {
        EnumDefine.RM_UPDATE_TYPE_E result = EnumDefine.RM_UPDATE_TYPE_E.valueOf(-2);
        assertEquals("result", EnumDefine.RM_UPDATE_TYPE_E.UNKNOWN, result);
    }
    
    public void testRM_UPDATE_TYPE_EValueOf2() throws Throwable {
        EnumDefine.RM_UPDATE_TYPE_E result = EnumDefine.RM_UPDATE_TYPE_E.valueOf(-1);
        assertEquals("result", EnumDefine.RM_UPDATE_TYPE_E.UNKNOWN, result);
    }
    
    public void testRM_UPDATE_TYPE_EValueOf3() throws Throwable {
        EnumDefine.RM_UPDATE_TYPE_E result = EnumDefine.RM_UPDATE_TYPE_E.valueOf(0);
        assertEquals("result", EnumDefine.RM_UPDATE_TYPE_E.UNKNOWN, result);
    }
    
    public void testRM_UPDATE_TYPE_EValues() throws Throwable {
        EnumDefine.RM_UPDATE_TYPE_E[] result = EnumDefine.RM_UPDATE_TYPE_E.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.RM_UPDATE_TYPE_E.UNKNOWN, result[0]);
    }
    
    public void testRaidLevelEGetValue() throws Throwable {
        int result = EnumDefine.RaidLevelE.RAID_LEVEL_RAID3.getValue();
        assertEquals("result", 7, result);
    }
    
    public void testRaidLevelEToString() throws Throwable {
        String result = EnumDefine.RaidLevelE.RAID_LEVEL_RAID10.toString();
        assertEquals("result", "RaidLevelE.RAID_LEVEL_RAID10", result);
    }
    
    public void testRaidLevelEValueOf() throws Throwable {
        EnumDefine.RaidLevelE result = EnumDefine.RaidLevelE.valueOf(2);
        assertEquals("result", EnumDefine.RaidLevelE.RAID_LEVEL_RAID5, result);
    }
    
    public void testRaidLevelEValueOf1() throws Throwable {
        EnumDefine.RaidLevelE result = EnumDefine.RaidLevelE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testRaidLevelEValueOf2() throws Throwable {
        EnumDefine.RaidLevelE result = EnumDefine.RaidLevelE.valueOf(0);
        assertNull("result", result);
    }
    
    public void testRaidLevelEValueOf3() throws Throwable {
        EnumDefine.RaidLevelE result = EnumDefine.RaidLevelE.valueOf("RAID_LEVEL_RAID10");
        assertEquals("result", EnumDefine.RaidLevelE.RAID_LEVEL_RAID10, result);
    }
    
    public void testRaidLevelEValues() throws Throwable {
        EnumDefine.RaidLevelE[] result = EnumDefine.RaidLevelE.values();
        assertEquals("result.length", 7, result.length);
        assertEquals("result[0]", EnumDefine.RaidLevelE.RAID_LEVEL_RAID10, result[0]);
    }
    
    public void testRunningStatusEGetValue() throws Throwable {
        int result = EnumDefine.RunningStatusE.POWER_FAILURE_PROTECTING.getValue();
        assertEquals("result", 7, result);
    }
    
    public void testRunningStatusEGroup() throws Throwable {
        EnumDefine.STATE_GROUP_E result = EnumDefine.RunningStatusE.SYNCHRONIZED.group();
        assertEquals("result", EnumDefine.STATE_GROUP_E.NORMAL, result);
    }
    
    public void testRunningStatusEToString() throws Throwable {
        String result = EnumDefine.RunningStatusE.SLEEPING.toString();
        assertEquals("result", "RunningStatusE.SLEEPING", result);
    }
    
    public void testRunningStatusEValueOf() throws Throwable {
        EnumDefine.RunningStatusE result = EnumDefine.RunningStatusE.valueOf(-1);
        assertEquals("result", EnumDefine.RunningStatusE.UNKNOWN, result);
    }
    
    public void testRunningStatusEValueOf1() throws Throwable {
        EnumDefine.RunningStatusE result = EnumDefine.RunningStatusE.valueOf(0);
        assertEquals("result", EnumDefine.RunningStatusE.UNKNOWN, result);
    }
    
    public void testRunningStatusEValueOf2() throws Throwable {
        EnumDefine.RunningStatusE result = EnumDefine.RunningStatusE.valueOf(52);
        assertEquals("result", EnumDefine.RunningStatusE.UNKNOWN, result);
    }
    
    public void testRunningStatusEValueOf3() throws Throwable {
        EnumDefine.RunningStatusE result = EnumDefine.RunningStatusE.valueOf("ERASEMENT_RUNNING_SUCCESS");
        assertEquals("result", EnumDefine.RunningStatusE.ERASEMENT_RUNNING_SUCCESS, result);
    }
    
    public void testRunningStatusEValues() throws Throwable {
        EnumDefine.RunningStatusE[] result = EnumDefine.RunningStatusE.values();
        assertEquals("result.length", 55, result.length);
        assertEquals("result[0]", EnumDefine.RunningStatusE.UNKNOWN, result[0]);
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.SNAPSHOT_HEALTH_STATUS_E.SNAPSHOT_NORMAL.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EToString() throws Throwable {
        String result = EnumDefine.SNAPSHOT_HEALTH_STATUS_E.SNAPSHOT_FAULT.toString();
        assertEquals("result", "SNAPSHOT_HEALTH_STATUS_E.SNAPSHOT_FAULT", result);
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EValueOf() throws Throwable {
        EnumDefine.SNAPSHOT_HEALTH_STATUS_E result = EnumDefine.SNAPSHOT_HEALTH_STATUS_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EValueOf1() throws Throwable {
        EnumDefine.SNAPSHOT_HEALTH_STATUS_E result = EnumDefine.SNAPSHOT_HEALTH_STATUS_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EValueOf2() throws Throwable {
        EnumDefine.SNAPSHOT_HEALTH_STATUS_E result = EnumDefine.SNAPSHOT_HEALTH_STATUS_E.valueOf(1);
        assertEquals("result", EnumDefine.SNAPSHOT_HEALTH_STATUS_E.SNAPSHOT_NORMAL, result);
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EValueOf3() throws Throwable {
        EnumDefine.SNAPSHOT_HEALTH_STATUS_E result = EnumDefine.SNAPSHOT_HEALTH_STATUS_E.valueOf(2);
        assertEquals("result", EnumDefine.SNAPSHOT_HEALTH_STATUS_E.SNAPSHOT_FAULT, result);
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EValues() throws Throwable {
        EnumDefine.SNAPSHOT_HEALTH_STATUS_E[] result = EnumDefine.SNAPSHOT_HEALTH_STATUS_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.SNAPSHOT_HEALTH_STATUS_E.SNAPSHOT_NORMAL, result[0]);
    }
    
    public void testSNAPSHOT_STATUS_EGetValue() throws Throwable {
        int result = EnumDefine.SNAPSHOT_STATUS_E.SNAPSHOT_STATUS_ERROR.getValue();
        assertEquals("result", 4, result);
    }
    
    public void testSNAPSHOT_STATUS_EToString() throws Throwable {
        String result = EnumDefine.SNAPSHOT_STATUS_E.SNAPSHOT_STATUS_ACTIVE.toString();
        assertEquals("result", "SNAPSHOT_STATUS_E.SNAPSHOT_STATUS_ACTIVE", result);
    }
    
    public void testSNAPSHOT_STATUS_EValueOf() throws Throwable {
        EnumDefine.SNAPSHOT_STATUS_E result = EnumDefine.SNAPSHOT_STATUS_E.valueOf(1);
        assertEquals("result", EnumDefine.SNAPSHOT_STATUS_E.SNAPSHOT_STATUS_DISABLE, result);
    }
    
    public void testSNAPSHOT_STATUS_EValueOf1() throws Throwable {
        EnumDefine.SNAPSHOT_STATUS_E result = EnumDefine.SNAPSHOT_STATUS_E.valueOf(5);
        assertNull("result", result);
    }
    
    public void testSNAPSHOT_STATUS_EValueOf2() throws Throwable {
        EnumDefine.SNAPSHOT_STATUS_E result = EnumDefine.SNAPSHOT_STATUS_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testSNAPSHOT_STATUS_EValueOf3() throws Throwable {
        EnumDefine.SNAPSHOT_STATUS_E result = EnumDefine.SNAPSHOT_STATUS_E.valueOf("SNAPSHOT_STATUS_ERROR");
        assertEquals("result", EnumDefine.SNAPSHOT_STATUS_E.SNAPSHOT_STATUS_ERROR, result);
    }
    
    public void testSNAPSHOT_STATUS_EValues() throws Throwable {
        EnumDefine.SNAPSHOT_STATUS_E[] result = EnumDefine.SNAPSHOT_STATUS_E.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.SNAPSHOT_STATUS_E.SNAPSHOT_STATUS_DISABLE, result[0]);
    }
    
    public void testSNAP_BELONG_EGetValue() throws Throwable {
        int result = EnumDefine.SNAP_BELONG_E.PRIVATE.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testSNAP_BELONG_EToString() throws Throwable {
        String result = EnumDefine.SNAP_BELONG_E.PUBLIC.toString();
        assertEquals("result", "SNAP_BELONG_E.PUBLIC", result);
    }
    
    public void testSNAP_BELONG_EValueOf() throws Throwable {
        EnumDefine.SNAP_BELONG_E result = EnumDefine.SNAP_BELONG_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testSNAP_BELONG_EValueOf1() throws Throwable {
        EnumDefine.SNAP_BELONG_E result = EnumDefine.SNAP_BELONG_E.valueOf(2);
        assertEquals("result", EnumDefine.SNAP_BELONG_E.PRIVATE, result);
    }
    
    public void testSNAP_BELONG_EValueOf2() throws Throwable {
        EnumDefine.SNAP_BELONG_E result = EnumDefine.SNAP_BELONG_E.valueOf("PUBLIC");
        assertEquals("result", EnumDefine.SNAP_BELONG_E.PUBLIC, result);
    }
    
    public void testSNAP_BELONG_EValues() throws Throwable {
        EnumDefine.SNAP_BELONG_E[] result = EnumDefine.SNAP_BELONG_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.SNAP_BELONG_E.PUBLIC, result[0]);
    }
    
    public void testSNAP_SPEED_EGetValue() throws Throwable {
        int result = EnumDefine.SNAP_SPEED_E.SPEED_LEVEL_LOW.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testSNAP_SPEED_EToString() throws Throwable {
        String result = EnumDefine.SNAP_SPEED_E.SPEED_LEVEL_ASAP.toString();
        assertEquals("result", "SNAP_SPEED_E.SPEED_LEVEL_ASAP", result);
    }
    
    public void testSNAP_SPEED_EValueOf() throws Throwable {
        EnumDefine.SNAP_SPEED_E result = EnumDefine.SNAP_SPEED_E.valueOf("SPEED_LEVEL_MIDDLE");
        assertEquals("result", EnumDefine.SNAP_SPEED_E.SPEED_LEVEL_MIDDLE, result);
    }
    
    public void testSNAP_SPEED_EValueOf1() throws Throwable {
        EnumDefine.SNAP_SPEED_E result = EnumDefine.SNAP_SPEED_E.valueOf(2);
        assertEquals("result", EnumDefine.SNAP_SPEED_E.SPEED_LEVEL_MIDDLE, result);
    }
    
    public void testSNAP_SPEED_EValueOf2() throws Throwable {
        EnumDefine.SNAP_SPEED_E result = EnumDefine.SNAP_SPEED_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testSNAP_SPEED_EValues() throws Throwable {
        EnumDefine.SNAP_SPEED_E[] result = EnumDefine.SNAP_SPEED_E.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.SNAP_SPEED_E.SPEED_LEVEL_LOW, result[0]);
    }
    
    public void testSPEED_LEVEL_3_EGetValue() throws Throwable {
        int result = EnumDefine.SPEED_LEVEL_3_E.HIGH.getValue();
        assertEquals("result", 3, result);
    }
    
    public void testSPEED_LEVEL_3_EToString() throws Throwable {
        String result = EnumDefine.SPEED_LEVEL_3_E.MEDIUM.toString();
        assertEquals("result", "SPEED_LEVEL_3_E.MEDIUM", result);
    }
    
    public void testSPEED_LEVEL_3_EValueOf() throws Throwable {
        EnumDefine.SPEED_LEVEL_3_E result = EnumDefine.SPEED_LEVEL_3_E.valueOf("MEDIUM");
        assertEquals("result", EnumDefine.SPEED_LEVEL_3_E.MEDIUM, result);
    }
    
    public void testSPEED_LEVEL_3_EValueOf1() throws Throwable {
        EnumDefine.SPEED_LEVEL_3_E result = EnumDefine.SPEED_LEVEL_3_E.valueOf(2);
        assertEquals("result", EnumDefine.SPEED_LEVEL_3_E.MEDIUM, result);
    }
    
    public void testSPEED_LEVEL_3_EValueOf2() throws Throwable {
        EnumDefine.SPEED_LEVEL_3_E result = EnumDefine.SPEED_LEVEL_3_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testSPEED_LEVEL_3_EValues() throws Throwable {
        EnumDefine.SPEED_LEVEL_3_E[] result = EnumDefine.SPEED_LEVEL_3_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.SPEED_LEVEL_3_E.LOW, result[0]);
    }
    
    public void testSTATE_GROUP_EValueOf() throws Throwable {
        EnumDefine.STATE_GROUP_E result = EnumDefine.STATE_GROUP_E.valueOf("FAULT");
        assertEquals("result", EnumDefine.STATE_GROUP_E.FAULT, result);
    }
    
    public void testSTATE_GROUP_EValues() throws Throwable {
        EnumDefine.STATE_GROUP_E[] result = EnumDefine.STATE_GROUP_E.values();
        assertEquals("result.length", 4, result.length);
        assertEquals("result[0]", EnumDefine.STATE_GROUP_E.NORMAL, result[0]);
    }
    
    public void testSWITCH_EGetValue() throws Throwable {
        int result = EnumDefine.SWITCH_E.ON.getValue();
        assertEquals("result", 1, result);
    }
    
    public void testSWITCH_EToString() throws Throwable {
        String result = EnumDefine.SWITCH_E.ON.toString();
        assertEquals("result", "SWITCH_E.ON", result);
    }
    
    public void testSWITCH_EValueOf() throws Throwable {
        EnumDefine.SWITCH_E result = EnumDefine.SWITCH_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testSWITCH_EValueOf1() throws Throwable {
        EnumDefine.SWITCH_E result = EnumDefine.SWITCH_E.valueOf(1);
        assertEquals("result", EnumDefine.SWITCH_E.ON, result);
    }
    
    public void testSWITCH_EValueOf2() throws Throwable {
        EnumDefine.SWITCH_E result = EnumDefine.SWITCH_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testSWITCH_EValueOf3() throws Throwable {
        EnumDefine.SWITCH_E result = EnumDefine.SWITCH_E.valueOf(2);
        assertEquals("result", EnumDefine.SWITCH_E.OFF, result);
    }
    
    public void testSWITCH_EValueOf4() throws Throwable {
        EnumDefine.SWITCH_E result = EnumDefine.SWITCH_E.valueOf("OFF");
        assertEquals("result", EnumDefine.SWITCH_E.OFF, result);
    }
    
    public void testSWITCH_EValues() throws Throwable {
        EnumDefine.SWITCH_E[] result = EnumDefine.SWITCH_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.SWITCH_E.ON, result[0]);
    }
    
    public void testSYSTEM_ROLE_EGetValue() throws Throwable {
        int result = EnumDefine.SYSTEM_ROLE_E.SYSTEM_ROLE_NORMAL.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testSYSTEM_ROLE_EGetValue1() throws Throwable {
        int result = EnumDefine.SYSTEM_ROLE_E.SYSTEM_ROLE_SLAVE.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testSYSTEM_ROLE_EToString() throws Throwable {
        String result = EnumDefine.SYSTEM_ROLE_E.SYSTEM_ROLE_SLAVE.toString();
        assertEquals("result", "SYSTEM_ROLE_E.SYSTEM_ROLE_SLAVE", result);
    }
    
    public void testSYSTEM_ROLE_EValueOf() throws Throwable {
        EnumDefine.SYSTEM_ROLE_E result = EnumDefine.SYSTEM_ROLE_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testSYSTEM_ROLE_EValueOf1() throws Throwable {
        EnumDefine.SYSTEM_ROLE_E result = EnumDefine.SYSTEM_ROLE_E.valueOf(1);
        assertEquals("result", EnumDefine.SYSTEM_ROLE_E.SYSTEM_ROLE_MASTER, result);
    }
    
    public void testSYSTEM_ROLE_EValues() throws Throwable {
        EnumDefine.SYSTEM_ROLE_E[] result = EnumDefine.SYSTEM_ROLE_E.values();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", EnumDefine.SYSTEM_ROLE_E.SYSTEM_ROLE_NORMAL, result[0]);
    }
    
    public void testSpeedLevelEGetValue() throws Throwable {
        int result = EnumDefine.SpeedLevelE.SPEED_LEVEL_MIDDLE.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testSpeedLevelEToString() throws Throwable {
        String result = EnumDefine.SpeedLevelE.UNKNOWN.toString();
        assertEquals("result", "SpeedLevelE.UNKNOWN", result);
    }
    
    public void testSpeedLevelEValueOf() throws Throwable {
        EnumDefine.SpeedLevelE result = EnumDefine.SpeedLevelE.valueOf(5);
        assertEquals("result", EnumDefine.SpeedLevelE.UNKNOWN, result);
    }
    
    public void testSpeedLevelEValueOf1() throws Throwable {
        EnumDefine.SpeedLevelE result = EnumDefine.SpeedLevelE.valueOf(2);
        assertEquals("result", EnumDefine.SpeedLevelE.SPEED_LEVEL_MIDDLE, result);
    }
    
    public void testSpeedLevelEValueOf2() throws Throwable {
        EnumDefine.SpeedLevelE result = EnumDefine.SpeedLevelE.valueOf(-2);
        assertEquals("result", EnumDefine.SpeedLevelE.UNKNOWN, result);
    }
    
    public void testSpeedLevelEValueOf3() throws Throwable {
        EnumDefine.SpeedLevelE result = EnumDefine.SpeedLevelE.valueOf("UNKNOWN");
        assertEquals("result", EnumDefine.SpeedLevelE.UNKNOWN, result);
    }
    
    public void testSpeedLevelEValues() throws Throwable {
        EnumDefine.SpeedLevelE[] result = EnumDefine.SpeedLevelE.values();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", EnumDefine.SpeedLevelE.UNKNOWN, result[0]);
    }
    
    public void testStatisticDataIdGetValue() throws Throwable {
        long result = EnumDefine.StatisticDataId.WRITE_PERCT.getValue();
        assertEquals("result", 266L, result);
    }
    
    public void testStatisticDataIdValueOf() throws Throwable {
        EnumDefine.StatisticDataId result = EnumDefine.StatisticDataId.valueOf(0L);
        assertNull("result", result);
    }
    
    public void testStatisticDataIdValueOf1() throws Throwable {
        EnumDefine.StatisticDataId result = EnumDefine.StatisticDataId.valueOf(100L);
        assertEquals("result", EnumDefine.StatisticDataId.ASYNCDATA, result);
    }
    
    public void testStatisticDataIdValueOf2() throws Throwable {
        EnumDefine.StatisticDataId result = EnumDefine.StatisticDataId.valueOf("PORT_MBS_EC");
        assertEquals("result", EnumDefine.StatisticDataId.PORT_MBS_EC, result);
    }
    
    public void testStatisticDataIdValues() throws Throwable {
        EnumDefine.StatisticDataId[] result = EnumDefine.StatisticDataId.values();
        assertEquals("result.length", 335, result.length);
        assertEquals("result[0]", EnumDefine.StatisticDataId.TOTALIOCOUNT, result[0]);
    }
    
    public void testSysStatusEGetValue() throws Throwable {
        int result = EnumDefine.SysStatusE.UPGRADING.getValue();
        assertEquals("result", 5, result);
    }
    
    public void testSysStatusEToString() throws Throwable {
        String result = EnumDefine.SysStatusE.SAFE_MODE.toString();
        assertEquals("result", "SysStatusE.SAFE_MODE", result);
    }
    
    public void testSysStatusEValueOf() throws Throwable {
        EnumDefine.SysStatusE result = EnumDefine.SysStatusE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testSysStatusEValueOf1() throws Throwable {
        EnumDefine.SysStatusE result = EnumDefine.SysStatusE.valueOf(0);
        assertEquals("result", EnumDefine.SysStatusE.Normal, result);
    }
    
    public void testSysStatusEValueOf2() throws Throwable {
        EnumDefine.SysStatusE result = EnumDefine.SysStatusE.valueOf(-2);
        assertNull("result", result);
    }
    
    public void testSysStatusEValueOf3() throws Throwable {
        EnumDefine.SysStatusE result = EnumDefine.SysStatusE.valueOf("POWER_LOST");
        assertEquals("result", EnumDefine.SysStatusE.POWER_LOST, result);
    }
    
    public void testSysStatusEValues() throws Throwable {
        EnumDefine.SysStatusE[] result = EnumDefine.SysStatusE.values();
        assertEquals("result.length", 9, result.length);
        assertEquals("result[0]", EnumDefine.SysStatusE.Unknown, result[0]);
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.SATA_SSD_100G.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EToString() throws Throwable {
        String result = EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.SATA_SSD_100G.toString();
        assertEquals("result", "TIER0_ANALYSIS_DISK_TYPE_E.SATA_SSD_100G", result);
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EValueOf() throws Throwable {
        EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EValueOf1() throws Throwable {
        EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EValueOf2() throws Throwable {
        EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.valueOf(1);
        assertNull("result", result);
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EValueOf3() throws Throwable {
        EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.valueOf(0);
        assertEquals("result", EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.SATA_SSD_100G, result);
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EValues() throws Throwable {
        EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E[] result = EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.values();
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.SATA_SSD_100G, result[0]);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.SAS_600G_10K.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EToString() throws Throwable {
        String result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.SAS_300G_10K.toString();
        assertEquals("result", "TIER1_ANALYSIS_DISK_TYPE_E.SAS_300G_10K", result);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValueOf() throws Throwable {
        EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.valueOf(100);
        assertNull("result", result);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValueOf1() throws Throwable {
        EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.valueOf(1);
        assertEquals("result", EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.SAS_300G_10K, result);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValueOf2() throws Throwable {
        EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.valueOf(0);
        assertNull("result", result);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValueOf3() throws Throwable {
        EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.valueOf(2);
        assertEquals("result", EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.SAS_600G_10K, result);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValueOf4() throws Throwable {
        EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.valueOf("SAS_300G_10K");
        assertEquals("result", EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.SAS_300G_10K, result);
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValues() throws Throwable {
        EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E[] result = EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.SAS_300G_10K, result[0]);
    }
    
    public void testTIER2_ANALYSIS_DISK_TYPE_EGetValue() throws Throwable {
        int result = EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.NLSAS_2T_7200.getValue();
        assertEquals("result", 4, result);
    }
    
    public void testTIER2_ANALYSIS_DISK_TYPE_EToString() throws Throwable {
        String result = EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.NLSAS_2T_7200.toString();
        assertEquals("result", "TIER2_ANALYSIS_DISK_TYPE_E.NLSAS_2T_7200", result);
    }
    
    public void testTIER2_ANALYSIS_DISK_TYPE_EValueOf() throws Throwable {
        EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.valueOf("NLSAS_1T_7200");
        assertEquals("result", EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.NLSAS_1T_7200, result);
    }
    
    public void testTIER2_ANALYSIS_DISK_TYPE_EValueOf1() throws Throwable {
        EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E result = EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.valueOf(2);
        assertNull("result", result);
    }
    
    public void testTIER2_ANALYSIS_DISK_TYPE_EValues() throws Throwable {
        EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E[] result = EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.values();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.NLSAS_1T_7200, result[0]);
    }
    
    public void testWARNNING_TYPEGetValue() throws Throwable {
        int result = EnumDefine.WARNNING_TYPE.EVENT.getValue();
        assertEquals("result", 0, result);
    }
    
    public void testWARNNING_TYPEGetValue1() throws Throwable {
        int result = EnumDefine.WARNNING_TYPE.REVOCER.getValue();
        assertEquals("result", 2, result);
    }
    
    public void testWARNNING_TYPEToString() throws Throwable {
        String result = EnumDefine.WARNNING_TYPE.OPERATOR_LOG.toString();
        assertEquals("result", "WARNNING_TYPE.OPERATOR_LOG", result);
    }
    
    public void testWARNNING_TYPEValueOf() throws Throwable {
        EnumDefine.WARNNING_TYPE result = EnumDefine.WARNNING_TYPE.valueOf(100);
        assertNull("result", result);
    }
    
    public void testWARNNING_TYPEValueOf1() throws Throwable {
        EnumDefine.WARNNING_TYPE result = EnumDefine.WARNNING_TYPE.valueOf(1);
        assertEquals("result", EnumDefine.WARNNING_TYPE.FAULT, result);
    }
    
    public void testWARNNING_TYPEValueOf2() throws Throwable {
        EnumDefine.WARNNING_TYPE result = EnumDefine.WARNNING_TYPE.valueOf(-1);
        assertNull("result", result);
    }
    
    public void testWARNNING_TYPEValueOf3() throws Throwable {
        EnumDefine.WARNNING_TYPE result = EnumDefine.WARNNING_TYPE.valueOf("RUNNING");
        assertEquals("result", EnumDefine.WARNNING_TYPE.RUNNING, result);
    }
    
    public void testWARNNING_TYPEValues() throws Throwable {
        EnumDefine.WARNNING_TYPE[] result = EnumDefine.WARNNING_TYPE.values();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", EnumDefine.WARNNING_TYPE.EVENT, result[0]);
    }
    
    public void testANALYSIS_RAID_LEVEL_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.ANALYSIS_RAID_LEVEL_E.valueOf("testANALYSIS_RAID_LEVEL_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$ANALYSIS_RAID_LEVEL_E.testANALYSIS_RAID_LEVEL_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testANALYSIS_RAID_LEVEL_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.ANALYSIS_RAID_LEVEL_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testASSOCIATE_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.ASSOCIATE_TYPE_E.valueOf("testASSOCIATE_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$ASSOCIATE_TYPE_E.testASSOCIATE_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testASSOCIATE_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.ASSOCIATE_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testAccessPermissionValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.AccessPermission.valueOf("testAccessPermissionParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$AccessPermission.testAccessPermissionParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testAccessPermissionValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.AccessPermission.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCACHE_MIRROR_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.CACHE_MIRROR_STATUS_E.valueOf("testCACHE_MIRROR_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$CACHE_MIRROR_STATUS_E.testCACHE_MIRROR_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCACHE_MIRROR_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.CACHE_MIRROR_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.valueOf("testCACHE_READ_AHEAD_STRATEGY_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$CACHE_READ_AHEAD_STRATEGY_E.testCACHE_READ_AHEAD_STRATEGY_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCACHE_READ_AHEAD_STRATEGY_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.CACHE_READ_AHEAD_STRATEGY_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCACHE_WRITE_BACK_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.CACHE_WRITE_BACK_E.valueOf("testCACHE_WRITE_BACK_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$CACHE_WRITE_BACK_E.testCACHE_WRITE_BACK_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCACHE_WRITE_BACK_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.CACHE_WRITE_BACK_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCPY_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.CPY_TYPE_E.valueOf("testCPY_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$CPY_TYPE_E.testCPY_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testCPY_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.CPY_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDISKSCAN_IOTYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.DISKSCAN_IOTYPE_E.valueOf("testDISKSCAN_IOTYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$DISKSCAN_IOTYPE_E.testDISKSCAN_IOTYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDISKSCAN_IOTYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.DISKSCAN_IOTYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDST_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.DST_STATUS_E.valueOf("testDST_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$DST_STATUS_E.testDST_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDST_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.DST_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskFormEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.DiskFormE.valueOf("testDiskFormEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$DiskFormE.testDiskFormEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskFormEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.DiskFormE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskLogicTypeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.DiskLogicTypeE.valueOf("testDiskLogicTypeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$DiskLogicTypeE.testDiskLogicTypeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskLogicTypeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.DiskLogicTypeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskSsdIfTypeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.DiskSsdIfTypeE.valueOf("testDiskSsdIfTypeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$DiskSsdIfTypeE.testDiskSsdIfTypeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskSsdIfTypeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.DiskSsdIfTypeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskTypeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.DiskTypeE.valueOf("testDiskTypeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$DiskTypeE.testDiskTypeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testDiskTypeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.DiskTypeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testETH_PORT_DUPLEX_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.ETH_PORT_DUPLEX_E.valueOf("testETH_PORT_DUPLEX_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$ETH_PORT_DUPLEX_E.testETH_PORT_DUPLEX_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testETH_PORT_DUPLEX_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.ETH_PORT_DUPLEX_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testEXC_AND_REC_MODE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.EXC_AND_REC_MODE_E.valueOf("testEXC_AND_REC_MODE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$EXC_AND_REC_MODE_E.testEXC_AND_REC_MODE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testEXC_AND_REC_MODE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.EXC_AND_REC_MODE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testEventLevelEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.EventLevelE.valueOf("testEventLevelEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$EventLevelE.testEventLevelEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testEventLevelEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.EventLevelE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testFAN_LEVEL_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.FAN_LEVEL_E.valueOf("testFAN_LEVEL_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$FAN_LEVEL_E.testFAN_LEVEL_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testFAN_LEVEL_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.FAN_LEVEL_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testFCPortModeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.FCPortModeE.valueOf("testFCPortModeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$FCPortModeE.testFCPortModeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testFCPortModeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.FCPortModeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHOSTGROUP_WORKMODE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.HOSTGROUP_WORKMODE_E.valueOf("testHOSTGROUP_WORKMODE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$HOSTGROUP_WORKMODE_E.testHOSTGROUP_WORKMODE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHOSTGROUP_WORKMODE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.HOSTGROUP_WORKMODE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.HOTSPARE_SPACE_STRATEGY_E.valueOf("testHOTSPARE_SPACE_STRATEGY_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$HOTSPARE_SPACE_STRATEGY_E.testHOTSPARE_SPACE_STRATEGY_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHOTSPARE_SPACE_STRATEGY_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.HOTSPARE_SPACE_STRATEGY_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.HYPERCLONE_LUN_STATUS_E.valueOf("testHYPERCLONE_LUN_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$HYPERCLONE_LUN_STATUS_E.testHYPERCLONE_LUN_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHYPERCLONE_LUN_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.HYPERCLONE_LUN_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.HYPERCLONE_PAIR_STATUS_E.valueOf("testHYPERCLONE_PAIR_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$HYPERCLONE_PAIR_STATUS_E.testHYPERCLONE_PAIR_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHYPERCLONE_PAIR_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.HYPERCLONE_PAIR_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.HYPERCOPY_LUN_TYPE_E.valueOf("testHYPERCOPY_LUN_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$HYPERCOPY_LUN_TYPE_E.testHYPERCOPY_LUN_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHYPERCOPY_LUN_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.HYPERCOPY_LUN_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHealthStatusEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.HealthStatusE.valueOf("testHealthStatusEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$HealthStatusE.testHealthStatusEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHealthStatusEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.HealthStatusE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testIniOrTgtEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.IniOrTgtE.valueOf("testIniOrTgtEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$IniOrTgtE.testIniOrTgtEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testIniOrTgtEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.IniOrTgtE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testInitTierPolicyEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.InitTierPolicyE.valueOf("testInitTierPolicyEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$InitTierPolicyE.testInitTierPolicyEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testInitTierPolicyEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.InitTierPolicyE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLINK_CONNECT_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LINK_CONNECT_STATUS_E.valueOf("testLINK_CONNECT_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LINK_CONNECT_STATUS_E.testLINK_CONNECT_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLINK_CONNECT_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LINK_CONNECT_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLINK_CONNECT_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LINK_CONNECT_TYPE_E.valueOf("testLINK_CONNECT_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LINK_CONNECT_TYPE_E.testLINK_CONNECT_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLINK_CONNECT_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LINK_CONNECT_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLOG_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LOG_TYPE_E.valueOf("testLOG_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E.testLOG_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLOG_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LOG_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUNAllocTypeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LUNAllocTypeE.valueOf("testLUNAllocTypeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LUNAllocTypeE.testLUNAllocTypeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUNAllocTypeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LUNAllocTypeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LUNCOPY_DEVICE_TYPE_E.valueOf("testLUNCOPY_DEVICE_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LUNCOPY_DEVICE_TYPE_E.testLUNCOPY_DEVICE_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUNCOPY_DEVICE_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LUNCOPY_DEVICE_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUN_PRIORITY_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LUN_PRIORITY_TYPE_E.valueOf("testLUN_PRIORITY_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LUN_PRIORITY_TYPE_E.testLUN_PRIORITY_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUN_PRIORITY_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LUN_PRIORITY_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUN_RELATION_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LUN_RELATION_E.valueOf("testLUN_RELATION_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LUN_RELATION_E.testLUN_RELATION_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLUN_RELATION_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LUN_RELATION_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLdapTransferEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.LdapTransferE.valueOf("testLdapTransferEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$LdapTransferE.testLdapTransferEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testLdapTransferEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.LdapTransferE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testMIGRATION_MODE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.MIGRATION_MODE_E.valueOf("testMIGRATION_MODE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$MIGRATION_MODE_E.testMIGRATION_MODE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testMIGRATION_MODE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.MIGRATION_MODE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testMULTIPATH_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.MULTIPATH_TYPE_E.valueOf("testMULTIPATH_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$MULTIPATH_TYPE_E.testMULTIPATH_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testMULTIPATH_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.MULTIPATH_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testMigrateLUNPolicyEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.MigrateLUNPolicyE.valueOf("testMigrateLUNPolicyEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$MigrateLUNPolicyE.testMigrateLUNPolicyEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testMigrateLUNPolicyEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.MigrateLUNPolicyE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testOSTypeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.OSTypeE.valueOf("testOSTypeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$OSTypeE.testOSTypeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testOSTypeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.OSTypeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPORT_SFP_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.PORT_SFP_STATUS_E.valueOf("testPORT_SFP_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$PORT_SFP_STATUS_E.testPORT_SFP_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPORT_SFP_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.PORT_SFP_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPREDICTION_SWITCH_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.PREDICTION_SWITCH_E.valueOf("testPREDICTION_SWITCH_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$PREDICTION_SWITCH_E.testPREDICTION_SWITCH_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPREDICTION_SWITCH_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.PREDICTION_SWITCH_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPasswordHashEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.PasswordHashE.valueOf("testPasswordHashEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$PasswordHashE.testPasswordHashEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPasswordHashEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.PasswordHashE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPortLogicTypeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.PortLogicTypeE.valueOf("testPortLogicTypeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$PortLogicTypeE.testPortLogicTypeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPortLogicTypeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.PortLogicTypeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPriorityEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.PriorityE.valueOf("testPriorityEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$PriorityE.testPriorityEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testPriorityEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.PriorityE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testProductModeEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.ProductModeE.valueOf("testProductModeEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$ProductModeE.testProductModeEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testProductModeEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.ProductModeE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRM_LUN_MIRROR_STATE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.RM_LUN_MIRROR_STATE_E.valueOf("testRM_LUN_MIRROR_STATE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$RM_LUN_MIRROR_STATE_E.testRM_LUN_MIRROR_STATE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRM_LUN_MIRROR_STATE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.RM_LUN_MIRROR_STATE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRM_PAIR_STATE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.RM_PAIR_STATE_E.valueOf("testRM_PAIR_STATE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$RM_PAIR_STATE_E.testRM_PAIR_STATE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRM_PAIR_STATE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.RM_PAIR_STATE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRM_UPDATE_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.RM_UPDATE_TYPE_E.valueOf("testRM_UPDATE_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$RM_UPDATE_TYPE_E.testRM_UPDATE_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRM_UPDATE_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.RM_UPDATE_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRaidLevelEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.RaidLevelE.valueOf("testRaidLevelEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$RaidLevelE.testRaidLevelEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRaidLevelEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.RaidLevelE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRunningStatusEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.RunningStatusE.valueOf("testRunningStatusEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$RunningStatusE.testRunningStatusEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testRunningStatusEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.RunningStatusE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SNAPSHOT_HEALTH_STATUS_E.valueOf("testSNAPSHOT_HEALTH_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SNAPSHOT_HEALTH_STATUS_E.testSNAPSHOT_HEALTH_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAPSHOT_HEALTH_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SNAPSHOT_HEALTH_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAPSHOT_STATUS_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SNAPSHOT_STATUS_E.valueOf("testSNAPSHOT_STATUS_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SNAPSHOT_STATUS_E.testSNAPSHOT_STATUS_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAPSHOT_STATUS_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SNAPSHOT_STATUS_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAP_BELONG_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SNAP_BELONG_E.valueOf("testSNAP_BELONG_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SNAP_BELONG_E.testSNAP_BELONG_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAP_BELONG_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SNAP_BELONG_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAP_SPEED_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SNAP_SPEED_E.valueOf("testSNAP_SPEED_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SNAP_SPEED_E.testSNAP_SPEED_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSNAP_SPEED_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SNAP_SPEED_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSPEED_LEVEL_3_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SPEED_LEVEL_3_E.valueOf("testSPEED_LEVEL_3_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SPEED_LEVEL_3_E.testSPEED_LEVEL_3_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSPEED_LEVEL_3_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SPEED_LEVEL_3_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSTATE_GROUP_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.STATE_GROUP_E.valueOf("testSTATE_GROUP_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$STATE_GROUP_E.testSTATE_GROUP_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSTATE_GROUP_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.STATE_GROUP_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSWITCH_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SWITCH_E.valueOf("testSWITCH_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SWITCH_E.testSWITCH_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSWITCH_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SWITCH_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSYSTEM_ROLE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SYSTEM_ROLE_E.valueOf("testSYSTEM_ROLE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SYSTEM_ROLE_E.testSYSTEM_ROLE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSYSTEM_ROLE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SYSTEM_ROLE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSpeedLevelEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SpeedLevelE.valueOf("testSpeedLevelEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SpeedLevelE.testSpeedLevelEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSpeedLevelEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SpeedLevelE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testStatisticDataIdValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.StatisticDataId.valueOf("testStatisticDataIdParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$StatisticDataId.testStatisticDataIdParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testStatisticDataIdValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.StatisticDataId.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSysStatusEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.SysStatusE.valueOf("testSysStatusEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$SysStatusE.testSysStatusEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testSysStatusEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.SysStatusE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.valueOf("testTIER0_ANALYSIS_DISK_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$TIER0_ANALYSIS_DISK_TYPE_E.testTIER0_ANALYSIS_DISK_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testTIER0_ANALYSIS_DISK_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.TIER0_ANALYSIS_DISK_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.valueOf("testTIER1_ANALYSIS_DISK_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$TIER1_ANALYSIS_DISK_TYPE_E.testTIER1_ANALYSIS_DISK_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testTIER1_ANALYSIS_DISK_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.TIER1_ANALYSIS_DISK_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testTIER2_ANALYSIS_DISK_TYPE_EValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.valueOf("testTIER2_ANALYSIS_DISK_TYPE_EParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$TIER2_ANALYSIS_DISK_TYPE_E.testTIER2_ANALYSIS_DISK_TYPE_EParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testTIER2_ANALYSIS_DISK_TYPE_EValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.TIER2_ANALYSIS_DISK_TYPE_E.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testWARNNING_TYPEValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            EnumDefine.WARNNING_TYPE.valueOf("testWARNNING_TYPEParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.keydeifines.EnumDefine$WARNNING_TYPE.testWARNNING_TYPEParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testWARNNING_TYPEValueOfThrowsNullPointerException() throws Throwable {
        try {
            EnumDefine.WARNNING_TYPE.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
}

