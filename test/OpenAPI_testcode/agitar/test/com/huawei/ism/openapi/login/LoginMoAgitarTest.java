/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:34:12
 * Time to generate: 00:12.359 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.login.LoginMo:1165edde2870520823fff5bf8576ca13
 *
 */

package com.huawei.ism.openapi.login;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import org.json.JSONObject;

public class LoginMoAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LoginMo.class;
    }
    
    public void testConstructor() throws Throwable {
        LoginMo loginMo = new LoginMo(new JSONObject());
        assertEquals("loginMo.mo.getProperties().size()", 0, ((MO) getPrivateField(loginMo, "mo")).getProperties().size());
    }
    
    public void testGetBaseToken() throws Throwable {
        LoginMo loginMo = new LoginMo(null);
        String result = loginMo.getBaseToken();
        assertNull("result", result);
        assertEquals("loginMo.mo.getProperties().size()", 0, ((MO) getPrivateField(loginMo, "mo")).getProperties().size());
    }
    
    public void testGetDeviceId() throws Throwable {
        LoginMo loginMo = new LoginMo(new JSONObject());
        String result = loginMo.getDeviceId();
        assertNull("result", result);
        assertEquals("loginMo.mo.getProperties().size()", 0, ((MO) getPrivateField(loginMo, "mo")).getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testString", 100.0);
        jObject.accumulate("testString", "");
        try {
            new LoginMo(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
}

