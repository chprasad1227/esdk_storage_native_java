/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:35:43
 * Time to generate: 00:11.468 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.model.MOType:a08ca075e69ac70da033d96549910db8
 *
 */

package com.huawei.ism.openapi.common.model;

import com.agitar.lib.junit.AgitarTestCase;

public class MOTypeAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MOType.class;
    }
    
    public void testGetType() throws Throwable {
        MOType result = MOType.getType(100);
        assertNull("result", result);
    }
    
    public void testGetType1() throws Throwable {
        MOType result = MOType.getType(27);
        assertEquals("result", MOType.SNAPSHOT, result);
    }
    
    public void testGetType2() throws Throwable {
        MOType result = MOType.getType(-1);
        assertEquals("result", MOType.SNAS_CIFS_SHARE, result);
    }
    
    public void testGetType3() throws Throwable {
        MOType result = MOType.getType(10);
        assertEquals("result", MOType.DISK, result);
    }
    
    public void testGetTypeName() throws Throwable {
        String result = MOType.getTypeName(10);
        assertEquals("result", "DISK", result);
    }
    
    public void testGetTypeName1() throws Throwable {
        String result = MOType.getTypeName(0);
        assertNull("result", result);
    }
    
    public void testGetValue() throws Throwable {
        int result = MOType.SNAPSHOT.getValue();
        assertEquals("result", 27, result);
    }
    
    public void testValueOf() throws Throwable {
        MOType result = MOType.valueOf("NAS_AD_FIELD");
        assertEquals("result", MOType.NAS_AD_FIELD, result);
    }
    
    public void testValues() throws Throwable {
        MOType[] result = MOType.values();
        assertEquals("result.length", 31, result.length);
        assertEquals("result[0]", MOType.DISK, result[0]);
    }
    
    public void testValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            MOType.valueOf("testMOTypeParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.model.MOType.testMOTypeParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testValueOfThrowsNullPointerException() throws Throwable {
        try {
            MOType.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
}

