/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:25:26
 * Time to generate: 00:17.609 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.alarm.AlarmInfoMO:838f598e0447b375ad43d93c1bd1fb7e
 *
 */

package com.huawei.ism.openapi.alarm;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONObject;

public class AlarmInfoMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return AlarmInfoMO.class;
    }
    
    public void testConstructor() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO(new JSONObject());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetClearTime() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        Long result = alarmInfoMO.getClearTime();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetConfirmTime() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO(new JSONObject());
        Long result = alarmInfoMO.getConfirmTime();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetCount() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        long result = alarmInfoMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result);
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetDescription() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        String result = alarmInfoMO.getDescription();
        assertNull("result", result);
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetDetail() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        String result = alarmInfoMO.getDetail();
        assertNull("result", result);
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetEventParam() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        String result = alarmInfoMO.getEventParam();
        assertNull("result", result);
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetId() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        Long result = alarmInfoMO.getId();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetLevel() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testAlarmInfoMOKey", true);
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO(jObject);
        EnumDefine.EventLevelE result = alarmInfoMO.getLevel();
        assertNull("result", result);
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        MO result = alarmInfoMO.getMO();
        assertEquals("result.getProperties().size()", 0, result.getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        String result = alarmInfoMO.getName();
        assertNull("result", result);
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetRecoverTime() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        Long result = alarmInfoMO.getRecoverTime();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetSequence() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        Long result = alarmInfoMO.getSequence();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetStartTime() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testAlarmInfoMOKey", true);
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO(jObject);
        Long result = alarmInfoMO.getStartTime();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetSuggestion() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        String result = alarmInfoMO.getSuggestion();
        assertNull("result", result);
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testGetType() throws Throwable {
        AlarmInfoMO alarmInfoMO = new AlarmInfoMO();
        Integer result = alarmInfoMO.getType();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("alarmInfoMO.mo", getPrivateField(alarmInfoMO, "mo"));
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put("testString", "");
        JSONObject jObject = new JSONObject(map);
        jObject.accumulate("testString", null);
        try {
            new AlarmInfoMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
}

