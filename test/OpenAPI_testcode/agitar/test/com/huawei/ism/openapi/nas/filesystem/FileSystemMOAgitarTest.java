/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-20 14:07:04
 * Time to generate: 01:14.078 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.nas.filesystem.FileSystemMO:028a21bd2b67395e02c088213685b106
 *
 */

package com.huawei.ism.openapi.nas.filesystem;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import org.json.JSONObject;

public class FileSystemMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FileSystemMO.class;
    }
    
    public void testConstructor() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO(new JSONObject());
        assertEquals("fileSystemMO.getMO().getProperties().size()", 0, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testConstructor2() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        assertEquals("fileSystemMO.getMO().getProperties().size()", 0, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testGetAllocCapacity() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getAllocCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetAutoDelSnapshotEnable() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Boolean result = fileSystemMO.getAutoDelSnapshotEnable();
        assertFalse("result", result.booleanValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCachePartitionId() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("CACHEPARTITIONID"), "testString");
        Mockingbird.enterTestMode(FileSystemMO.class);
        String result = fileSystemMO.getCachePartitionId();
        assertEquals("result", "testString", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCachePartitionId1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getCachePartitionId();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCapacity() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCapacity1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("CAPACITY"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getCapacity();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCapacityThresHold() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("CAPACITYTHRESHOLD"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getCapacityThresHold();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCapacityThresHold1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getCapacityThresHold();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetChecksumEnable() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Boolean result = fileSystemMO.getChecksumEnable();
        assertFalse("result", result.booleanValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCompression() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("COMPRESSION"), "testString");
        Mockingbird.enterTestMode(FileSystemMO.class);
        String result = fileSystemMO.getCompression();
        assertEquals("result", "testString", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCompression1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getCompression();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCount() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("COUNT"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getCount();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetCount1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetDataTransferPolicy() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setDataTransferPolicy(EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_NONE);
        EnumDefine.MigrateLUNPolicyE result = fileSystemMO.getDataTransferPolicy();
        assertSame("result", EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_NONE, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetDescription() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getDescription();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetDescription1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("DESCRIPTION"), "testString");
        Mockingbird.enterTestMode(FileSystemMO.class);
        String result = fileSystemMO.getDescription();
        assertEquals("result", "testString", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetEnableCompression() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Boolean result = fileSystemMO.getEnableCompression();
        assertFalse("result", result.booleanValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetEnableCompression1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(mo.getBoolProperty("ENABLECOMPRESSION"), boolean2);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Boolean result = fileSystemMO.getEnableCompression();
        assertSame("result", boolean2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetEnableDdup() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Boolean result = fileSystemMO.getEnableDdup();
        assertFalse("result", result.booleanValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetEnableDdup1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(mo.getBoolProperty("ENABLEDEDUP"), boolean2);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Boolean result = fileSystemMO.getEnableDdup();
        assertSame("result", boolean2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetHealthStatusE() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setHealthStatusE(EnumDefine.HealthStatusE.BUSY);
        EnumDefine.HealthStatusE result = fileSystemMO.getHealthStatusE();
        assertSame("result", EnumDefine.HealthStatusE.BUSY, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetId() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getId();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetInitialAllocCapacity() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getInitialAllocCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetInitialAllocCapacity1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("INITIALALLOCCAPACITY"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getInitialAllocCapacity();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetInitialDistributePolicy() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("INITIALDISTRIBUTEPOLICY"), "2");
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Object[] {"2"}, new Integer(2), 1);
        Mockingbird.setReturnValue(EnumDefine.InitTierPolicyE.valueOf(100), EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_PERFORMANCE);
        Mockingbird.enterTestMode(FileSystemMO.class);
        EnumDefine.InitTierPolicyE result = fileSystemMO.getInitialDistributePolicy();
        assertSame("result", EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_PERFORMANCE, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetIsShowSnapDir() throws Throwable {
        Boolean result = new FileSystemMO(new JSONObject()).getIsShowSnapDir();
        assertFalse("result", result.booleanValue());
    }
    
    public void testGetMO() throws Throwable {
        MO mo = new MO();
        MO result = new FileSystemMO(mo).getMO();
        assertSame("result", mo, result);
    }
    
    public void testGetName() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("NAME"), "NAME");
        Mockingbird.enterTestMode(FileSystemMO.class);
        String result = fileSystemMO.getName();
        assertEquals("result", "NAME", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetName1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getName();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetOwningController() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("OWNINGCONTROLLER"), "testString");
        Mockingbird.enterTestMode(FileSystemMO.class);
        String result = fileSystemMO.getOwningController();
        assertEquals("result", "testString", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetOwningController1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getOwningController();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetParentId() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getParentId();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetParentName() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getParentName();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetParentName1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("PARENTNAME"), "testString");
        Mockingbird.enterTestMode(FileSystemMO.class);
        String result = fileSystemMO.getParentName();
        assertEquals("result", "testString", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetQuotaStatus() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("QUOTASTATUS"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getQuotaStatus();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetQuotaStatus1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getQuotaStatus();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRecycleAutoCleanSwitch() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("RECYCLEAUTOCLEANSWITCH"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getRecycleAutoCleanSwitch();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRecycleAutoCleanSwitch1() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        Long result = fileSystemMO.getRecycleAutoCleanSwitch();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("fileSystemMO.getMO().getProperties().size()", 0, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testGetRecycleHoldTime() throws Throwable {
        MO mo = new MO(new JSONObject());
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setRecycleHoldTime(new Long(0L));
        Long result = fileSystemMO.getRecycleHoldTime();
        assertEquals("result", 0L, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRecycleHoldTime1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getRecycleHoldTime();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRecycleSwitch() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getRecycleSwitch();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRecycleSwitch1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("RECYCLESWITCH"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getRecycleSwitch();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRecycleThresHold() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getRecycleThresHold();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRecycleThresHold1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("RECYCLETHRESHOLD"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getRecycleThresHold();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetRunningStatusE() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setRunningStatusE(EnumDefine.RunningStatusE.ENABLE);
        EnumDefine.RunningStatusE result = fileSystemMO.getRunningStatusE();
        assertSame("result", EnumDefine.RunningStatusE.ENABLE, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetSectorSize() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getSectorSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetSnapshotReservePer() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("SNAPSHOTRESERVEPER"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getSnapshotReservePer();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetSnapshotReservePer1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getSnapshotReservePer();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetSnapshotUseCapacity() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("SNAPSHOTUSECAPACITY"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getSnapshotUseCapacity();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetSnapshotUseCapacity1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getSnapshotUseCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetTenancyId() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("TENANCYID"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getTenancyId();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetTenancyId1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getTenancyId();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWorkingController() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getWorkingController();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWorkingController1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("WORKINGCONTROLLER"), "testString");
        Mockingbird.enterTestMode(FileSystemMO.class);
        String result = fileSystemMO.getWorkingController();
        assertEquals("result", "testString", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormAutoDel() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(mo.getBoolProperty("WORMAUTODEL"), boolean2);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Boolean result = fileSystemMO.getWormAutoDel();
        assertSame("result", boolean2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormAutoDel1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Boolean result = fileSystemMO.getWormAutoDel();
        assertFalse("result", result.booleanValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormAutoLock() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(mo.getBoolProperty("WORMAUTOLOCK"), boolean2);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Boolean result = fileSystemMO.getWormAutoLock();
        assertSame("result", boolean2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormAutoLock1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Boolean result = fileSystemMO.getWormAutoLock();
        assertFalse("result", result.booleanValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormAutoLockTime() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setWormAutoLockTime(new Long(0L));
        Long result = fileSystemMO.getWormAutoLockTime();
        assertEquals("result", 0L, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormAutoLockTime1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getWormAutoLockTime();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormDefProtectPeriod() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getWormDefProtectPeriod();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormDefProtectPeriod1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("WORMDEFPROTECTPERIOD"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getWormDefProtectPeriod();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormMaxProtectPeriod() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getWormMaxProtectPeriod();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormMaxProtectPeriod1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("WORMMAXPROTECTPERIOD"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getWormMaxProtectPeriod();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormMinProtectPeriod() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("WORMMINPROTECTPERIOD"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(FileSystemMO.class);
        Long result = fileSystemMO.getWormMinProtectPeriod();
        assertSame("result", long2, result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormMinProtectPeriod1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Long result = fileSystemMO.getWormMinProtectPeriod();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testGetWormType() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setWormType("testFileSystemMOWormType");
        String result = fileSystemMO.getWormType();
        assertEquals("result", "testFileSystemMOWormType", result);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testGetWormType1() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        String result = fileSystemMO.getWormType();
        assertNull("result", result);
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetAllocCapacity() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setAllocCapacity("testFileSystemMOAllocCapacity");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"ALLOCCAPACITY\")", "testFileSystemMOAllocCapacity", fileSystemMO.getMO().getProperties().get("ALLOCCAPACITY"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetAllocType() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setAllocType(EnumDefine.LUNAllocTypeE.THIN);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"ALLOCTYPE\")", new Integer(1), fileSystemMO.getMO().getProperties().get("ALLOCTYPE"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetAutoDelSnapshotEnable() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setAutoDelSnapshotEnable(Boolean.FALSE);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"AUTODELSNAPSHOTENABLE\")", Boolean.FALSE, fileSystemMO.getMO().getProperties().get("AUTODELSNAPSHOTENABLE"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetCachePartitionId() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setCachePartitionId("testFileSystemMOCachePartitionId");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"CACHEPARTITIONID\")", "testFileSystemMOCachePartitionId", fileSystemMO.getMO().getProperties().get("CACHEPARTITIONID"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetCapacity() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setCapacity(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"CAPACITY\")", new Long(0L), fileSystemMO.getMO().getProperties().get("CAPACITY"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetCapacityThresHold() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setCapacityThresHold(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"CAPACITYTHRESHOLD\")", new Long(0L), fileSystemMO.getMO().getProperties().get("CAPACITYTHRESHOLD"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetCompression() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setCompression("testFileSystemMOCompression");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"COMPRESSION\")", "testFileSystemMOCompression", fileSystemMO.getMO().getProperties().get("COMPRESSION"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetCount() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setCount(100L);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"COUNT\")", new Long(100L), fileSystemMO.getMO().getProperties().get("COUNT"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetDataTransferPolicy() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setDataTransferPolicy(EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_AUTO);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"DATATRANSFERPOLICY\")", new Integer(1), fileSystemMO.getMO().getProperties().get("DATATRANSFERPOLICY"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetDescription() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setDescription("testFileSystemMODescription");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"DESCRIPTION\")", "testFileSystemMODescription", fileSystemMO.getMO().getProperties().get("DESCRIPTION"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetEnableCompression() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setEnableCompression(Boolean.FALSE);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"ENABLECOMPRESSION\")", Boolean.FALSE, fileSystemMO.getMO().getProperties().get("ENABLECOMPRESSION"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetEnableDdup() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setEnableDdup(Boolean.TRUE);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"ENABLEDEDUP\")", Boolean.TRUE, fileSystemMO.getMO().getProperties().get("ENABLEDEDUP"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetHealthStatusE() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setHealthStatusE(EnumDefine.HealthStatusE.PART_BROKEN);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"HEALTHSTATUS\")", new Integer(4), fileSystemMO.getMO().getProperties().get("HEALTHSTATUS"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetIOPriority() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setIOPriority("testFileSystemMOIOPriority");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"IOPRIORITY\")", "testFileSystemMOIOPriority", fileSystemMO.getMO().getProperties().get("IOPRIORITY"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetId() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setId("testFileSystemMOId");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"ID\")", "testFileSystemMOId", fileSystemMO.getMO().getProperties().get("ID"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetInitialAllocCapacity() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setInitialAllocCapacity(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"INITIALALLOCCAPACITY\")", new Long(0L), fileSystemMO.getMO().getProperties().get("INITIALALLOCCAPACITY"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetInitialDistributePolicy() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setInitialDistributePolicy(EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_PERFORMANCE);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"INITIALDISTRIBUTEPOLICY\")", new Integer(2), fileSystemMO.getMO().getProperties().get("INITIALDISTRIBUTEPOLICY"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetName() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setName("testFileSystemMOName");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"NAME\")", "testFileSystemMOName", fileSystemMO.getMO().getProperties().get("NAME"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetOwningController() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setOwningController("testFileSystemMOOwningController");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"OWNINGCONTROLLER\")", "testFileSystemMOOwningController", fileSystemMO.getMO().getProperties().get("OWNINGCONTROLLER"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetParentId() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setParentId("testFileSystemMOParentId");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"PARENTID\")", "testFileSystemMOParentId", fileSystemMO.getMO().getProperties().get("PARENTID"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetParentName() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setParentName("testFileSystemMOParentName");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"PARENTNAME\")", "testFileSystemMOParentName", fileSystemMO.getMO().getProperties().get("PARENTNAME"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetParentType() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setParentType(MOType.LUN);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"PARENTTYPE\")", new Integer(11), fileSystemMO.getMO().getProperties().get("PARENTTYPE"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetQuotaStatus() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setQuotaStatus(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"QUOTASTATUS\")", new Long(0L), fileSystemMO.getMO().getProperties().get("QUOTASTATUS"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetRecycleAutoCleanSwitch() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setRecycleAutoCleanSwitch(new Long(100L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"RECYCLEAUTOCLEANSWITCH\")", new Long(100L), fileSystemMO.getMO().getProperties().get("RECYCLEAUTOCLEANSWITCH"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetRecycleHoldTime() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setRecycleHoldTime(new Long(100L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"RECYCLEHOLDTIME\")", new Long(100L), fileSystemMO.getMO().getProperties().get("RECYCLEHOLDTIME"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetRecycleSwitch() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setRecycleSwitch(new Long(-10L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"RECYCLESWITCH\")", new Long(-10L), fileSystemMO.getMO().getProperties().get("RECYCLESWITCH"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetRecycleThresHold() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setRecycleThresHold(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"RECYCLETHRESHOLD\")", new Long(0L), fileSystemMO.getMO().getProperties().get("RECYCLETHRESHOLD"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetRunningStatusE() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setRunningStatusE(EnumDefine.RunningStatusE.INITIAL_SYNCHRONIZING);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"RUNNINGSTATUS\")", new Integer(21), fileSystemMO.getMO().getProperties().get("RUNNINGSTATUS"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetSectorSize() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setSectorSize("testFileSystemMOSectorSize");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"SECTORSIZE\")", "testFileSystemMOSectorSize", fileSystemMO.getMO().getProperties().get("SECTORSIZE"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetSnapshotReservePer() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setSnapshotReservePer(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"SNAPSHOTRESERVEPER\")", new Long(0L), fileSystemMO.getMO().getProperties().get("SNAPSHOTRESERVEPER"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetTenancyId() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setTenancyId(new Long(99L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"TENANCYID\")", new Long(99L), fileSystemMO.getMO().getProperties().get("TENANCYID"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetWormAutoDel() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setWormAutoDel(Boolean.FALSE);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORMAUTODEL\")", Boolean.FALSE, fileSystemMO.getMO().getProperties().get("WORMAUTODEL"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetWormAutoLock() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setWormAutoLock(Boolean.FALSE);
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORMAUTOLOCK\")", Boolean.FALSE, fileSystemMO.getMO().getProperties().get("WORMAUTOLOCK"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetWormAutoLockTime() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setWormAutoLockTime(new Long(-64L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORMAUTOLOCKTIME\")", new Long(-64L), fileSystemMO.getMO().getProperties().get("WORMAUTOLOCKTIME"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetWormDefProtectPeriod() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setWormDefProtectPeriod(new Long(Long.MAX_VALUE));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORMDEFPROTECTPERIOD\")", new Long(Long.MAX_VALUE), fileSystemMO.getMO().getProperties().get("WORMDEFPROTECTPERIOD"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetWormMaxProtectPeriod() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setWormMaxProtectPeriod(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORMMAXPROTECTPERIOD\")", new Long(0L), fileSystemMO.getMO().getProperties().get("WORMMAXPROTECTPERIOD"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetWormMinProtectPeriod() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setWormMinProtectPeriod(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORMMINPROTECTPERIOD\")", new Long(0L), fileSystemMO.getMO().getProperties().get("WORMMINPROTECTPERIOD"));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
    }
    
    public void testSetWormType() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setWormType("testFileSystemMOWormType");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORMTYPE\")", "testFileSystemMOWormType", fileSystemMO.getMO().getProperties().get("WORMTYPE"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetsnapshotUseCapacity() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setsnapshotUseCapacity(new Long(0L));
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"SNAPSHOTUSECAPACITY\")", new Long(0L), fileSystemMO.getMO().getProperties().get("SNAPSHOTUSECAPACITY"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testSetworkingController() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        fileSystemMO.setworkingController("testFileSystemMOWorkingController");
        assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        assertEquals("fileSystemMO.getMO().getProperties().get(\"WORKINGCONTROLLER\")", "testFileSystemMOWorkingController", fileSystemMO.getMO().getProperties().get("WORKINGCONTROLLER"));
        assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testFileSystemMOKey", true);
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(MO.class, "<init>(org.json.JSONObject)", (Throwable) Mockingbird.getProxyObject(JsonSyntaxException.class));
        Mockingbird.enterTestMode(FileSystemMO.class);
        try {
            new FileSystemMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetAllocCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getAllocCapacity();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetAllocTypeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getAllocType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetAllocTypeThrowsNumberFormatException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.getAllocType();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetAutoDelSnapshotEnableThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getAutoDelSnapshotEnable();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetCachePartitionIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getCachePartitionId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetCapacityThresHoldThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getCapacityThresHold();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getCapacity();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetChecksumEnableThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getChecksumEnable();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetCompressionThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getCompression();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetCountThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetDataTransferPolicyThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getDataTransferPolicy();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetDataTransferPolicyThrowsNumberFormatException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.getDataTransferPolicy();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetDescriptionThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getDescription();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetEnableCompressionThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getEnableCompression();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetEnableDdupThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getEnableDdup();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetHealthStatusEThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getHealthStatusE();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetHealthStatusEThrowsNumberFormatException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.getHealthStatusE();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetIOPriorityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getIOPriority();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetIOPriorityThrowsNumberFormatException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.getIOPriority();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetInitialAllocCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getInitialAllocCapacity();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetInitialDistributePolicyThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getInitialDistributePolicy();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetInitialDistributePolicyThrowsNumberFormatException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.getInitialDistributePolicy();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetNameThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getName();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetOwningControllerThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getOwningController();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetParentIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getParentId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetParentNameThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getParentName();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetParentTypeThrowsIllegalArgumentException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO();
        fileSystemMO.setParentType(MOType.FC_PORT);
        try {
            fileSystemMO.getParentType();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.model.MOType.212", ex.getMessage());
            assertThrownBy(Enum.class, ex);
            assertEquals("fileSystemMO.getMO().getProperties().size()", 1, fileSystemMO.getMO().getProperties().size());
        }
    }
    
    public void testGetParentTypeThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.getParentType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetQuotaStatusThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getQuotaStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetRecycleAutoCleanSwitchThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getRecycleAutoCleanSwitch();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetRecycleHoldTimeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getRecycleHoldTime();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetRecycleSwitchThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getRecycleSwitch();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetRecycleThresHoldThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getRecycleThresHold();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetRunningStatusEThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getRunningStatusE();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetRunningStatusEThrowsNumberFormatException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.getRunningStatusE();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetSectorSizeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getSectorSize();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetSectorSizeThrowsNumberFormatException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(mo.getLongProperty("SECTORSIZE"), (Throwable) Mockingbird.getProxyObject(NumberFormatException.class));
        Mockingbird.enterTestMode(FileSystemMO.class);
        try {
            fileSystemMO.getSectorSize();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testGetSnapshotReservePerThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getSnapshotReservePer();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetSnapshotUseCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getSnapshotUseCapacity();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetTenancyIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getTenancyId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWorkingControllerThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWorkingController();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWormAutoDelThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWormAutoDel();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWormAutoLockThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWormAutoLock();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWormAutoLockTimeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWormAutoLockTime();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWormDefProtectPeriodThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWormDefProtectPeriod();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWormMaxProtectPeriodThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWormMaxProtectPeriod();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWormMinProtectPeriodThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWormMinProtectPeriod();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testGetWormTypeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.getWormType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetAllocCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setAllocCapacity("testFileSystemMOAllocCapacity");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetAllocTypeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setAllocType(EnumDefine.LUNAllocTypeE.THIN);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetAutoDelSnapshotEnableThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setAutoDelSnapshotEnable(Boolean.FALSE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetCachePartitionIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setCachePartitionId("testFileSystemMOCachePartitionId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetCapacityThresHoldThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setCapacityThresHold(new Long(0L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setCapacity(new Long(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetCompressionThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setCompression("testFileSystemMOCompression");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetCountThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setCount(100L);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetDataTransferPolicyThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setDataTransferPolicy(EnumDefine.MigrateLUNPolicyE.MIGRATE_LUN_POLICY_AUTO);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setDescription("testFileSystemMODescription");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetEnableCompressionThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setEnableCompression(Boolean.TRUE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetEnableDdupThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setEnableDdup(Boolean.TRUE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetHealthStatusEThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setHealthStatusE(EnumDefine.HealthStatusE.FAULT);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetIOPriorityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setIOPriority("testFileSystemMOIOPriority");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setId("testFileSystemMOId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetInitialAllocCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setInitialAllocCapacity(new Long(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetInitialDistributePolicyThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        FileSystemMO fileSystemMO = new FileSystemMO(mo);
        try {
            fileSystemMO.setInitialDistributePolicy(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertSame("fileSystemMO.getMO()", mo, fileSystemMO.getMO());
        }
    }
    
    public void testSetInitialDistributePolicyThrowsNullPointerException1() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setInitialDistributePolicy(EnumDefine.InitTierPolicyE.INIT_TIER_POLICY_PERFORMANCE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setName("testFileSystemMOName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetOwningControllerThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setOwningController("testFileSystemMOOwningController");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetParentIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setParentId("testFileSystemMOParentId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetParentNameThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setParentName("testFileSystemMOParentName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetParentTypeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setParentType(MOType.LOCAL_RESUSER);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetQuotaStatusThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setQuotaStatus(new Long(11L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetRecycleAutoCleanSwitchThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setRecycleAutoCleanSwitch(new Long(1L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetRecycleHoldTimeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setRecycleHoldTime(new Long(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetRecycleSwitchThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setRecycleSwitch(new Long(61L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetRecycleThresHoldThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setRecycleThresHold(new Long(2L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetRunningStatusEThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setRunningStatusE(EnumDefine.RunningStatusE.LINK_UP);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetSectorSizeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setSectorSize("testFileSystemMOSectorSize");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetSnapshotReservePerThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setSnapshotReservePer(new Long(127L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetTenancyIdThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setTenancyId(new Long(101L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetWormAutoDelThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setWormAutoDel(Boolean.TRUE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetWormAutoLockThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setWormAutoLock(Boolean.TRUE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetWormAutoLockTimeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setWormAutoLockTime(new Long(0L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetWormDefProtectPeriodThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setWormDefProtectPeriod(new Long(0L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetWormMaxProtectPeriodThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setWormMaxProtectPeriod(new Long(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetWormMinProtectPeriodThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setWormMinProtectPeriod(new Long(-64L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetWormTypeThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setWormType("testFileSystemMOWormType");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetsnapshotUseCapacityThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setsnapshotUseCapacity(new Long(10L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
    
    public void testSetworkingControllerThrowsNullPointerException() throws Throwable {
        FileSystemMO fileSystemMO = new FileSystemMO((MO) null);
        try {
            fileSystemMO.setworkingController("testFileSystemMOWorkingController");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemMO.class, ex);
            assertNull("fileSystemMO.getMO()", fileSystemMO.getMO());
        }
    }
}

