/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:27:54
 * Time to generate: 01:24.500 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.cachepartition.CachePartitionHandlerImp:5fd6730edcb88476a6389273bf1ec425
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.cachepartition;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public class CachePartitionHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CachePartitionHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCachePartitionHandlerImpIp", 100);
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(restRequestHandler, "testCachePartitionHandlerImpDeviceID");
        assertNull("cachePartitionHandlerImp.cachePartitionIterator", getPrivateField(cachePartitionHandlerImp, "cachePartitionIterator"));
        assertEquals("cachePartitionHandlerImp.deviceID", "testCachePartitionHandlerImpDeviceID", getPrivateField(cachePartitionHandlerImp, "deviceID"));
        assertSame("cachePartitionHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateAssociateWithLunWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        setPrivateField(cachePartitionHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        cachePartitionHandlerImp.createAssociateWithLun("", "");
        assertEquals("cachePartitionHandlerImp.deviceID", "", getPrivateField(cachePartitionHandlerImp, "deviceID"));
        assertNull("cachePartitionHandlerImp.restRequestHandler", getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(MOType.class, "STORAGEENGINE");
        storeStaticField(MOType.class, "CACHEPARTITION");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        CachePartitionMO cachePartitionMO = (CachePartitionMO) Mockingbird.getProxyObject(CachePartitionMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        setPrivateField(cachePartitionHandlerImp, "restRequestHandler", null);
        setPrivateField(cachePartitionMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "CACHEPARTITION", mOType);
        setPrivateField(MOType.class, "STORAGEENGINE", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(mO, "properties", map);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("PARENTTYPE", 0), null);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, map, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        CachePartitionMO result = cachePartitionHandlerImp.create(cachePartitionMO);
        assertNull("result", result);
    }
    
    public void testGetBatch() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImpDeviceID");
        CachePartitionIterator result = cachePartitionHandlerImp.getBatch(new CachePartitionQuery(new CachePartitionMO(), 100L, 1000L));
        assertSame("cachePartitionHandlerImp.cachePartitionIterator", result, getPrivateField(cachePartitionHandlerImp, "cachePartitionIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 1, result.getConcretFilterHeaders().length);
    }
    
    public void testGetBatch1() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImpDeviceID");
        CachePartitionQuery condition = new CachePartitionQuery(new CachePartitionMO(), 100L, 1000L);
        CachePartitionIterator batch = cachePartitionHandlerImp.getBatch(condition);
        CachePartitionIterator result = cachePartitionHandlerImp.getBatch(condition);
        assertSame("result", batch, result);
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "CACHEPARTITION");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        setPrivateField(cachePartitionHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "CACHEPARTITION", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), null);
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        CachePartitionMO result = cachePartitionHandlerImp.get("");
        assertNull("result", result);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(MOType.class, "CACHEPARTITION");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        CachePartitionMO cachePartitionMO = (CachePartitionMO) Mockingbird.getProxyObject(CachePartitionMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        setPrivateField(cachePartitionHandlerImp, "restRequestHandler", null);
        setPrivateField(cachePartitionMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "CACHEPARTITION", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", map);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(cachePartitionMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, map, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        cachePartitionHandlerImp.modify(cachePartitionMO);
        assertEquals("cachePartitionHandlerImp.deviceID", "", getPrivateField(cachePartitionHandlerImp, "deviceID"));
        assertNull("cachePartitionHandlerImp.restRequestHandler", getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveAssociateFromLunWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        storeStaticField(MOType.class, "CACHEPARTITION");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        setPrivateField(cachePartitionHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "CACHEPARTITION", mOType);
        setPrivateField(MOType.class, "LUN", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"TYPE", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ASSOCIATEOBJID", ""}, null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        cachePartitionHandlerImp.removeAssociateFromLun("", "");
        assertEquals("cachePartitionHandlerImp.deviceID", "", getPrivateField(cachePartitionHandlerImp, "deviceID"));
        assertNull("cachePartitionHandlerImp.restRequestHandler", getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateAssociateWithLunThrowsApiException() throws Throwable {
        try {
            new CachePartitionHandlerImp(null, "testCachePartitionHandlerImpDeviceID").createAssociateWithLun("testCachePartitionHandlerImpCachePartitionId", "testCachePartitionHandlerImpLunId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateAssociateWithLunThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "LUN");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJID", ""), null);
        Mockingbird.setException(jSONObject.put("ID", ""), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.createAssociateWithLun("", "");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertNull("cachePartitionHandlerImp.restRequestHandler", getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateAssociateWithLunThrowsIllegalArgumentException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImp\rIp", 100), "testCachePartitionHandlerImpDeviceID");
        try {
            cachePartitionHandlerImp.createAssociateWithLun("testCachePartitionHandlerImpCachePartitionId", "testCachePartitionHandlerImpLunId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateAssociateWithLunThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCachePartitionHandlerImpIp", 100);
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(restRequestHandler, "testCachePartitionHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.createAssociateWithLun("testCachePartitionHandlerImpCachePartitionId", "testCachePartitionHandlerImpLunId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "testCachePartitionHandlerImpDeviceID", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertSame("cachePartitionHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsApiException() throws Throwable {
        try {
            new CachePartitionHandlerImp(null, "testCachePartitionHandlerImpDeviceID").create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "STORAGEENGINE");
        storeStaticField(MOType.class, "CACHEPARTITION");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "CACHEPARTITION", mOType);
        setPrivateField(MOType.class, "STORAGEENGINE", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setException(jSONObject.put("PARENTTYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertNull("cachePartitionHandlerImp.restRequestHandler", getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsIllegalArgumentException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImp\rDeviceID");
        try {
            cachePartitionHandlerImp.create(new CachePartitionMO());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCachePartitionHandlerImpIp", 100);
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(restRequestHandler, "testCachePartitionHandlerImpDeviceID");
        CachePartitionMO mo = new CachePartitionMO();
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.create(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "testCachePartitionHandlerImpDeviceID", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertSame("cachePartitionHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testDeleteThrowsApiException() throws Throwable {
        try {
            new CachePartitionHandlerImp(null, "testCachePartitionHandlerImpDeviceID").delete("testCachePartitionHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testDeleteThrowsIllegalArgumentException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImpDeviceID");
        try {
            cachePartitionHandlerImp.delete("testCachePartitionHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCachePartitionHandlerImpIp", 100);
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(restRequestHandler, "testCachePartitionHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.delete("testCachePartitionHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "testCachePartitionHandlerImpDeviceID", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertSame("cachePartitionHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetCachePartitionByLUNThrowsApiException() throws Throwable {
        try {
            new CachePartitionHandlerImp(null, "testCachePartitionHandlerImpDeviceID").getCachePartitionByLUN("testCachePartitionHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetCachePartitionByLUNThrowsIllegalArgumentException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImpDeviceID");
        try {
            cachePartitionHandlerImp.getCachePartitionByLUN("testCachePartitionHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetCachePartitionByLUNThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCachePartitionHandlerImpIp", 100);
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(restRequestHandler, "testCachePartitionHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.getCachePartitionByLUN("testCachePartitionHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "testCachePartitionHandlerImpDeviceID", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertSame("cachePartitionHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new CachePartitionHandlerImp(null, "testCachePartitionHandlerImpDeviceID").get("testCachePartitionHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImpDeviceID");
        try {
            cachePartitionHandlerImp.get("testCachePartitionHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCachePartitionHandlerImpIp", 100);
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(restRequestHandler, "testCachePartitionHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.get("testCachePartitionHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "testCachePartitionHandlerImpDeviceID", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertSame("cachePartitionHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        try {
            new CachePartitionHandlerImp(null, "testCachePartitionHandlerImpDeviceID").modify(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "CACHEPARTITION");
        CachePartitionHandlerImp cachePartitionHandlerImp = (CachePartitionHandlerImp) Mockingbird.getProxyObject(CachePartitionHandlerImp.class, true);
        CachePartitionMO cachePartitionMO = (CachePartitionMO) Mockingbird.getProxyObject(CachePartitionMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(cachePartitionHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "CACHEPARTITION", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(cachePartitionMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.modify(cachePartitionMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertNull("cachePartitionHandlerImp.restRequestHandler", getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImp\rIp", 100), "testCachePartitionHandlerImpDeviceID");
        try {
            cachePartitionHandlerImp.modify(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImpDeviceID");
        CachePartitionMO mo = new CachePartitionMO();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testRemoveAssociateFromLunThrowsApiException() throws Throwable {
        try {
            new CachePartitionHandlerImp(null, "testCachePartitionHandlerImpDeviceID").removeAssociateFromLun("testCachePartitionHandlerImpCachePartitionId", "testCachePartitionHandlerImpLunId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRemoveAssociateFromLunThrowsIllegalArgumentException() throws Throwable {
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(new RestRequestHandler("testCachePartitionHandlerImpIp", 100), "testCachePartitionHandlerImpDeviceID");
        try {
            cachePartitionHandlerImp.removeAssociateFromLun("testCachePartitionHandlerImp\rCachePartitionId", "testCachePartitionHandlerImpLunId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveAssociateFromLunThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCachePartitionHandlerImpIp", 100);
        CachePartitionHandlerImp cachePartitionHandlerImp = new CachePartitionHandlerImp(restRequestHandler, "testCachePartitionHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CachePartitionHandlerImp.class);
        try {
            cachePartitionHandlerImp.removeAssociateFromLun("testCachePartitionHandlerImpCachePartitionId", "testCachePartitionHandlerImpLunId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cachePartitionHandlerImp.deviceID", "testCachePartitionHandlerImpDeviceID", getPrivateField(cachePartitionHandlerImp, "deviceID"));
            assertSame("cachePartitionHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(cachePartitionHandlerImp, "restRequestHandler"));
        }
    }
}

