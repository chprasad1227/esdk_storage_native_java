/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:41:05
 * Time to generate: 00:11.313 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.keydeifines.TLV:aa1fc1c2d75968b31e60ecad59b25f13
 *
 */

package com.huawei.ism.openapi.common.keydeifines;

import com.agitar.lib.junit.AgitarTestCase;

public class TLVAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return TLV.class;
    }
    
    public void testCACHEPARTITIONConstructor() throws Throwable {
        new TLV.CACHEPARTITION();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCMOAlarmInfoEConstructor() throws Throwable {
        new TLV.CMOAlarmInfoE();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCONTROLLERConstructor() throws Throwable {
        new TLV.CONTROLLER();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testConstructor() throws Throwable {
        new TLV();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDHAExportConstructor() throws Throwable {
        new TLV.DHAExport();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDISKConstructor() throws Throwable {
        new TLV.DISK();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testDISKPOOLConstructor() throws Throwable {
        new TLV.DISKPOOL();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testETHPortConstructor() throws Throwable {
        new TLV.ETHPort();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testEnumInfoConstructor() throws Throwable {
        new TLV.EnumInfo();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFCInitiatorConstructor() throws Throwable {
        new TLV.FCInitiator();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFCPortConstructor() throws Throwable {
        new TLV.FCPort();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testFCoEPortConstructor() throws Throwable {
        new TLV.FCoEPort();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHOSTConstructor() throws Throwable {
        new TLV.HOST();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHOSTGROUPConstructor() throws Throwable {
        new TLV.HOSTGROUP();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHostLinkConstructor() throws Throwable {
        new TLV.HostLink();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testISCSIDEVICENAMEConstructor() throws Throwable {
        new TLV.ISCSIDEVICENAME();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testISCSIInitiatorConstructor() throws Throwable {
        new TLV.ISCSIInitiator();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testISCSILinkConstructor() throws Throwable {
        new TLV.ISCSILink();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLDAPCONFIGConstructor() throws Throwable {
        new TLV.LDAPCONFIG();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLDAPUserMapConstructor() throws Throwable {
        new TLV.LDAPUserMap();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLOGININFOConstructor() throws Throwable {
        new TLV.LOGININFO();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLUNConstructor() throws Throwable {
        new TLV.LUN();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLUNDESTROYDATAConstructor() throws Throwable {
        new TLV.LUNDESTROYDATA();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLUNGROUPConstructor() throws Throwable {
        new TLV.LUNGROUP();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLUNMigrationConstructor() throws Throwable {
        new TLV.LUNMigration();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testLicensePathConstructor() throws Throwable {
        new TLV.LicensePath();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testMAPPINGVIEWConstructor() throws Throwable {
        new TLV.MAPPINGVIEW();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPCIEPortConstructor() throws Throwable {
        new TLV.PCIEPort();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPORTGROUPConstructor() throws Throwable {
        new TLV.PORTGROUP();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPOWERONRESULTConstructor() throws Throwable {
        new TLV.POWERONRESULT();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPeformanceStatisticStrategyConstructor() throws Throwable {
        new TLV.PeformanceStatisticStrategy();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPerformanceStatisticConstructor() throws Throwable {
        new TLV.PerformanceStatistic();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testPerformanceStatisticSwitchConstructor() throws Throwable {
        new TLV.PerformanceStatisticSwitch();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSASPortConstructor() throws Throwable {
        new TLV.SASPort();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSCHEDULEConstructor() throws Throwable {
        new TLV.SCHEDULE();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSNAPSHOTBATCHOPERATIONConstructor() throws Throwable {
        new TLV.SNAPSHOTBATCHOPERATION();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSNAPSHOTConstructor() throws Throwable {
        new TLV.SNAPSHOT();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSTORAGEPOOLConstructor() throws Throwable {
        new TLV.STORAGEPOOL();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSYSTEMConstructor() throws Throwable {
        new TLV.SYSTEM();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSerialPortConstructor() throws Throwable {
        new TLV.SerialPort();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSysStatusConstructor() throws Throwable {
        new TLV.SysStatus();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSystemDSTConfigConstructor() throws Throwable {
        new TLV.SystemDSTConfig();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSystemTimezoneConstructor() throws Throwable {
        new TLV.SystemTimezone();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testSystemUTCTimeConstructor() throws Throwable {
        new TLV.SystemUTCTime();
        assertTrue("Test call resulted in expected outcome", true);
    }
}

