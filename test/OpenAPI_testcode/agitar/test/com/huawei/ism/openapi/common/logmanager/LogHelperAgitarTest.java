/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:33:51
 * Time to generate: 00:17.359 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.logmanager.LogHelper:bc35f7b4eca320d7b088c5db7f7f7f7f
 *
 */

package com.huawei.ism.openapi.common.logmanager;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;

public class LogHelperAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LogHelper.class;
    }
    
    public void testConstructor() throws Throwable {
        callPrivateMethod("com.huawei.ism.openapi.common.logmanager.LogHelper", "<init>", new Class[] {}, null, new Object[] {});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testGetCurTime() throws Throwable {
        LogHelper logHelper = (LogHelper) callPrivateMethod("com.huawei.ism.openapi.common.logmanager.LogHelper", "<init>", new Class[] {}, null, new Object[] {});
        logHelper.getCurTime();
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetFileLineMethod() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        logHelperInstance.getFileLineMethod(0);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetFileName() throws Throwable {
        LogHelper logHelper = (LogHelper) callPrivateMethod("com.huawei.ism.openapi.common.logmanager.LogHelper", "<init>", new Class[] {}, null, new Object[] {});
        String result = logHelper.getFileName(0);
        assertNull("result", result);
    }
    
    public void testGetLineNumber() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        logHelperInstance.getLineNumber(0);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetLogHelperInstance() throws Throwable {
        LogHelper result = LogHelper.getLogHelperInstance();
        assertNotNull("result", result);
    }
    
    public void testGetLogHelperInstance1() throws Throwable {
        storeStaticField(LogHelper.class, "logHelperInstanceHelper");
        Mockingbird.enterRecordingMode();
        Mockingbird.replaceObjectForRecording(LogHelper.class, "<init>()", Mockingbird.getProxyObject(LogHelper.class, true));
        setPrivateField(LogHelper.class, "logHelperInstanceHelper", null);
        Mockingbird.enterTestMode(LogHelper.class);
        LogHelper result = LogHelper.getLogHelperInstance();
        assertNotNull("result", result);
        assertNotNull("LogHelper.logHelperInstanceHelper", getPrivateField(LogHelper.class, "logHelperInstanceHelper"));
    }
    
    public void testGetMethodName() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        logHelperInstance.getMethodName(0);
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetStackTrace() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        ApiMessage msg = new ApiMessage(100L, "testLogHelperErrDescription", "testLogHelperErrSuggestion");
        ApiException e = new ApiException(msg);
        StackTraceElement[] stackTraceElements = new StackTraceElement[0];
        e.setStackTrace(stackTraceElements);
        String result = logHelperInstance.getStackTrace(e);
        assertEquals("result", "Exception msg: testLogHelperErrDescription\n", result);
    }
    
    public void testGetStackTrace1() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        ApiMessage msg = new ApiMessage(100L, "testLogHelperErrDescription", "testLogHelperErrSuggestion");
        logHelperInstance.getStackTrace(new ApiException(msg));
        assertTrue("Test call resulted in expected outcome", true);
        // dependencies on static and environment state led to removal of 1 assertion
    }
    
    public void testGetFileLineMethodThrowsArrayIndexOutOfBoundsException() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        try {
            logHelperInstance.getFileLineMethod(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(LogHelper.class, ex);
        }
    }
    
    public void testGetFileNameThrowsArrayIndexOutOfBoundsException() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        try {
            logHelperInstance.getFileName(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(LogHelper.class, ex);
        }
    }
    
    public void testGetLineNumberThrowsArrayIndexOutOfBoundsException() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        try {
            logHelperInstance.getLineNumber(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(LogHelper.class, ex);
        }
    }
    
    public void testGetMethodNameThrowsArrayIndexOutOfBoundsException() throws Throwable {
        LogHelper logHelperInstance = LogHelper.getLogHelperInstance();
        try {
            logHelperInstance.getMethodName(100);
            fail("Expected ArrayIndexOutOfBoundsException to be thrown");
        } catch (ArrayIndexOutOfBoundsException ex) {
            assertEquals("ex.getMessage()", "100", ex.getMessage());
            assertThrownBy(LogHelper.class, ex);
        }
    }
    
    public void testGetStackTraceThrowsNullPointerException() throws Throwable {
        LogHelper logHelper = (LogHelper) callPrivateMethod("com.huawei.ism.openapi.common.logmanager.LogHelper", "<init>", new Class[] {}, null, new Object[] {});
        try {
            logHelper.getStackTrace(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LogHelper.class, ex);
        }
    }
}

