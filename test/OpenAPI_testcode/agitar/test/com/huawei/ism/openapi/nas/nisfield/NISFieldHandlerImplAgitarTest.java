/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:38:35
 * Time to generate: 01:24.844 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.nas.nisfield.NISFieldHandlerImpl:56fb2dbeb1499fe07a311c6730d2eb60
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.nas.nisfield;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import org.json.JSONException;
import org.json.JSONObject;

public class NISFieldHandlerImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return NISFieldHandlerImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testNISFieldHandlerImplIp", 100);
        NISFieldHandlerImpl nISFieldHandlerImpl = new NISFieldHandlerImpl(restRequestHandler, "testNISFieldHandlerImplDeviceID");
        assertEquals("nISFieldHandlerImpl.deviceID", "testNISFieldHandlerImplDeviceID", getPrivateField(nISFieldHandlerImpl, "deviceID"));
        assertSame("nISFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(nISFieldHandlerImpl, "restRequestHandler"));
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        NISFieldHandlerImpl nISFieldHandlerImpl = (NISFieldHandlerImpl) Mockingbird.getProxyObject(NISFieldHandlerImpl.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(nISFieldHandlerImpl, "deviceID", "");
        setPrivateField(nISFieldHandlerImpl, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), null);
        Mockingbird.enterTestMode(NISFieldHandlerImpl.class);
        NISFieldMO result = nISFieldHandlerImpl.get();
        assertNull("result", result);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "NAS_NIS_FIELD");
        NISFieldHandlerImpl nISFieldHandlerImpl = (NISFieldHandlerImpl) Mockingbird.getProxyObject(NISFieldHandlerImpl.class, true);
        NISFieldMO nISFieldMO = (NISFieldMO) Mockingbird.getProxyObject(NISFieldMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(nISFieldHandlerImpl, "deviceID", "");
        setPrivateField(nISFieldHandlerImpl, "restRequestHandler", null);
        setPrivateField(nISFieldMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mO, "properties", null);
        setPrivateField(MOType.class, "NAS_NIS_FIELD", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(NISFieldHandlerImpl.class);
        nISFieldHandlerImpl.modify(nISFieldMO);
        assertEquals("nISFieldHandlerImpl.deviceID", "", getPrivateField(nISFieldHandlerImpl, "deviceID"));
        assertNull("nISFieldHandlerImpl.restRequestHandler", getPrivateField(nISFieldHandlerImpl, "restRequestHandler"));
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new NISFieldHandlerImpl(null, "testNISFieldHandlerImplDeviceID").get();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        NISFieldHandlerImpl nISFieldHandlerImpl = new NISFieldHandlerImpl(new RestRequestHandler("testNISFieldHandlerImplIp", 100), "testNISFieldHandlerImpl\rDeviceID");
        try {
            nISFieldHandlerImpl.get();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testNISFieldHandlerImplIp", 100);
        NISFieldHandlerImpl nISFieldHandlerImpl = new NISFieldHandlerImpl(restRequestHandler, "testNISFieldHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(NISFieldHandlerImpl.class);
        try {
            nISFieldHandlerImpl.get();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("nISFieldHandlerImpl.deviceID", "testNISFieldHandlerImplDeviceID", getPrivateField(nISFieldHandlerImpl, "deviceID"));
            assertSame("nISFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(nISFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        try {
            new NISFieldHandlerImpl(null, "testNISFieldHandlerImplDeviceID").modify(new NISFieldMO(new JSONObject()));
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "NAS_NIS_FIELD");
        NISFieldHandlerImpl nISFieldHandlerImpl = (NISFieldHandlerImpl) Mockingbird.getProxyObject(NISFieldHandlerImpl.class, true);
        NISFieldMO nISFieldMO = (NISFieldMO) Mockingbird.getProxyObject(NISFieldMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(nISFieldHandlerImpl, "deviceID", "");
        setPrivateField(nISFieldMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mO, "properties", null);
        setPrivateField(MOType.class, "NAS_NIS_FIELD", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(NISFieldHandlerImpl.class);
        try {
            nISFieldHandlerImpl.modify(nISFieldMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("nISFieldHandlerImpl.deviceID", "", getPrivateField(nISFieldHandlerImpl, "deviceID"));
            assertNull("nISFieldHandlerImpl.restRequestHandler", getPrivateField(nISFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        NISFieldHandlerImpl nISFieldHandlerImpl = new NISFieldHandlerImpl(new RestRequestHandler("testNISFieldHandlerImpl\rIp", 100), "testNISFieldHandlerImplDeviceID");
        try {
            nISFieldHandlerImpl.modify(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testNISFieldHandlerImplIp", 100);
        NISFieldHandlerImpl nISFieldHandlerImpl = new NISFieldHandlerImpl(restRequestHandler, "testNISFieldHandlerImplDeviceID");
        NISFieldMO mo = new NISFieldMO(new MO(new JSONObject(new HashMap(100, 100.0F))));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(NISFieldHandlerImpl.class);
        try {
            nISFieldHandlerImpl.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("nISFieldHandlerImpl.deviceID", "testNISFieldHandlerImplDeviceID", getPrivateField(nISFieldHandlerImpl, "deviceID"));
            assertSame("nISFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(nISFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testNISFieldHandlerImplIp", 100);
        NISFieldHandlerImpl nISFieldHandlerImpl = new NISFieldHandlerImpl(restRequestHandler, "testNISFieldHandlerImplDeviceID");
        NISFieldMO mo = new NISFieldMO(new MO(new JSONObject()));
        Mockingbird.enterRecordingMode();
        ((OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class)).composeFromMap(null, null);
        Mockingbird.setExceptionForVoid(true, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(NISFieldHandlerImpl.class);
        try {
            nISFieldHandlerImpl.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("nISFieldHandlerImpl.deviceID", "testNISFieldHandlerImplDeviceID", getPrivateField(nISFieldHandlerImpl, "deviceID"));
            assertSame("nISFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(nISFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsNullPointerException2() throws Throwable {
        NISFieldHandlerImpl nISFieldHandlerImpl = new NISFieldHandlerImpl(new RestRequestHandler("testNISFieldHandlerImplIp", 100), "testNISFieldHandlerImplDeviceID");
        try {
            nISFieldHandlerImpl.modify(new NISFieldMO((MO) null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(NISFieldHandlerImpl.class, ex);
        }
    }
}

