/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:34:50
 * Time to generate: 01:20.219 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.nas.ldapfield.LDAPFieldHandlerImpl:06bd7318ec03ce8713864fc24be8e220
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.nas.ldapfield;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import org.apache.http.client.ClientProtocolException;
import org.json.JSONException;
import org.json.JSONObject;

public class LDAPFieldHandlerImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LDAPFieldHandlerImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLDAPFieldHandlerImplIp", 100);
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(restRequestHandler, "testLDAPFieldHandlerImplDeviceID");
        assertEquals("lDAPFieldHandlerImpl.deviceID", "testLDAPFieldHandlerImplDeviceID", getPrivateField(lDAPFieldHandlerImpl, "deviceID"));
        assertSame("lDAPFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(lDAPFieldHandlerImpl, "restRequestHandler"));
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = (LDAPFieldHandlerImpl) Mockingbird.getProxyObject(LDAPFieldHandlerImpl.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lDAPFieldHandlerImpl, "deviceID", "");
        setPrivateField(lDAPFieldHandlerImpl, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), null);
        Mockingbird.enterTestMode(LDAPFieldHandlerImpl.class);
        LDAPFieldMO result = lDAPFieldHandlerImpl.get();
        assertNull("result", result);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "NAS_LDAP_FIELD");
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = (LDAPFieldHandlerImpl) Mockingbird.getProxyObject(LDAPFieldHandlerImpl.class, true);
        LDAPFieldMO lDAPFieldMO = (LDAPFieldMO) Mockingbird.getProxyObject(LDAPFieldMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lDAPFieldHandlerImpl, "deviceID", "");
        setPrivateField(lDAPFieldHandlerImpl, "restRequestHandler", null);
        setPrivateField(lDAPFieldMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mO, "properties", null);
        setPrivateField(MOType.class, "NAS_LDAP_FIELD", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(LDAPFieldHandlerImpl.class);
        lDAPFieldHandlerImpl.modify(lDAPFieldMO);
        assertEquals("lDAPFieldHandlerImpl.deviceID", "", getPrivateField(lDAPFieldHandlerImpl, "deviceID"));
        assertNull("lDAPFieldHandlerImpl.restRequestHandler", getPrivateField(lDAPFieldHandlerImpl, "restRequestHandler"));
    }
    
    public void testGetThrowsApiException() throws Throwable {
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(new RestRequestHandler("/deviceManager(rest", 100), "testLDAPFieldHandlerImplDeviceID");
        try {
            lDAPFieldHandlerImpl.get();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManager(rest:100/deviceManager/rest/testLDAPFieldHandlerImplDeviceID/SNAS_LDAP_CONFIG/single", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManager(rest:100/deviceManager/rest/testLDAPFieldHandlerImplDeviceID/SNAS_LDAP_CONFIG/single", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(new RestRequestHandler("testLDAPFieldHandlerImplIp", 100), "testLDAPFieldHandlerImpl\rDeviceID");
        try {
            lDAPFieldHandlerImpl.get();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLDAPFieldHandlerImplIp", 100);
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(restRequestHandler, "testLDAPFieldHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LDAPFieldHandlerImpl.class);
        try {
            lDAPFieldHandlerImpl.get();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lDAPFieldHandlerImpl.deviceID", "testLDAPFieldHandlerImplDeviceID", getPrivateField(lDAPFieldHandlerImpl, "deviceID"));
            assertSame("lDAPFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(lDAPFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(new RestRequestHandler("/deviceManager(rest", 100), "testLDAPFieldHandlerImplDeviceID");
        try {
            lDAPFieldHandlerImpl.modify(new LDAPFieldMO());
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManager(rest:100/deviceManager/rest/testLDAPFieldHandlerImplDeviceID/SNAS_LDAP_CONFIG/single", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManager(rest:100/deviceManager/rest/testLDAPFieldHandlerImplDeviceID/SNAS_LDAP_CONFIG/single", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "NAS_LDAP_FIELD");
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = (LDAPFieldHandlerImpl) Mockingbird.getProxyObject(LDAPFieldHandlerImpl.class, true);
        LDAPFieldMO lDAPFieldMO = (LDAPFieldMO) Mockingbird.getProxyObject(LDAPFieldMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(lDAPFieldHandlerImpl, "deviceID", "");
        setPrivateField(lDAPFieldMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mO, "properties", null);
        setPrivateField(MOType.class, "NAS_LDAP_FIELD", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(LDAPFieldHandlerImpl.class);
        try {
            lDAPFieldHandlerImpl.modify(lDAPFieldMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("lDAPFieldHandlerImpl.deviceID", "", getPrivateField(lDAPFieldHandlerImpl, "deviceID"));
            assertNull("lDAPFieldHandlerImpl.restRequestHandler", getPrivateField(lDAPFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(new RestRequestHandler("testLDAPFieldHandlerImplIp", 100), "testLDAPFieldHandlerImpl\rDeviceID");
        try {
            lDAPFieldHandlerImpl.modify(new LDAPFieldMO(new MO(new JSONObject())));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLDAPFieldHandlerImplIp", 100);
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(restRequestHandler, "testLDAPFieldHandlerImplDeviceID");
        LDAPFieldMO mo = new LDAPFieldMO(new MO(new JSONObject()));
        Mockingbird.enterRecordingMode();
        ((OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class)).composeFromMap(null, null);
        Mockingbird.setExceptionForVoid(true, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LDAPFieldHandlerImpl.class);
        try {
            lDAPFieldHandlerImpl.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lDAPFieldHandlerImpl.deviceID", "testLDAPFieldHandlerImplDeviceID", getPrivateField(lDAPFieldHandlerImpl, "deviceID"));
            assertSame("lDAPFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(lDAPFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLDAPFieldHandlerImplIp", 100);
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(restRequestHandler, "testLDAPFieldHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LDAPFieldHandlerImpl.class);
        try {
            lDAPFieldHandlerImpl.modify(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lDAPFieldHandlerImpl.deviceID", "testLDAPFieldHandlerImplDeviceID", getPrivateField(lDAPFieldHandlerImpl, "deviceID"));
            assertSame("lDAPFieldHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(lDAPFieldHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsNullPointerException2() throws Throwable {
        LDAPFieldHandlerImpl lDAPFieldHandlerImpl = new LDAPFieldHandlerImpl(new RestRequestHandler("testLDAPFieldHandlerImplIp", 100), "testLDAPFieldHandlerImplDeviceID");
        try {
            lDAPFieldHandlerImpl.modify(new LDAPFieldMO((MO) null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(LDAPFieldHandlerImpl.class, ex);
        }
    }
}

