/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:39:33
 * Time to generate: 00:53.062 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.snapshot.SnapshotIterator:6acdccca5b6f51eb17d38c30b8899398
 * agitar.src.md5=com.huawei.ism.openapi.common.batchquery.ApiIterator:592fbb87e71ade6d26e6fe9200d66392
 *
 */

package com.huawei.ism.openapi.snapshot;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.batchquery.ApiIterator;
import com.huawei.ism.openapi.common.batchquery.QueryBase;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.json.JSONObject;

public class SnapshotIteratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SnapshotIterator.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testSnapshotIteratorIp", 100);
        SnapshotQuery queryCondition = new SnapshotQuery(new SnapshotMO(new JSONObject()), 100L, 1000L);
        SnapshotIterator snapshotIterator = new SnapshotIterator(restRequestHandler, "testSnapshotIteratorDeviceID", queryCondition);
        assertNull("snapshotIterator.headerMap", getPrivateField(snapshotIterator, "headerMap"));
        assertEquals("snapshotIterator.totalCount", 0L, ((Number) getPrivateField(snapshotIterator, "totalCount")).longValue());
        assertSame("snapshotIterator.restRequestHandler", restRequestHandler, getPrivateField(snapshotIterator, "restRequestHandler"));
        assertEquals("snapshotIterator.curIndex", 100L, ((Number) getPrivateField(snapshotIterator, "curIndex")).longValue());
        assertEquals("snapshotIterator.deviceID", "testSnapshotIteratorDeviceID", getPrivateField(snapshotIterator, "deviceID"));
        assertSame("snapshotIterator.getQuery()", queryCondition, snapshotIterator.getQuery());
    }
    
    public void testGetConcretBatchNextWithAggressiveMocks() throws Throwable {
        SnapshotIterator snapshotIterator = (SnapshotIterator) Mockingbird.getProxyObject(SnapshotIterator.class, true);
        QueryBase queryBase = (QueryBase) Mockingbird.getProxyObject(QueryBase.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(snapshotIterator, "deviceID", "");
        setPrivateField(snapshotIterator, "curIndex", new Long(0L));
        setPrivateField(snapshotIterator, "queryCondition", queryBase);
        setPrivateField(snapshotIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.enterNormalMode();
        queryBase.setCount(0L);
        callPrivateMethod("com.huawei.ism.openapi.common.batchquery.QueryBase", "setConcretQueryMO", new Class[] {Object.class}, queryBase, new Object[] {obj});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, snapshotIterator, "getHeadMap", "(java.lang.Object)java.util.Map", null, 1);
        Mockingbird.setReturnValue(openApiUtils2.convertToStringMaps(null), null);
        hashMap.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(SnapshotIterator.class);
        List result = snapshotIterator.getConcretBatchNext();
        assertNull("result", result);
        assertNull("snapshotIterator.headerMap", getPrivateField(snapshotIterator, "headerMap"));
    }
    
    public void testGetConcretCountWithAggressiveMocks() throws Throwable {
        SnapshotIterator snapshotIterator = (SnapshotIterator) Mockingbird.getProxyObject(SnapshotIterator.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        SnapshotMO snapshotMO = (SnapshotMO) Mockingbird.getProxyObject(SnapshotMO.class);
        setPrivateField(snapshotIterator, "deviceID", "");
        setPrivateField(snapshotIterator, "queryCondition", null);
        setPrivateField(snapshotIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), snapshotMO);
        Mockingbird.setReturnValue(snapshotMO.getCount(), new Long(0L));
        Mockingbird.enterTestMode(SnapshotIterator.class);
        long result = snapshotIterator.getConcretCount();
        assertEquals("result", 0L, result);
        assertNull("snapshotIterator.headerMap", getPrivateField(snapshotIterator, "headerMap"));
    }
    
    public void testGetConcretFilterHeaders() throws Throwable {
        SnapshotIterator snapshotIterator = new SnapshotIterator(null, "testSnapshotIteratorDeviceID", new SnapshotQuery(new SnapshotMO(), 100L, 1000L));
        String[] result = snapshotIterator.getConcretFilterHeaders();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", "PARENTID", result[0]);
    }
    
    public void testGetConcretMoMap() throws Throwable {
        SnapshotIterator snapshotIterator = new SnapshotIterator(null, "testSnapshotIteratorDeviceID", new SnapshotQuery(new SnapshotMO(), 100L, 1000L));
        Map result = snapshotIterator.getConcretMoMap((SnapshotMO) null);
        assertNull("result", result);
    }
    
    public void testGetConcretMoMap1() throws Throwable {
        SnapshotIterator snapshotIterator = new SnapshotIterator(new RestRequestHandler("testSnapshotIteratorIp", 100), "testSnapshotIteratorDeviceID", new SnapshotQuery(null, 100L, 1000L));
        ConcurrentHashMap result = (ConcurrentHashMap) snapshotIterator.getConcretMoMap(new SnapshotMO(new MO()));
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetConcretBatchNextThrowsApiException() throws Throwable {
        MO mo = new MO();
        Map propertyMap = new HashMap(100, 100.0F);
        propertyMap.put("", "testString");
        mo.setProperty((Map) propertyMap);
        SnapshotQuery queryCondition = new SnapshotQuery(null, 100L, 1000L);
        queryCondition.setSnapshotMO(new SnapshotMO(mo));
        SnapshotIterator snapshotIterator = new SnapshotIterator(null, "testSnapshotIteratorDeviceID", queryCondition);
        try {
            snapshotIterator.getConcretBatchNext();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("snapshotIterator.headerMap.size()", 0, ((Map) getPrivateField(snapshotIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException() throws Throwable {
        MO mo = new MO();
        Map propertyMap = new HashMap(100, 100.0F);
        propertyMap.put("", "testString");
        mo.setProperty((Map) propertyMap);
        SnapshotIterator snapshotIterator = new SnapshotIterator(new RestRequestHandler("testSnapshotIteratorIp", 100), "testSnapshotIterator\rDeviceID", new SnapshotQuery(new SnapshotMO(mo), 100L, 1000L));
        try {
            snapshotIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("snapshotIterator.headerMap.size()", 0, ((Map) getPrivateField(snapshotIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testSnapshotIteratorKey", true);
        SnapshotIterator snapshotIterator = new SnapshotIterator(new RestRequestHandler("testSnapshotIteratorIp", 100), "testSnapshotIteratorDeviceID", new SnapshotQuery(new SnapshotMO(jObject), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(SnapshotIterator.class);
        try {
            snapshotIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("snapshotIterator.headerMap.size()", 0, ((Map) getPrivateField(snapshotIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsIllegalArgumentException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testSnapshotIteratorKey", 100L);
        jObject.put("testSnapshotIteratorKey1", "");
        jObject.putOpt("testSnapshotIteratorKey", null);
        SnapshotIterator snapshotIterator = new SnapshotIterator(new RestRequestHandler("testSnapshotIteratorIp", 100), "testSnapshotIterator\rDeviceID", new SnapshotQuery(new SnapshotMO(jObject), 100L, 1000L));
        try {
            snapshotIterator.getConcretCount();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("snapshotIterator.headerMap.size()", 0, ((Map) getPrivateField(snapshotIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException() throws Throwable {
        SnapshotQuery queryCondition = (SnapshotQuery) Mockingbird.getProxyObject(SnapshotQuery.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(queryCondition.getBeginIndex(), 2L);
        Mockingbird.enterTestMode(SnapshotIterator.class);
        SnapshotIterator snapshotIterator = new SnapshotIterator(null, "testSnapshotIteratorDeviceID", queryCondition);
        Mockingbird.enterRecordingMode();
        SnapshotMO snapshotMO = (SnapshotMO) Mockingbird.getProxyObject(SnapshotMO.class);
        Object concretMO = callPrivateMethod("com.huawei.ism.openapi.common.batchquery.QueryBase", "getConcretMO", new Class[] {}, queryCondition, new Object[] {});
        Mockingbird.setReturnValue(concretMO, snapshotMO);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        Mockingbird.setReturnValue(snapshotMO.getMO(), mO);
        Map concurrentHashMap = (Map) Mockingbird.getProxyObject(Map.class);
        Mockingbird.setReturnValue(mO.getProperties(), concurrentHashMap);
        Set abstractSet = (Set) Mockingbird.getProxyObject(Set.class);
        Mockingbird.setReturnValue(false, concurrentHashMap, "entrySet", "()java.util.Set", new Object[] {}, abstractSet, 1);
        Iterator iterator = (Iterator) Mockingbird.getProxyObject(Iterator.class);
        Mockingbird.setReturnValue(false, abstractSet, "iterator", "()java.util.Iterator", new Object[] {}, iterator, 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        AbstractMap.SimpleEntry simpleEntry = (AbstractMap.SimpleEntry) Mockingbird.getProxyObject(AbstractMap.SimpleEntry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, simpleEntry, 1);
        Mockingbird.setReturnValue(false, simpleEntry, "getKey", "()java.lang.Object", new Object[] {}, "1f", 1);
        Mockingbird.setReturnValue(false, "1f", "toString", "()java.lang.String", new Object[] {}, "1f", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        AbstractMap.SimpleEntry simpleEntry2 = (AbstractMap.SimpleEntry) Mockingbird.getProxyObject(AbstractMap.SimpleEntry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, simpleEntry2, 1);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.setReturnValue(false, simpleEntry2, "getKey", "()java.lang.Object", new Object[] {}, obj, 1);
        Mockingbird.setReturnValue(false, obj, "toString", "()java.lang.String", new Object[] {}, "java.lang.Object@19e9da7", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        AbstractMap.SimpleEntry simpleEntry3 = (AbstractMap.SimpleEntry) Mockingbird.getProxyObject(AbstractMap.SimpleEntry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, simpleEntry3, 1);
        Integer integer = new Integer(33);
        Mockingbird.setReturnValue(false, simpleEntry3, "getKey", "()java.lang.Object", new Object[] {}, integer, 1);
        Mockingbird.setReturnValue(false, integer, "toString", "()java.lang.String", new Object[] {}, "33", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        AbstractMap.SimpleEntry simpleEntry4 = (AbstractMap.SimpleEntry) Mockingbird.getProxyObject(AbstractMap.SimpleEntry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, simpleEntry4, 1);
        Integer integer2 = new Integer(0);
        Mockingbird.setReturnValue(false, simpleEntry4, "getKey", "()java.lang.Object", new Object[] {}, integer2, 1);
        Mockingbird.setReturnValue(false, integer2, "toString", "()java.lang.String", new Object[] {}, "0", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        AbstractMap.SimpleEntry simpleEntry5 = (AbstractMap.SimpleEntry) Mockingbird.getProxyObject(AbstractMap.SimpleEntry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, simpleEntry5, 1);
        Mockingbird.setReturnValue(false, simpleEntry5, "getKey", "()java.lang.Object", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, "", "toString", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.TRUE, 1);
        AbstractMap.SimpleEntry simpleEntry6 = (AbstractMap.SimpleEntry) Mockingbird.getProxyObject(AbstractMap.SimpleEntry.class);
        Mockingbird.setReturnValue(false, iterator, "next", "()java.util.Map$Entry", new Object[] {}, simpleEntry6, 1);
        Mockingbird.setReturnValue(false, simpleEntry6, "getKey", "()java.lang.Object", new Object[] {}, "null", 1);
        Mockingbird.setReturnValue(false, "null", "toString", "()java.lang.String", new Object[] {}, "null", 1);
        Mockingbird.setReturnValue(false, iterator, "hasNext", "()boolean", new Object[] {}, Boolean.FALSE, 1);
        Mockingbird.enterTestMode(SnapshotIterator.class);
        try {
            snapshotIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ApiIterator.class, ex);
            assertNull("snapshotIterator.headerMap", getPrivateField(snapshotIterator, "headerMap"));
        }
    }
    
    public void testGetConcretMoMapThrowsNullPointerException() throws Throwable {
        SnapshotMO modelMo = new SnapshotMO((MO) null);
        SnapshotIterator snapshotIterator = new SnapshotIterator(new RestRequestHandler("testSnapshotIteratorIp", 100), "testSnapshotIteratorDeviceID", null);
        try {
            snapshotIterator.getConcretMoMap(modelMo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotIterator.class, ex);
        }
    }
}

