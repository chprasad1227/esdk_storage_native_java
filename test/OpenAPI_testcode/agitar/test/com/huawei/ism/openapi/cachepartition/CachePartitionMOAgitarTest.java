/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:27:22
 * Time to generate: 00:35.937 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.cachepartition.CachePartitionMO:46a2364f3287abff86a2855c151153a7
 *
 */

package com.huawei.ism.openapi.cachepartition;

import com.agitar.lib.junit.AgitarTestCase;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import java.util.HashMap;
import org.json.JSONObject;

public class CachePartitionMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CachePartitionMO.class;
    }
    
    public void testConstructor() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetCount() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        Long result = cachePartitionMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetDescription() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setDescription("testCachePartitionMODescription");
        String result = cachePartitionMO.getDescription();
        assertEquals("result", "testCachePartitionMODescription", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetDescription1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        String result = cachePartitionMO.getDescription();
        assertNull("result", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetExpectReadSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setExpectReadSize(new Long(0L));
        Long result = cachePartitionMO.getExpectReadSize();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetExpectReadSize1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        Long result = cachePartitionMO.getExpectReadSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetExpectWriteSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject());
        cachePartitionMO.setExpectWriteSize(new Long(0L));
        Long result = cachePartitionMO.getExpectWriteSize();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetExpectWriteSize1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        Long result = cachePartitionMO.getExpectWriteSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetId() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        String result = cachePartitionMO.getId();
        assertNull("result", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetId1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setId("testCachePartitionMOId");
        String result = cachePartitionMO.getId();
        assertEquals("result", "testCachePartitionMOId", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        MO result = cachePartitionMO.getMO();
        assertEquals("result.getProperties().size()", 2, result.getProperties().size());
    }
    
    public void testGetMaxReadSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject());
        Long result = cachePartitionMO.getMaxReadSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMaxReadSize1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setMaxReadSize(new Long(0L));
        Long result = cachePartitionMO.getMaxReadSize();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMaxWriteSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        Long result = cachePartitionMO.getMaxWriteSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMaxWriteSize1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject(new HashMap(100, 100.0F)));
        cachePartitionMO.setMaxWriteSize(new Long(0L));
        Long result = cachePartitionMO.getMaxWriteSize();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMinReadSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setMinReadSize(new Long(0L));
        Long result = cachePartitionMO.getMinReadSize();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMinReadSize1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        Long result = cachePartitionMO.getMinReadSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMinWriteSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setMinWriteSize(new Long(0L));
        Long result = cachePartitionMO.getMinWriteSize();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetMinWriteSize1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        Long result = cachePartitionMO.getMinWriteSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetName() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject());
        String result = cachePartitionMO.getName();
        assertNull("result", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetName1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject());
        cachePartitionMO.setName("testCachePartitionMOName");
        String result = cachePartitionMO.getName();
        assertEquals("result", "testCachePartitionMOName", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetParentId() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        String result = cachePartitionMO.getParentId();
        assertNull("result", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetParentId1() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setParentId("testCachePartitionMOId");
        String result = cachePartitionMO.getParentId();
        assertEquals("result", "testCachePartitionMOId", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testGetParentType() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        MOType result = cachePartitionMO.getParentType();
        assertEquals("result", MOType.STORAGEENGINE, result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testIsDefault() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        Boolean result = cachePartitionMO.isDefault();
        assertFalse("result", result.booleanValue());
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetDescription() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setDescription("testCachePartitionMODescription");
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("DESCRIPTION");
        assertEquals("cachePartitionMO.mo.getProperties().get(\"DESCRIPTION\")", "testCachePartitionMODescription", actual);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetExpectReadSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setExpectReadSize(new Long(-100L));
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("EXPECTREADSIZE");
        assertEquals("cachePartitionMO.mo.getProperties().get(\"EXPECTREADSIZE\")", new Long(-100L), actual);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetExpectWriteSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setExpectWriteSize(new Long(126L));
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("EXPECTWRITESIZE");
        assertEquals("cachePartitionMO.mo.getProperties().get(\"EXPECTWRITESIZE\")", new Long(126L), actual);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetId() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setId("testCachePartitionMOId");
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        assertEquals("cachePartitionMO.mo.getProperties().get(\"ID\")", "testCachePartitionMOId", ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("ID"));
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetMaxReadSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject());
        cachePartitionMO.setMaxReadSize(new Long(0L));
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("MAXREADSIZE");
        assertEquals("cachePartitionMO.mo.getProperties().get(\"MAXREADSIZE\")", new Long(0L), actual);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetMaxWriteSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setMaxWriteSize(new Long(100L));
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("MAXWRITESIZE");
        assertEquals("cachePartitionMO.mo.getProperties().get(\"MAXWRITESIZE\")", new Long(100L), actual);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetMinReadSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO(new JSONObject());
        cachePartitionMO.setMinReadSize(new Long(0L));
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("MINREADSIZE");
        assertEquals("cachePartitionMO.mo.getProperties().get(\"MINREADSIZE\")", new Long(0L), actual);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetMinWriteSize() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setMinWriteSize(new Long(0L));
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("MINWRITESIZE");
        assertEquals("cachePartitionMO.mo.getProperties().get(\"MINWRITESIZE\")", new Long(0L), actual);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetName() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setName("testCachePartitionMOName");
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        assertEquals("cachePartitionMO.mo.getProperties().get(\"NAME\")", "testCachePartitionMOName", ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("NAME"));
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetParentId() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setParentId("testCachePartitionMOId");
        assertEquals("cachePartitionMO.mo.getProperties().size()", 3, ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().size());
        assertEquals("cachePartitionMO.mo.getProperties().get(\"PARENTID\")", "testCachePartitionMOId", ((MO) getPrivateField(cachePartitionMO, "mo")).getProperties().get("PARENTID"));
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetParentName() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        String result = cachePartitionMO.setParentName();
        assertNull("result", result);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetParentType() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        cachePartitionMO.setParentType(MOType.STORAGEENGINE);
        assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setDescription(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetExpectReadSizeThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setExpectReadSize(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetExpectWriteSizeThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setExpectWriteSize(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetMaxReadSizeThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setMaxReadSize(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetMaxWriteSizeThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setMaxWriteSize(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetMinReadSizeThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setMinReadSize(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetMinWriteSizeThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setMinWriteSize(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetParentIdThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setParentId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
    
    public void testSetParentTypeThrowsNullPointerException() throws Throwable {
        CachePartitionMO cachePartitionMO = new CachePartitionMO();
        try {
            cachePartitionMO.setParentType(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CachePartitionMO.class, ex);
            assertNotNull("cachePartitionMO.mo", getPrivateField(cachePartitionMO, "mo"));
        }
    }
}

