/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:32:58
 * Time to generate: 00:13.140 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.commu.http.HttpClientFactory:640bedeb4b3e0c3690687fd4fd35ef27
 *
 */

package com.huawei.ism.openapi.common.commu.http;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLContext;
import javax.net.ssl.X509TrustManager;
import org.apache.http.impl.client.DefaultHttpClient;

public class HttpClientFactoryAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HttpClientFactory.class;
    }
    
    public void testConstructor() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        X509Certificate[] acceptedIssuers = ((X509TrustManager) getPrivateField(httpClientFactory, "manager")).getAcceptedIssuers();
        assertEquals("httpClientFactory.manager.getAcceptedIssuers().length", 0, acceptedIssuers.length);
        assertEquals("httpClientFactory.connectTimeOut", 10000, ((Number) getPrivateField(httpClientFactory, "connectTimeOut")).intValue());
        assertEquals("httpClientFactory.socketTimeOut", 10000, ((Number) getPrivateField(httpClientFactory, "socketTimeOut")).intValue());
        assertNull("httpClientFactory.httpClientInstance", getPrivateField(httpClientFactory, "httpClientInstance"));
    }
    
    public void testCreateHttpClient() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        DefaultHttpClient result = (DefaultHttpClient) httpClientFactory.createHttpClient();
        assertSame("httpClientFactory.httpClientInstance", result, getPrivateField(httpClientFactory, "httpClientInstance"));
        assertNotNull("result", result);
    }
    
    public void testReleaseHttpClient() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        httpClientFactory.createHttpClient();
        httpClientFactory.releaseHttpClient();
        assertNull("httpClientFactory.httpClientInstance", getPrivateField(httpClientFactory, "httpClientInstance"));
    }
    
    public void testSetConnectionTimeout() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        httpClientFactory.setConnectionTimeout(100);
        assertEquals("httpClientFactory.connectTimeOut", 100, ((Number) getPrivateField(httpClientFactory, "connectTimeOut")).intValue());
    }
    
    public void testSetConnectionTimeout1() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        DefaultHttpClient httpClient = (DefaultHttpClient) httpClientFactory.createHttpClient();
        httpClientFactory.setConnectionTimeout(100);
        assertEquals("httpClientFactory.connectTimeOut", 100, ((Number) getPrivateField(httpClientFactory, "connectTimeOut")).intValue());
        assertSame("httpClientFactory.httpClientInstance", httpClient, getPrivateField(httpClientFactory, "httpClientInstance"));
    }
    
    public void testSetSocTimeout() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        httpClientFactory.setSocTimeout(100);
        assertEquals("httpClientFactory.socketTimeOut", 100, ((Number) getPrivateField(httpClientFactory, "socketTimeOut")).intValue());
    }
    
    public void testSetSocTimeout1() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        DefaultHttpClient httpClient = (DefaultHttpClient) httpClientFactory.createHttpClient();
        httpClientFactory.setSocTimeout(100);
        assertEquals("httpClientFactory.socketTimeOut", 100, ((Number) getPrivateField(httpClientFactory, "socketTimeOut")).intValue());
        assertSame("httpClientFactory.httpClientInstance", httpClient, getPrivateField(httpClientFactory, "httpClientInstance"));
    }
    
    public void testCreateHttpClientThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "NOALGORITHMEXP");
        HttpClientFactory httpClientFactory = (HttpClientFactory) Mockingbird.getProxyObject(HttpClientFactory.class, true);
        NoSuchAlgorithmException noSuchAlgorithmException = (NoSuchAlgorithmException) Mockingbird.getProxyObject(NoSuchAlgorithmException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, SSLContext.class, "getInstance", "(java.lang.String)javax.net.ssl.SSLContext", new Object[] {"TLS"}, noSuchAlgorithmException, 1);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "NOALGORITHMEXP", apiMessage);
        Mockingbird.setReturnValue(false, noSuchAlgorithmException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(HttpClientFactory.class);
        try {
            httpClientFactory.createHttpClient();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertNull("httpClientFactory.httpClientInstance", getPrivateField(httpClientFactory, "httpClientInstance"));
        }
    }
    
    public void testCreateHttpClientThrowsApiExceptionWithAggressiveMocks1() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "KEYMANAGEEXPMSG");
        HttpClientFactory httpClientFactory = (HttpClientFactory) Mockingbird.getProxyObject(HttpClientFactory.class, true);
        SSLContext sSLContext = (SSLContext) Mockingbird.getProxyObject(SSLContext.class);
        KeyManagementException keyManagementException = (KeyManagementException) Mockingbird.getProxyObject(KeyManagementException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(httpClientFactory, "manager", Mockingbird.getProxyObject(X509TrustManager.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(true, SSLContext.class, "getInstance", "(java.lang.String)javax.net.ssl.SSLContext", new Object[] {"TLS"}, sSLContext, 1);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "KEYMANAGEEXPMSG", apiMessage);
        Mockingbird.setException(false, sSLContext, "init", "(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)void", keyManagementException, 1);
        Mockingbird.setReturnValue(false, keyManagementException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(HttpClientFactory.class);
        try {
            httpClientFactory.createHttpClient();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertNull("httpClientFactory.httpClientInstance", getPrivateField(httpClientFactory, "httpClientInstance"));
        }
    }
    
    public void testReleaseHttpClientThrowsNullPointerException() throws Throwable {
        HttpClientFactory httpClientFactory = new HttpClientFactory();
        try {
            httpClientFactory.releaseHttpClient();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HttpClientFactory.class, ex);
            assertNull("httpClientFactory.httpClientInstance", getPrivateField(httpClientFactory, "httpClientInstance"));
        }
    }
}

