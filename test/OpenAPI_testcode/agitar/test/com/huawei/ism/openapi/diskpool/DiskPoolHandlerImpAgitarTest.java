/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:29:07
 * Time to generate: 01:22.359 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.diskpool.DiskPoolHandlerImp:0ec1146d4eaa0523b5618728ab7e0cef
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.diskpool;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.google.gson.Gson;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class DiskPoolHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DiskPoolHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testDiskPoolHandlerImpIp", 100);
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(restRequestHandler, "testDiskPoolHandlerImpDeviceID");
        assertEquals("diskPoolHandlerImp.deviceID", "testDiskPoolHandlerImpDeviceID", getPrivateField(diskPoolHandlerImp, "deviceID"));
        assertSame("diskPoolHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateAssociateWithDiskWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "DISKPOOL");
        storeStaticField(MOType.class, "DISK");
        DiskPoolHandlerImp diskPoolHandlerImp = (DiskPoolHandlerImp) Mockingbird.getProxyObject(DiskPoolHandlerImp.class, true);
        String[] strings = new String[0];
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(diskPoolHandlerImp, "deviceID", "");
        setPrivateField(diskPoolHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "DISKPOOL", mOType);
        setPrivateField(MOType.class, "DISK", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Gson gson = (Gson) Mockingbird.getProxyObject(Gson.class);
        Mockingbird.replaceObjectForRecording(Gson.class, "<init>()", gson);
        Mockingbird.setReturnValue(gson.toJson(strings), "");
        JSONArray jSONArray = (JSONArray) Mockingbird.getProxyObject(JSONArray.class);
        Mockingbird.replaceObjectForRecording(JSONArray.class, "<init>(java.lang.String)", jSONArray);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJIDLIST", jSONArray), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        diskPoolHandlerImp.createAssociateWithDisk("", strings);
        assertEquals("diskPoolHandlerImp.deviceID", "", getPrivateField(diskPoolHandlerImp, "deviceID"));
        assertNull("diskPoolHandlerImp.restRequestHandler", getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateWithAggressiveMocks() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = (DiskPoolHandlerImp) Mockingbird.getProxyObject(DiskPoolHandlerImp.class, true);
        DiskPoolMO diskPoolMO = (DiskPoolMO) Mockingbird.getProxyObject(DiskPoolMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(diskPoolHandlerImp, "deviceID", "");
        setPrivateField(diskPoolHandlerImp, "restRequestHandler", null);
        setPrivateField(diskPoolMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mO, "properties", null);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", Mockingbird.getProxyObject(JSONObject.class));
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        DiskPoolMO result = diskPoolHandlerImp.create(diskPoolMO);
        assertNull("result", result);
    }
    
    public void testGetBatch() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImpIp", 100), "testDiskPoolHandlerImpDeviceID");
        DiskPoolQuery cond = new DiskPoolQuery(new DiskPoolMO(), 100L, 1000L);
        DiskPoolIterator batch = diskPoolHandlerImp.getBatch(cond);
        DiskPoolIterator result = diskPoolHandlerImp.getBatch(cond);
        assertSame("result", batch, result);
    }
    
    public void testGetBatch1() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImpIp", 100), "testDiskPoolHandlerImpDeviceID");
        DiskPoolIterator result = diskPoolHandlerImp.getBatch(new DiskPoolQuery(new DiskPoolMO(), 100L, 1000L));
        assertSame("diskPoolHandlerImp.diskPoolIterator", result, getPrivateField(diskPoolHandlerImp, "diskPoolIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 1, result.getConcretFilterHeaders().length);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(MOType.class, "DISKPOOL");
        DiskPoolHandlerImp diskPoolHandlerImp = (DiskPoolHandlerImp) Mockingbird.getProxyObject(DiskPoolHandlerImp.class, true);
        DiskPoolMO diskPoolMO = (DiskPoolMO) Mockingbird.getProxyObject(DiskPoolMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        setPrivateField(diskPoolHandlerImp, "deviceID", "");
        setPrivateField(diskPoolHandlerImp, "restRequestHandler", null);
        setPrivateField(diskPoolMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "DISKPOOL", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", null);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(diskPoolMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(jSONObject.toString(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        diskPoolHandlerImp.modify(diskPoolMO);
        assertEquals("diskPoolHandlerImp.deviceID", "", getPrivateField(diskPoolHandlerImp, "deviceID"));
        assertNull("diskPoolHandlerImp.restRequestHandler", getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveAssociateFromDiskWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "DISK");
        storeStaticField(MOType.class, "HOSTGROUP");
        DiskPoolHandlerImp diskPoolHandlerImp = (DiskPoolHandlerImp) Mockingbird.getProxyObject(DiskPoolHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(diskPoolHandlerImp, "deviceID", "");
        setPrivateField(diskPoolHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(MOType.class, "DISK", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ASSOCIATEOBJID", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        diskPoolHandlerImp.removeAssociateFromDisk("", "");
        assertEquals("diskPoolHandlerImp.deviceID", "", getPrivateField(diskPoolHandlerImp, "deviceID"));
        assertNull("diskPoolHandlerImp.restRequestHandler", getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateAssociateWithDiskThrowsApiException() throws Throwable {
        String[] ids = new String[2];
        try {
            new DiskPoolHandlerImp(null, "testDiskPoolHandlerImpDeviceID").createAssociateWithDisk("testDiskPoolHandlerImpDiskPoolID", ids);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateAssociateWithDiskThrowsApiException1() throws Throwable {
        try {
            new DiskPoolHandlerImp(null, "testDiskPoolHandlerImpDeviceID").createAssociateWithDisk("testDiskPoolHandlerImpDiskPoolID", (String[]) null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "A JSONArray text must start with '[' at character 1 of null", ex.getMessage());
            assertThrownBy(DiskPoolHandlerImp.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "A JSONArray text must start with '[' at character 1 of null", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getMessage()", "A JSONArray text must start with '[' at character 1 of null", ex.getException().getMessage());
        }
    }
    
    public void testCreateAssociateWithDiskThrowsIllegalArgumentException() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImp\rIp", 100), "testDiskPoolHandlerImpDeviceID");
        String[] ids = new String[0];
        try {
            diskPoolHandlerImp.createAssociateWithDisk("testDiskPoolHandlerImpDiskPoolID", ids);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateAssociateWithDiskThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testDiskPoolHandlerImpIp", 100);
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(restRequestHandler, "testDiskPoolHandlerImpDeviceID");
        String[] ids = new String[0];
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        try {
            diskPoolHandlerImp.createAssociateWithDisk("testDiskPoolHandlerImpDiskPoolID", ids);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("diskPoolHandlerImp.deviceID", "testDiskPoolHandlerImpDeviceID", getPrivateField(diskPoolHandlerImp, "deviceID"));
            assertSame("diskPoolHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsApiException() throws Throwable {
        try {
            new DiskPoolHandlerImp(null, "testDiskPoolHandlerImpDeviceID").create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateThrowsIllegalArgumentException() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImp\rIp", 100), "testDiskPoolHandlerImpDeviceID");
        try {
            diskPoolHandlerImp.create(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testDiskPoolHandlerImpIp", 100);
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(restRequestHandler, "testDiskPoolHandlerImpDeviceID");
        DiskPoolMO mo = new DiskPoolMO();
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        try {
            diskPoolHandlerImp.create(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("diskPoolHandlerImp.deviceID", "testDiskPoolHandlerImpDeviceID", getPrivateField(diskPoolHandlerImp, "deviceID"));
            assertSame("diskPoolHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testDeleteThrowsApiException() throws Throwable {
        try {
            new DiskPoolHandlerImp(null, "testDiskPoolHandlerImpDeviceID").delete("testDiskPoolHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testDeleteThrowsIllegalArgumentException() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImp\rIp", 100), "testDiskPoolHandlerImpDeviceID");
        try {
            diskPoolHandlerImp.delete("testDiskPoolHandlerImpId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testDiskPoolHandlerImpIp", 100);
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(restRequestHandler, "testDiskPoolHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        try {
            diskPoolHandlerImp.delete("testDiskPoolHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("diskPoolHandlerImp.deviceID", "testDiskPoolHandlerImpDeviceID", getPrivateField(diskPoolHandlerImp, "deviceID"));
            assertSame("diskPoolHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new DiskPoolHandlerImp(null, "testDiskPoolHandlerImpDeviceID").get("testDiskPoolHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImpIp", 100), "testDiskPoolHandlerImpDeviceID");
        try {
            diskPoolHandlerImp.get("testDiskPoolHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testDiskPoolHandlerImpIp", 100);
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(restRequestHandler, "testDiskPoolHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        try {
            diskPoolHandlerImp.get("testDiskPoolHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("diskPoolHandlerImp.deviceID", "testDiskPoolHandlerImpDeviceID", getPrivateField(diskPoolHandlerImp, "deviceID"));
            assertSame("diskPoolHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        DiskPoolMO mo = new DiskPoolMO();
        try {
            new DiskPoolHandlerImp(null, "testDiskPoolHandlerImpDeviceID").modify(mo);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "DISKPOOL");
        DiskPoolHandlerImp diskPoolHandlerImp = (DiskPoolHandlerImp) Mockingbird.getProxyObject(DiskPoolHandlerImp.class, true);
        DiskPoolMO diskPoolMO = (DiskPoolMO) Mockingbird.getProxyObject(DiskPoolMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(diskPoolHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "DISKPOOL", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(diskPoolMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        try {
            diskPoolHandlerImp.modify(diskPoolMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("diskPoolHandlerImp.deviceID", "", getPrivateField(diskPoolHandlerImp, "deviceID"));
            assertNull("diskPoolHandlerImp.restRequestHandler", getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImp\rIp", 100), "testDiskPoolHandlerImpDeviceID");
        DiskPoolMO mo = new DiskPoolMO();
        try {
            diskPoolHandlerImp.modify(mo);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsIllegalArgumentException1() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImp\rIp", 100), "testDiskPoolHandlerImpDeviceID");
        try {
            diskPoolHandlerImp.modify(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImpIp", 100), "testDiskPoolHandlerImpDeviceID");
        DiskPoolMO mo = new DiskPoolMO();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        try {
            diskPoolHandlerImp.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testRemoveAssociateFromDiskThrowsApiException() throws Throwable {
        try {
            new DiskPoolHandlerImp(null, "testDiskPoolHandlerImpDeviceID").removeAssociateFromDisk("testDiskPoolHandlerImpDiskPoolID", "testDiskPoolHandlerImpDiskID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRemoveAssociateFromDiskThrowsIllegalArgumentException() throws Throwable {
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(new RestRequestHandler("testDiskPoolHandlerImpIp", 100), "testDiskPoolHandlerImpDeviceID");
        try {
            diskPoolHandlerImp.removeAssociateFromDisk("testDiskPoolHandlerImp\rDiskPoolID", "testDiskPoolHandlerImpDiskID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveAssociateFromDiskThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testDiskPoolHandlerImpIp", 100);
        DiskPoolHandlerImp diskPoolHandlerImp = new DiskPoolHandlerImp(restRequestHandler, "testDiskPoolHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(DiskPoolHandlerImp.class);
        try {
            diskPoolHandlerImp.removeAssociateFromDisk("testDiskPoolHandlerImpDiskPoolID", "testDiskPoolHandlerImpDiskID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("diskPoolHandlerImp.deviceID", "testDiskPoolHandlerImpDeviceID", getPrivateField(diskPoolHandlerImp, "deviceID"));
            assertSame("diskPoolHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(diskPoolHandlerImp, "restRequestHandler"));
        }
    }
}

