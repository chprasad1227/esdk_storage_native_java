/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-20 14:07:04
 * Time to generate: 01:17.937 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.storagepool.StoragePoolMO:85bc91e8485d4d58ad36bc991c56240f
 *
 */

package com.huawei.ism.openapi.storagepool;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import java.util.HashMap;
import org.json.JSONObject;

public class StoragePoolMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return StoragePoolMO.class;
    }
    
    public void testConstructor() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetCount() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject());
        Long result = storagePoolMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetDescription() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject(new HashMap(100)));
        String result = storagePoolMO.getDescription();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetDescription1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setDescription("testStoragePoolMODescription");
        String result = storagePoolMO.getDescription();
        assertEquals("result", "testStoragePoolMODescription", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetHealthStatus() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        EnumDefine.HealthStatusE result = storagePoolMO.getHealthStatus();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetHealthStatusWithAggressiveMocks() throws Throwable {
        StoragePoolMO storagePoolMO = (StoragePoolMO) Mockingbird.getProxyObject(StoragePoolMO.class, true);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        setPrivateField(storagePoolMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mO.getProperty("HEALTHSTATUS"), new Integer(0));
        Mockingbird.setReturnValue(EnumDefine.HealthStatusE.valueOf(0), null);
        Mockingbird.enterTestMode(StoragePoolMO.class);
        EnumDefine.HealthStatusE result = storagePoolMO.getHealthStatus();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetHotspareSpaceConsumedCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getHotspareSpaceConsumedCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetHotspareSpaceConsumedCapacityPercentage() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getHotspareSpaceConsumedCapacityPercentage();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetHotspareSpaceTotalCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getHotspareSpaceTotalCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetId() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        String result = storagePoolMO.getId();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetId1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setId("testStoragePoolMOId");
        String result = storagePoolMO.getId();
        assertEquals("result", "testStoragePoolMOId", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        MO result = storagePoolMO.getMO();
        assertEquals("result.getProperties().size()", 2, result.getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setName("testStoragePoolMOName");
        String result = storagePoolMO.getName();
        assertEquals("result", "testStoragePoolMOName", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetName1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject());
        String result = storagePoolMO.getName();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetParentId() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        String result = storagePoolMO.getParentId();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetParentId1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setParentId("testStoragePoolMOParentId");
        String result = storagePoolMO.getParentId();
        assertEquals("result", "testStoragePoolMOParentId", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetParentName() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        String result = storagePoolMO.getParentName();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetParentType() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        MOType result = storagePoolMO.getParentType();
        assertEquals("result", MOType.DISKPOOL, result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetRawCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject(new HashMap(100, 100.0F)));
        Long result = storagePoolMO.getRawCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetReplicationCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getReplicationCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetReservedCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject(new HashMap(100)));
        Long result = storagePoolMO.getReservedCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetRunningStatus() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        EnumDefine.RunningStatusE result = storagePoolMO.getRunningStatus();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetRunningStatusWithAggressiveMocks() throws Throwable {
        StoragePoolMO storagePoolMO = (StoragePoolMO) Mockingbird.getProxyObject(StoragePoolMO.class, true);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        setPrivateField(storagePoolMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mO.getProperty("RUNNINGSTATUS"), new Integer(0));
        Mockingbird.setReturnValue(EnumDefine.RunningStatusE.valueOf(0), null);
        Mockingbird.enterTestMode(StoragePoolMO.class);
        EnumDefine.RunningStatusE result = storagePoolMO.getRunningStatus();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetSectorSize() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getSectorSize();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier0Capacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier0Capacity(new Long(512L));
        Long result = storagePoolMO.getTier0Capacity();
        assertEquals("result", 512L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier0Capacity1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getTier0Capacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier0RaidLv() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier0RaidLv(EnumDefine.RaidLevelE.RAID_LEVEL_RAID6);
        EnumDefine.RaidLevelE result = storagePoolMO.getTier0RaidLv();
        assertSame("result", EnumDefine.RaidLevelE.RAID_LEVEL_RAID6, result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier0RaidLv1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        EnumDefine.RaidLevelE result = storagePoolMO.getTier0RaidLv();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier1Capacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject());
        Long result = storagePoolMO.getTier1Capacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier1Capacity1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO(new JSONObject());
        storagePoolMO.setTier1Capacity(new Long(512L));
        Long result = storagePoolMO.getTier1Capacity();
        assertEquals("result", 512L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier1RaidLv() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier1RaidLv(EnumDefine.RaidLevelE.RAID_LEVEL_RAID0);
        EnumDefine.RaidLevelE result = storagePoolMO.getTier1RaidLv();
        assertSame("result", EnumDefine.RaidLevelE.RAID_LEVEL_RAID0, result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier1RaidLv1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        EnumDefine.RaidLevelE result = storagePoolMO.getTier1RaidLv();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier2Capacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier2Capacity(new Long(-66049L));
        Long result = storagePoolMO.getTier2Capacity();
        assertEquals("result", -66048L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier2Capacity1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getTier2Capacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier2RaidLv() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier2RaidLv(EnumDefine.RaidLevelE.RAID_LEVEL_RAID0);
        EnumDefine.RaidLevelE result = storagePoolMO.getTier2RaidLv();
        assertSame("result", EnumDefine.RaidLevelE.RAID_LEVEL_RAID0, result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetTier2RaidLv1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        EnumDefine.RaidLevelE result = storagePoolMO.getTier2RaidLv();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetUserConsumedCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getUserConsumedCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetUserConsumedCapacityPercentage() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getUserConsumedCapacityPercentage();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetUserConsumedCapacityThreshold() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setUserConsumedCapacityThreshold(new Long(0L));
        Long result = storagePoolMO.getUserConsumedCapacityThreshold();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetUserConsumedCapacityThreshold1() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getUserConsumedCapacityThreshold();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetUserFreeCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getUserFreeCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetUserTotalCapacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        Long result = storagePoolMO.getUserTotalCapacity();
        assertEquals("result", 0L, result.longValue());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testGetWorkNodeId() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        String result = storagePoolMO.getWorkNodeId();
        assertNull("result", result);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetDescription() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setDescription("testStoragePoolMODescription");
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertEquals("storagePoolMO.mo.getProperties().get(\"DESCRIPTION\")", "testStoragePoolMODescription", ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("DESCRIPTION"));
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetId() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setId("testStoragePoolMOId");
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertEquals("storagePoolMO.mo.getProperties().get(\"ID\")", "testStoragePoolMOId", ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("ID"));
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetName() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setName("testStoragePoolMOName");
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertEquals("storagePoolMO.mo.getProperties().get(\"NAME\")", "testStoragePoolMOName", ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("NAME"));
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetParentId() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setParentId("testStoragePoolMOParentId");
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertEquals("storagePoolMO.mo.getProperties().get(\"PARENTID\")", "testStoragePoolMOParentId", ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("PARENTID"));
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetTier0Capacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier0Capacity(new Long(-66048L));
        assertEquals("storagePoolMO.mo.getProperties().size()", 4, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetTier0RaidLv() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier0RaidLv(EnumDefine.RaidLevelE.RAID_LEVEL_RAID0);
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertEquals("storagePoolMO.mo.getProperties().get(\"TIER0RAIDLV\")", new Integer(3), ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("TIER0RAIDLV"));
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetTier1Capacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier1Capacity(new Long(0L));
        assertEquals("storagePoolMO.mo.getProperties().size()", 4, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetTier1RaidLv() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier1RaidLv(EnumDefine.RaidLevelE.RAID_LEVEL_RAID3);
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertEquals("storagePoolMO.mo.getProperties().get(\"TIER1RAIDLV\")", new Integer(7), ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("TIER1RAIDLV"));
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetTier2Capacity() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier2Capacity(new Long(0L));
        assertEquals("storagePoolMO.mo.getProperties().size()", 4, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetTier2RaidLv() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setTier2RaidLv(EnumDefine.RaidLevelE.RAID_LEVEL_RAID50);
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        assertEquals("storagePoolMO.mo.getProperties().get(\"TIER2RAIDLV\")", new Integer(6), ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("TIER2RAIDLV"));
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetTireDiskType() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        callPrivateMethod("com.huawei.ism.openapi.storagepool.StoragePoolMO", "setTireDiskType", new Class[] {EnumDefine.DiskTypeE.class}, storagePoolMO, new Object[] {EnumDefine.DiskTypeE.FC});
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testSetUserConsumedCapacityThreshold() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        storagePoolMO.setUserConsumedCapacityThreshold(new Long(0L));
        assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("USERCONSUMEDCAPACITYTHRESHOLD");
        assertEquals("storagePoolMO.mo.getProperties().get(\"USERCONSUMEDCAPACITYTHRESHOLD\")", new Long(0L), actual);
        assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject(new HashMap(100, 100.0F));
        jObject.putOpt("testString", "");
        jObject.accumulate("testString", null);
        try {
            new StoragePoolMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setDescription(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetParentIdThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setParentId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetTier0CapacityThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setTier0Capacity(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
            Object actual = ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("TIER0DISKTYPE");
            assertEquals("storagePoolMO.mo.getProperties().get(\"TIER0DISKTYPE\")", new Integer(3), actual);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StoragePoolMO.class, ex);
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetTier0RaidLvThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setTier0RaidLv(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StoragePoolMO.class, ex);
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetTier1CapacityThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setTier1Capacity(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
            Object actual = ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("TIER1DISKTYPE");
            assertEquals("storagePoolMO.mo.getProperties().get(\"TIER1DISKTYPE\")", new Integer(1), actual);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StoragePoolMO.class, ex);
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetTier1RaidLvThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setTier1RaidLv(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StoragePoolMO.class, ex);
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetTier2CapacityThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setTier2Capacity(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("storagePoolMO.mo.getProperties().size()", 3, ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().size());
            Object actual = ((MO) getPrivateField(storagePoolMO, "mo")).getProperties().get("TIER2DISKTYPE");
            assertEquals("storagePoolMO.mo.getProperties().get(\"TIER2DISKTYPE\")", new Integer(4), actual);
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StoragePoolMO.class, ex);
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetTier2RaidLvThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setTier2RaidLv(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(StoragePoolMO.class, ex);
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
    
    public void testSetUserConsumedCapacityThresholdThrowsNullPointerException() throws Throwable {
        StoragePoolMO storagePoolMO = new StoragePoolMO();
        try {
            storagePoolMO.setUserConsumedCapacityThreshold(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("storagePoolMO.mo", getPrivateField(storagePoolMO, "mo"));
        }
    }
}

