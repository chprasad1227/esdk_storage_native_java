/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:36:34
 * Time to generate: 00:24.609 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.nas.nfsauthclient.NFSShareAuthClientMO:b2487f2bea94a4838400e41b44608659
 *
 */

package com.huawei.ism.openapi.nas.nfsauthclient;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.XMLTokener;

public class NFSShareAuthClientMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return NFSShareAuthClientMO.class;
    }
    
    public void testConstructor() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO(new JSONObject());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 0, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetAccessName() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        String result = nFSShareAuthClientMO.getAccessName();
        assertNull("result", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetAccessName1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setAccessName("testNFSShareAuthClientMOAccessName");
        String result = nFSShareAuthClientMO.getAccessName();
        assertEquals("result", "testNFSShareAuthClientMOAccessName", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetAccessVal() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        Integer result = nFSShareAuthClientMO.getAccessVal();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetAccessVal1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setAccessVal(new Integer(0));
        Integer result = nFSShareAuthClientMO.getAccessVal();
        assertEquals("result", 0, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetAllSquash() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setAllSquash(new Integer(2));
        Integer result = nFSShareAuthClientMO.getAllSquash();
        assertEquals("result", 2, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetAllSquash1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setAllSquash(new Integer(0));
        Integer result = nFSShareAuthClientMO.getAllSquash();
        assertEquals("result", 0, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setId("testNFSShareAuthClientMOId");
        String result = nFSShareAuthClientMO.getId();
        assertEquals("result", "testNFSShareAuthClientMOId", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetId1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        String result = nFSShareAuthClientMO.getId();
        assertNull("result", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetMO() throws Throwable {
        MO result = new NFSShareAuthClientMO().getMO();
        assertEquals("result.getProperties().size()", 1, result.getProperties().size());
    }
    
    public void testGetRootSquash() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setRootSquash(new Integer(0));
        Integer result = nFSShareAuthClientMO.getRootSquash();
        assertEquals("result", 0, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetRootSquash1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        Integer result = nFSShareAuthClientMO.getRootSquash();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetSecurity() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setSecurity(new Integer(0));
        Integer result = nFSShareAuthClientMO.getSecurity();
        assertEquals("result", 0, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetSecurity1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        Integer result = nFSShareAuthClientMO.getSecurity();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetShareId() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        String result = nFSShareAuthClientMO.getShareId();
        assertNull("result", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetShareId1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setShareId("testNFSShareAuthClientMOShareId");
        String result = nFSShareAuthClientMO.getShareId();
        assertEquals("result", "testNFSShareAuthClientMOShareId", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetSharePath() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        String result = nFSShareAuthClientMO.getSharePath();
        assertNull("result", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetSharePath1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setSharePath("testNFSShareAuthClientMOSharePath");
        String result = nFSShareAuthClientMO.getSharePath();
        assertEquals("result", "testNFSShareAuthClientMOSharePath", result);
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetSync() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setSync(new Integer(0));
        Integer result = nFSShareAuthClientMO.getSync();
        assertEquals("result", 0, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testGetSync1() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        Integer result = nFSShareAuthClientMO.getSync();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetAccessName() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setAccessName("testNFSShareAuthClientMOAccessName");
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"ACCESSNAME\")", "testNFSShareAuthClientMOAccessName", nFSShareAuthClientMO.getMO().getProperties().get("ACCESSNAME"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetAccessVal() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setAccessVal(new Integer(0));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"ACCESSVAL\")", new Integer(0), nFSShareAuthClientMO.getMO().getProperties().get("ACCESSVAL"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetAllSquash() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setAllSquash(new Integer(0));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"ALLSQUASH\")", new Integer(0), nFSShareAuthClientMO.getMO().getProperties().get("ALLSQUASH"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetId() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setId("testNFSShareAuthClientMOId");
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"ID\")", "testNFSShareAuthClientMOId", nFSShareAuthClientMO.getMO().getProperties().get("ID"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetRootSquash() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setRootSquash(new Integer(0));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"ROOTSQUASH\")", new Integer(0), nFSShareAuthClientMO.getMO().getProperties().get("ROOTSQUASH"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetSecurity() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setSecurity(new Integer(0));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"SECURITY\")", new Integer(0), nFSShareAuthClientMO.getMO().getProperties().get("SECURITY"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetShareId() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setShareId("testNFSShareAuthClientMOShareId");
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"SHAREID\")", "testNFSShareAuthClientMOShareId", nFSShareAuthClientMO.getMO().getProperties().get("SHAREID"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetSharePath() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setSharePath("testNFSShareAuthClientMOSharePath");
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"SHAREPATH\")", "testNFSShareAuthClientMOSharePath", nFSShareAuthClientMO.getMO().getProperties().get("SHAREPATH"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testSetSync() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        nFSShareAuthClientMO.setSync(new Integer(33));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().get(\"SYNC\")", new Integer(33), nFSShareAuthClientMO.getMO().getProperties().get("SYNC"));
        assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 2, nFSShareAuthClientMO.getMO().getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put(new XMLTokener("testNFSShareAuthClientMOs"), new JSONArray());
        try {
            new NFSShareAuthClientMO(new JSONObject(map));
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 50", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testSetAccessNameThrowsNullPointerException() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        try {
            nFSShareAuthClientMO.setAccessName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        try {
            nFSShareAuthClientMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
        }
    }
    
    public void testSetShareIdThrowsNullPointerException() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        try {
            nFSShareAuthClientMO.setShareId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
        }
    }
    
    public void testSetSharePathThrowsNullPointerException() throws Throwable {
        NFSShareAuthClientMO nFSShareAuthClientMO = new NFSShareAuthClientMO();
        try {
            nFSShareAuthClientMO.setSharePath(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("nFSShareAuthClientMO.getMO().getProperties().size()", 1, nFSShareAuthClientMO.getMO().getProperties().size());
        }
    }
}

