/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:26:58
 * Time to generate: 00:51.359 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.nas.cifsshare.CIFSShareIterator:386da48b56cf0d92c4b99fdb3b3c1f91
 * agitar.src.md5=com.huawei.ism.openapi.common.batchquery.ApiIterator:592fbb87e71ade6d26e6fe9200d66392
 *
 */

package com.huawei.ism.openapi.nas.cifsshare;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.batchquery.QueryBase;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class CIFSShareIteratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CIFSShareIterator.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testCIFSShareIteratorIp", 100);
        CIFSShareQuery qCondition = new CIFSShareQuery(new CIFSShareMO(), 100L, 1000L);
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(restRequestHandler, "testCIFSShareIteratorDeviceID", qCondition);
        assertNull("cIFSShareIterator.headerMap", getPrivateField(cIFSShareIterator, "headerMap"));
        assertEquals("cIFSShareIterator.totalCount", 0L, ((Number) getPrivateField(cIFSShareIterator, "totalCount")).longValue());
        assertSame("cIFSShareIterator.restRequestHandler", restRequestHandler, getPrivateField(cIFSShareIterator, "restRequestHandler"));
        assertEquals("cIFSShareIterator.curIndex", 100L, ((Number) getPrivateField(cIFSShareIterator, "curIndex")).longValue());
        assertEquals("cIFSShareIterator.deviceID", "testCIFSShareIteratorDeviceID", getPrivateField(cIFSShareIterator, "deviceID"));
        assertSame("cIFSShareIterator.getQuery()", qCondition, cIFSShareIterator.getQuery());
    }
    
    public void testGetConcretBatchNextWithAggressiveMocks() throws Throwable {
        CIFSShareIterator cIFSShareIterator = (CIFSShareIterator) Mockingbird.getProxyObject(CIFSShareIterator.class, true);
        QueryBase queryBase = (QueryBase) Mockingbird.getProxyObject(QueryBase.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(cIFSShareIterator, "deviceID", "");
        setPrivateField(cIFSShareIterator, "curIndex", new Long(0L));
        setPrivateField(cIFSShareIterator, "queryCondition", queryBase);
        setPrivateField(cIFSShareIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.enterNormalMode();
        queryBase.setCount(0L);
        callPrivateMethod("com.huawei.ism.openapi.common.batchquery.QueryBase", "setConcretQueryMO", new Class[] {Object.class}, queryBase, new Object[] {obj});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, cIFSShareIterator, "getHeadMap", "(java.lang.Object)java.util.Map", null, 1);
        Mockingbird.setReturnValue(openApiUtils2.convertToStringMaps(null), null);
        hashMap.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(CIFSShareIterator.class);
        List result = cIFSShareIterator.getConcretBatchNext();
        assertNull("result", result);
        assertNull("cIFSShareIterator.headerMap", getPrivateField(cIFSShareIterator, "headerMap"));
    }
    
    public void testGetConcretCountWithAggressiveMocks() throws Throwable {
        CIFSShareIterator cIFSShareIterator = (CIFSShareIterator) Mockingbird.getProxyObject(CIFSShareIterator.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        CIFSShareMO cIFSShareMO = (CIFSShareMO) Mockingbird.getProxyObject(CIFSShareMO.class);
        setPrivateField(cIFSShareIterator, "deviceID", "");
        setPrivateField(cIFSShareIterator, "queryCondition", null);
        setPrivateField(cIFSShareIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), cIFSShareMO);
        Mockingbird.setReturnValue(cIFSShareMO.getCount(), new Long(0L));
        Mockingbird.enterTestMode(CIFSShareIterator.class);
        long result = cIFSShareIterator.getConcretCount();
        assertEquals("result", 0L, result);
        assertNull("cIFSShareIterator.headerMap", getPrivateField(cIFSShareIterator, "headerMap"));
    }
    
    public void testGetConcretFilterHeaders() throws Throwable {
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(), 100L, 1000L));
        String[] result = cIFSShareIterator.getConcretFilterHeaders();
        assertEquals("result.length", 2, result.length);
        assertEquals("result[0]", "SHAREPATH", result[0]);
    }
    
    public void testGetConcretMoMap() throws Throwable {
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(), 100L, 1000L));
        ConcurrentHashMap result = (ConcurrentHashMap) cIFSShareIterator.getConcretMoMap(new CIFSShareMO(new MO()));
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetConcretMoMap1() throws Throwable {
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", null);
        Map result = cIFSShareIterator.getConcretMoMap((CIFSShareMO) null);
        assertNull("result", result);
    }
    
    public void testGetConcretBatchNextThrowsApiException() throws Throwable {
        MO mo = new MO();
        mo.setProperty("", new Integer(0));
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(null, "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(mo), 100L, 1000L));
        try {
            cIFSShareIterator.getConcretBatchNext();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("cIFSShareIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException() throws Throwable {
        MO mo = new MO();
        mo.setProperty("", new Integer(0));
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIterator\rDeviceID", new CIFSShareQuery(new CIFSShareMO(mo), 100L, 1000L));
        try {
            cIFSShareIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("cIFSShareIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        mo.setProperty("", new Integer(0));
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(mo), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CIFSShareIterator.class);
        try {
            cIFSShareIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cIFSShareIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException1() throws Throwable {
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO((MO) null), 100L, 1000L));
        try {
            cIFSShareIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareIterator.class, ex);
            assertNull("cIFSShareIterator.headerMap", getPrivateField(cIFSShareIterator, "headerMap"));
        }
    }
    
    public void testGetConcretCountThrowsApiException() throws Throwable {
        MO mo = new MO();
        mo.setProperty("", new Integer(0));
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(null, "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(mo), 100L, 1000L));
        try {
            cIFSShareIterator.getConcretCount();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("cIFSShareIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsIllegalArgumentException() throws Throwable {
        MO mo = new MO();
        mo.setProperty("", new Integer(0));
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIterator\rIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(mo), 100L, 1000L));
        try {
            cIFSShareIterator.getConcretCount();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("cIFSShareIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        mo.setProperty("", new Integer(0));
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(mo), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(CIFSShareIterator.class);
        try {
            cIFSShareIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("cIFSShareIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException1() throws Throwable {
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO((MO) null), 100L, 1000L));
        try {
            cIFSShareIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareIterator.class, ex);
            assertNull("cIFSShareIterator.headerMap", getPrivateField(cIFSShareIterator, "headerMap"));
        }
    }
    
    public void testGetConcretMoMapThrowsNullPointerException() throws Throwable {
        CIFSShareIterator cIFSShareIterator = new CIFSShareIterator(new RestRequestHandler("testCIFSShareIteratorIp", 100), "testCIFSShareIteratorDeviceID", new CIFSShareQuery(new CIFSShareMO(), 100L, 1000L));
        try {
            cIFSShareIterator.getConcretMoMap(new CIFSShareMO((MO) null));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareIterator.class, ex);
        }
    }
}

