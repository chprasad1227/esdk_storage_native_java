/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:33:10
 * Time to generate: 00:12.125 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.commu.http.HttpClientManager:ab22b7b7d124f3018752c02fe715e561
 *
 */

package com.huawei.ism.openapi.common.commu.http;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import org.apache.http.impl.client.DefaultHttpClient;

public class HttpClientManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HttpClientManager.class;
    }
    
    public void testConstructor() throws Throwable {
        HttpClientManager httpClientManager = new HttpClientManager();
        assertNotNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
        assertNull("httpClientManager.httpClient", getPrivateField(httpClientManager, "httpClient"));
    }
    
    public void testGetHttpClient() throws Throwable {
        HttpClientManager httpClientManager = new HttpClientManager();
        DefaultHttpClient httpClient = (DefaultHttpClient) httpClientManager.getHttpClient();
        DefaultHttpClient result = (DefaultHttpClient) httpClientManager.getHttpClient();
        assertSame("result", httpClient, result);
    }
    
    public void testGetHttpClient1() throws Throwable {
        HttpClientManager httpClientManager = new HttpClientManager();
        DefaultHttpClient result = (DefaultHttpClient) httpClientManager.getHttpClient();
        Object actual = getPrivateField(getPrivateField(httpClientManager, "httpClientFactory"), "httpClientInstance");
        assertSame("httpClientManager.httpClientFactory.httpClientInstance", result, actual);
        assertNotNull("result", result);
        assertNotNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
        assertSame("httpClientManager.httpClient", result, getPrivateField(httpClientManager, "httpClient"));
    }
    
    public void testReleaseHttpClient() throws Throwable {
        HttpClientManager httpClientManager = new HttpClientManager();
        httpClientManager.getHttpClient();
        httpClientManager.releaseHttpClient();
        Object object = getPrivateField(getPrivateField(httpClientManager, "httpClientFactory"), "httpClientInstance");
        assertNull("httpClientManager.httpClientFactory.httpClientInstance", object);
        assertNull("httpClientManager.httpClient", getPrivateField(httpClientManager, "httpClient"));
        assertNotNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
    }
    
    public void testSetConnectionTimeout() throws Throwable {
        HttpClientManager httpClientManager = new HttpClientManager();
        httpClientManager.setConnectionTimeout(100);
        int actual = ((Number) getPrivateField(getPrivateField(httpClientManager, "httpClientFactory"), "connectTimeOut")).intValue();
        assertEquals("httpClientManager.httpClientFactory.connectTimeOut", 100, actual);
        assertNotNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
    }
    
    public void testSetConnectionTimeoutWithAggressiveMocks() throws Throwable {
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class, true);
        setPrivateField(httpClientManager, "httpClientFactory", null);
        Mockingbird.enterTestMode(HttpClientManager.class);
        httpClientManager.setConnectionTimeout(0);
        assertNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
    }
    
    public void testSetSocTimeout() throws Throwable {
        HttpClientManager httpClientManager = new HttpClientManager();
        httpClientManager.setSocTimeout(100);
        int actual = ((Number) getPrivateField(getPrivateField(httpClientManager, "httpClientFactory"), "socketTimeOut")).intValue();
        assertEquals("httpClientManager.httpClientFactory.socketTimeOut", 100, actual);
        assertNotNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
    }
    
    public void testSetSocTimeoutWithAggressiveMocks() throws Throwable {
        HttpClientManager httpClientManager = (HttpClientManager) Mockingbird.getProxyObject(HttpClientManager.class, true);
        setPrivateField(httpClientManager, "httpClientFactory", null);
        Mockingbird.enterTestMode(HttpClientManager.class);
        httpClientManager.setSocTimeout(0);
        assertNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
    }
    
    public void testReleaseHttpClientThrowsNullPointerException() throws Throwable {
        HttpClientManager httpClientManager = new HttpClientManager();
        try {
            httpClientManager.releaseHttpClient();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HttpClientFactory.class, ex);
            assertNotNull("httpClientManager.httpClientFactory", getPrivateField(httpClientManager, "httpClientFactory"));
            assertNull("httpClientManager.httpClient", getPrivateField(httpClientManager, "httpClient"));
        }
    }
}

