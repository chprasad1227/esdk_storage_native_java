/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:33:13
 * Time to generate: 00:14.875 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp:01edc4e0b5d2b8af02dd9228cdae29b3
 *
 */

package com.huawei.ism.openapi.common.commu.http;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.StatusLine;
import org.apache.http.cookie.Cookie;
import org.apache.http.message.BasicHttpResponse;
import org.apache.http.message.BasicStatusLine;
import org.json.JSONException;
import org.json.JSONObject;

public class HttpResponseDefaultHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HttpResponseDefaultHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        new HttpResponseDefaultHandlerImp();
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCloseReader() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        Reader stringReader = new StringReader("testHttpResponseDefaultHandlerImpParam1");
        callPrivateMethod("com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp", "closeReader", new Class[] {Reader.class}, httpResponseDefaultHandlerImp, new Object[] {stringReader});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCloseReader1() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        callPrivateMethod("com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp", "closeReader", new Class[] {Reader.class}, httpResponseDefaultHandlerImp, new Object[] {null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCloseReader2() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_FAIL");
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        Reader reader = (Reader) Mockingbird.getProxyObject(Reader.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_FAIL", null);
        Mockingbird.enterRecordingMode();
        reader.close();
        Mockingbird.setExceptionForVoid(iOException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        callPrivateMethod("com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp", "closeReader", new Class[] {Reader.class}, httpResponseDefaultHandlerImp, new Object[] {reader});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCloseStream() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        callPrivateMethod("com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp", "closeStream", new Class[] {InputStream.class}, httpResponseDefaultHandlerImp, new Object[] {null});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCloseStream1() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        callPrivateMethod("com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp", "closeStream", new Class[] {InputStream.class}, httpResponseDefaultHandlerImp, new Object[] {new ByteArrayInputStream("testString".getBytes())});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testCloseStream2() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_FAIL");
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_FAIL", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(false, inputStream, "close", "()void", new Object[] {}, iOException, 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        callPrivateMethod("com.huawei.ism.openapi.common.commu.http.HttpResponseDefaultHandlerImp", "closeStream", new Class[] {InputStream.class}, httpResponseDefaultHandlerImp, new Object[] {inputStream});
        assertTrue("Test call resulted in expected outcome", true);
    }
    
    public void testHandleResponse() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        HttpResponse httpResponse = (HttpResponse) Mockingbird.getProxyObject(HttpResponse.class);
        HttpEntity httpEntity = (HttpEntity) Mockingbird.getProxyObject(HttpEntity.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpResponse.getStatusLine(), null);
        Mockingbird.setReturnValue(httpResponse.getEntity(), httpEntity);
        Mockingbird.setReturnValue(httpEntity.isStreaming(), true);
        Mockingbird.setReturnValue(httpEntity.getContent(), inputStream);
        Mockingbird.replaceObjectForRecording(InputStreamReader.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(InputStreamReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "length", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>(java.lang.String)", Mockingbird.getProxyObject(JSONObject.class));
        bufferedReader.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        JSONObject result = httpResponseDefaultHandlerImp.handleResponse(httpResponse, null);
        assertNotNull("result", result);
    }
    
    public void testHandleResponse1() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        HttpResponse httpResponse = (HttpResponse) Mockingbird.getProxyObject(HttpResponse.class);
        HttpEntity httpEntity = (HttpEntity) Mockingbird.getProxyObject(HttpEntity.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpResponse.getStatusLine(), null);
        Mockingbird.setReturnValue(httpResponse.getEntity(), httpEntity);
        Mockingbird.setReturnValue(httpEntity.isStreaming(), true);
        Mockingbird.setReturnValue(httpEntity.getContent(), inputStream);
        Mockingbird.replaceObjectForRecording(InputStreamReader.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(InputStreamReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "length", "()int", new Integer(-1), 1);
        bufferedReader.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        JSONObject result = httpResponseDefaultHandlerImp.handleResponse(httpResponse, null);
        assertNull("result", result);
    }
    
    public void testHandleResponseThrowsApiException() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        StatusLine statusline = new BasicStatusLine(HttpVersion.HTTP_1_0, 100, "testHttpResponseDefaultHandlerImpReasonPhrase");
        HttpResponse response = new BasicHttpResponse(statusline);
        Cookie cookie = (Cookie) Mockingbird.getProxyObject(Cookie.class);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        try {
            httpResponseDefaultHandlerImp.handleResponse(response, cookie);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "", ex.getMessage());
            assertThrownBy(HttpResponseDefaultHandlerImp.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("(BasicHttpResponse) response.getLocale().getDisplayName()", "中文 (中国)", ((BasicHttpResponse) response).getLocale().getDisplayName());
        }
    }
    
    public void testHandleResponseThrowsApiException1() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        HttpResponse httpResponse = (HttpResponse) Mockingbird.getProxyObject(HttpResponse.class);
        StatusLine statusLine = (StatusLine) Mockingbird.getProxyObject(StatusLine.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        LogUtil logUtil2 = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpResponse.getStatusLine(), statusLine);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(httpResponse.getEntity(), null);
        Mockingbird.setReturnValue(statusLine.getStatusCode(), 0);
        Mockingbird.setReturnValue(true, String.class, "format", "(java.lang.String,java.lang.Object[])java.lang.String", "", 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(statusLine.getStatusCode(), 300);
        Mockingbird.setReturnValue(statusLine.getStatusCode(), 0);
        Mockingbird.setReturnValue(statusLine.getReasonPhrase(), "");
        Mockingbird.replaceObjectForRecording(ApiMessage.class, "<init>(long,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(ApiMessage.class));
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil2);
        logUtil2.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        try {
            httpResponseDefaultHandlerImp.handleResponse(httpResponse, null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testHandleResponseThrowsApiException2() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "HTTPRESPONSEEXPMSG");
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "CLIENTPROTOLEXPMSG");
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        HttpResponse httpResponse = (HttpResponse) Mockingbird.getProxyObject(HttpResponse.class);
        HttpEntity httpEntity = (HttpEntity) Mockingbird.getProxyObject(HttpEntity.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpResponse.getStatusLine(), null);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "CLIENTPROTOLEXPMSG", apiMessage);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "HTTPRESPONSEEXPMSG", null);
        Mockingbird.setReturnValue(httpResponse.getEntity(), httpEntity);
        Mockingbird.setReturnValue(httpEntity.isStreaming(), false);
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        logUtil.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        try {
            httpResponseDefaultHandlerImp.handleResponse(httpResponse, null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testHandleResponseThrowsNullPointerException() throws Throwable {
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        Cookie cookie = (Cookie) Mockingbird.getProxyObject(Cookie.class);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        try {
            httpResponseDefaultHandlerImp.handleResponse(null, cookie);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HttpResponseDefaultHandlerImp.class, ex);
        }
    }
    
    public void testHandleResponseThrowsThrowable() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "IOEXPMSG");
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        HttpResponse httpResponse = (HttpResponse) Mockingbird.getProxyObject(HttpResponse.class);
        HttpEntity httpEntity = (HttpEntity) Mockingbird.getProxyObject(HttpEntity.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        IOException iOException = (IOException) Mockingbird.getProxyObject(IOException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpResponse.getStatusLine(), null);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "IOEXPMSG", apiMessage);
        Mockingbird.setReturnValue(httpResponse.getEntity(), httpEntity);
        Mockingbird.setReturnValue(httpEntity.isStreaming(), true);
        Mockingbird.setReturnValue(httpEntity.getContent(), inputStream);
        Mockingbird.replaceObjectForRecording(InputStreamReader.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(InputStreamReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setException(false, bufferedReader, "read", "(char[])int", iOException, 1);
        Mockingbird.setReturnValue(false, iOException, "getMessage", "()java.lang.String", new Object[] {}, "", 1);
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        logUtil.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        bufferedReader.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        try {
            httpResponseDefaultHandlerImp.handleResponse(httpResponse, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testHandleResponseThrowsThrowable1() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        HttpResponseDefaultHandlerImp httpResponseDefaultHandlerImp = new HttpResponseDefaultHandlerImp();
        HttpResponse httpResponse = (HttpResponse) Mockingbird.getProxyObject(HttpResponse.class);
        HttpEntity httpEntity = (HttpEntity) Mockingbird.getProxyObject(HttpEntity.class);
        InputStream inputStream = (InputStream) Mockingbird.getProxyObject(InputStream.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(httpResponse.getStatusLine(), null);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(httpResponse.getEntity(), httpEntity);
        Mockingbird.setReturnValue(httpEntity.isStreaming(), true);
        Mockingbird.setReturnValue(httpEntity.getContent(), inputStream);
        Mockingbird.replaceObjectForRecording(InputStreamReader.class, "<init>(java.io.InputStream)", Mockingbird.getProxyObject(InputStreamReader.class));
        BufferedReader bufferedReader = (BufferedReader) Mockingbird.getProxyObject(BufferedReader.class);
        Mockingbird.replaceObjectForRecording(BufferedReader.class, "<init>(java.io.Reader)", bufferedReader);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, bufferedReader, "read", "(char[])int", new Integer(-1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "length", "()int", new Integer(1), 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setConstructorForException(JSONObject.class, "<init>(java.lang.String)", jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        logUtil.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        bufferedReader.close();
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, inputStream, "close", "()void", new Object[] {}, null, 1);
        Mockingbird.enterTestMode(HttpResponseDefaultHandlerImp.class);
        try {
            httpResponseDefaultHandlerImp.handleResponse(httpResponse, null);
            fail("Expected Throwable to be thrown");
        } catch (Throwable ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

