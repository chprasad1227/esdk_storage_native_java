/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:32:53
 * Time to generate: 01:23.984 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.hostgroup.HostGroupHandlerImp:e061adec24641894b3223ac6554f9bf4
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.hostgroup;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import org.apache.http.client.ClientProtocolException;
import org.json.JSONException;
import org.json.JSONObject;

public class HostGroupHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HostGroupHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
        assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testCountWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "HOSTGROUP");
        HostGroupHandlerImp hostGroupHandlerImp = (HostGroupHandlerImp) Mockingbird.getProxyObject(HostGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        HostGroupMO hostGroupMO = (HostGroupMO) Mockingbird.getProxyObject(HostGroupMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        setPrivateField(hostGroupHandlerImp, "deviceID", "");
        setPrivateField(hostGroupHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(hostGroupMO, "mo", mO);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), hostGroupMO);
        Mockingbird.setReturnValue(false, mO, "getProperty", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(java.lang.String)java.lang.Long", new Long(0L), 1);
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        long result = hostGroupHandlerImp.count(null);
        assertEquals("result", 0L, result);
    }
    
    public void testCreateAssociateWithHostWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "HOST");
        storeStaticField(MOType.class, "HOSTGROUP");
        HostGroupHandlerImp hostGroupHandlerImp = (HostGroupHandlerImp) Mockingbird.getProxyObject(HostGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(hostGroupHandlerImp, "deviceID", "");
        setPrivateField(hostGroupHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(MOType.class, "HOST", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        hostGroupHandlerImp.createAssociateWithHost("", "");
        assertEquals("hostGroupHandlerImp.deviceID", "", getPrivateField(hostGroupHandlerImp, "deviceID"));
        assertNull("hostGroupHandlerImp.restRequestHandler", getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        HostGroupHandlerImp hostGroupHandlerImp = (HostGroupHandlerImp) Mockingbird.getProxyObject(HostGroupHandlerImp.class, true);
        HostGroupMO hostGroupMO = (HostGroupMO) Mockingbird.getProxyObject(HostGroupMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        setPrivateField(hostGroupHandlerImp, "deviceID", "");
        setPrivateField(hostGroupHandlerImp, "restRequestHandler", null);
        setPrivateField(hostGroupMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mO, "properties", null);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(jSONObject.toString(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        HostGroupMO result = hostGroupHandlerImp.create(hostGroupMO);
        assertNull("result", result);
    }
    
    public void testGetBatch() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImpDeviceID");
        String[] sa = new String[1];
        HostGroupQuery cond = new HostGroupQuery(new HostGroupMO(new JSONObject(new JSONObject(), sa)), 100L, 1000L);
        HostGroupIterator batch = hostGroupHandlerImp.getBatch(cond);
        HostGroupIterator result = hostGroupHandlerImp.getBatch(cond);
        assertSame("result", batch, result);
    }
    
    public void testGetBatch1() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImpDeviceID");
        String[] sa = new String[1];
        HostGroupQuery cond = new HostGroupQuery(new HostGroupMO(new JSONObject(new JSONObject(), sa)), 100L, 1000L);
        HostGroupIterator result = hostGroupHandlerImp.getBatch(cond);
        assertSame("hostGroupHandlerImp.hostGroupIterator", result, getPrivateField(hostGroupHandlerImp, "hostGroupIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 1, result.getConcretFilterHeaders().length);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(MOType.class, "HOSTGROUP");
        HostGroupHandlerImp hostGroupHandlerImp = (HostGroupHandlerImp) Mockingbird.getProxyObject(HostGroupHandlerImp.class, true);
        HostGroupMO hostGroupMO = (HostGroupMO) Mockingbird.getProxyObject(HostGroupMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        setPrivateField(hostGroupHandlerImp, "deviceID", "");
        setPrivateField(hostGroupHandlerImp, "restRequestHandler", null);
        setPrivateField(hostGroupMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", null);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(hostGroupMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(jSONObject.toString(), "");
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        hostGroupHandlerImp.modify(hostGroupMO);
        assertEquals("hostGroupHandlerImp.deviceID", "", getPrivateField(hostGroupHandlerImp, "deviceID"));
        assertNull("hostGroupHandlerImp.restRequestHandler", getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveAssociateFromHostWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "HOST");
        storeStaticField(MOType.class, "HOSTGROUP");
        HostGroupHandlerImp hostGroupHandlerImp = (HostGroupHandlerImp) Mockingbird.getProxyObject(HostGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(hostGroupHandlerImp, "deviceID", "");
        setPrivateField(hostGroupHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(MOType.class, "HOST", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"TYPE", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ASSOCIATEOBJID", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        hostGroupHandlerImp.removeAssociateFromHost("", "");
        assertEquals("hostGroupHandlerImp.deviceID", "", getPrivateField(hostGroupHandlerImp, "deviceID"));
        assertNull("hostGroupHandlerImp.restRequestHandler", getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testCountThrowsApiException() throws Throwable {
        try {
            new HostGroupHandlerImp(null, "testHostGroupHandlerImpDeviceID").count(new HostGroupMO());
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCountThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImp\rDeviceID");
        try {
            hostGroupHandlerImp.count(new HostGroupMO());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCountThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        HostGroupMO mo = new HostGroupMO();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.count(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateAssociateWithHostThrowsApiException() throws Throwable {
        try {
            new HostGroupHandlerImp(null, "testHostGroupHandlerImpDeviceID").createAssociateWithHost("testHostGroupHandlerImpHostGroupId", "testHostGroupHandlerImpHostId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateAssociateWithHostThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "HOST");
        storeStaticField(MOType.class, "HOSTGROUP");
        HostGroupHandlerImp hostGroupHandlerImp = (HostGroupHandlerImp) Mockingbird.getProxyObject(HostGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(hostGroupHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(MOType.class, "HOST", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJID", ""), null);
        Mockingbird.setException(jSONObject.put("ASSOCIATEOBJTYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.createAssociateWithHost("", "");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertNull("hostGroupHandlerImp.restRequestHandler", getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateAssociateWithHostThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImp\rDeviceID");
        try {
            hostGroupHandlerImp.createAssociateWithHost("testHostGroupHandlerImpHostGroupId", "testHostGroupHandlerImpHostId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateAssociateWithHostThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.createAssociateWithHost("testHostGroupHandlerImpHostGroupId", "testHostGroupHandlerImpHostId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsApiException() throws Throwable {
        try {
            new HostGroupHandlerImp(null, "testHostGroupHandlerImpDeviceID").create(new HostGroupMO());
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImp\rDeviceID");
        try {
            hostGroupHandlerImp.create(new HostGroupMO());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.create(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testDeleteThrowsApiException() throws Throwable {
        try {
            new HostGroupHandlerImp(null, "testHostGroupHandlerImpDeviceID").delete("testHostGroupHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testDeleteThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImpDeviceID");
        try {
            hostGroupHandlerImp.delete("testHostGroupHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.delete("testHostGroupHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetHostGroupByHostThrowsApiException() throws Throwable {
        try {
            new HostGroupHandlerImp(null, "testHostGroupHandlerImpDeviceID").getHostGroupByHost("testHostGroupHandlerImpHostId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetHostGroupByHostThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImpDeviceID");
        try {
            hostGroupHandlerImp.getHostGroupByHost("testHostGroupHandlerImp\rHostId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetHostGroupByHostThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.getHostGroupByHost("testHostGroupHandlerImpHostId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new HostGroupHandlerImp(null, "testHostGroupHandlerImpDeviceID").get("testHostGroupHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImpDeviceID");
        try {
            hostGroupHandlerImp.get("testHostGroupHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.get("testHostGroupHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("/d#viceManager/rest", 100), "testHostGroupHandlerImpDeviceID");
        try {
            hostGroupHandlerImp.modify(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///d#viceManager/rest:100/deviceManager/restnull", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///d#viceManager/rest:100/deviceManager/restnull", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "HOSTGROUP");
        HostGroupHandlerImp hostGroupHandlerImp = (HostGroupHandlerImp) Mockingbird.getProxyObject(HostGroupHandlerImp.class, true);
        HostGroupMO hostGroupMO = (HostGroupMO) Mockingbird.getProxyObject(HostGroupMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(hostGroupHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "HOSTGROUP", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(hostGroupMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.modify(hostGroupMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertNull("hostGroupHandlerImp.restRequestHandler", getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImp\rDeviceID");
        HostGroupMO mo = new HostGroupMO();
        try {
            hostGroupHandlerImp.modify(mo);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.modify(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsNullPointerException1() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImpDeviceID");
        HostGroupMO mo = new HostGroupMO();
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.modify(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testRemoveAssociateFromHostThrowsApiException() throws Throwable {
        try {
            new HostGroupHandlerImp(null, "testHostGroupHandlerImpDeviceID").removeAssociateFromHost("testHostGroupHandlerImpHostGroupId", "testHostGroupHandlerImpHostId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRemoveAssociateFromHostThrowsIllegalArgumentException() throws Throwable {
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(new RestRequestHandler("testHostGroupHandlerImpIp", 100), "testHostGroupHandlerImpDeviceID");
        try {
            hostGroupHandlerImp.removeAssociateFromHost("testHostGroupHandlerImp\rHostGroupId", "testHostGroupHandlerImpHostId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveAssociateFromHostThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostGroupHandlerImpIp", 100);
        HostGroupHandlerImp hostGroupHandlerImp = new HostGroupHandlerImp(restRequestHandler, "testHostGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostGroupHandlerImp.class);
        try {
            hostGroupHandlerImp.removeAssociateFromHost("testHostGroupHandlerImpHostGroupId", "testHostGroupHandlerImpHostId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostGroupHandlerImp.deviceID", "testHostGroupHandlerImpDeviceID", getPrivateField(hostGroupHandlerImp, "deviceID"));
            assertSame("hostGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(hostGroupHandlerImp, "restRequestHandler"));
        }
    }
}

