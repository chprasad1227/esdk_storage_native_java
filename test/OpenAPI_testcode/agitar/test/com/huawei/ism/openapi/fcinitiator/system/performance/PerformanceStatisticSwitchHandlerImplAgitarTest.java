/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:38:06
 * Time to generate: 00:33.250 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.fcinitiator.system.performance.PerformanceStatisticSwitchHandlerImpl:ad1f622387c0a32f47e13a47b273fd5c
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.fcinitiator.system.performance;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import org.json.JSONException;
import org.json.JSONObject;

public class PerformanceStatisticSwitchHandlerImplAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PerformanceStatisticSwitchHandlerImpl.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testPerformanceStatisticSwitchHandlerImplIp", 100);
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(restRequestHandler, "testPerformanceStatisticSwitchHandlerImplDeviceID");
        assertEquals("performanceStatisticSwitchHandlerImpl.deviceID", "testPerformanceStatisticSwitchHandlerImplDeviceID", getPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID"));
        assertSame("performanceStatisticSwitchHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(performanceStatisticSwitchHandlerImpl, "restRequestHandler"));
    }
    
    public void testGetPerformanceSwitchWithAggressiveMocks() throws Throwable {
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = (PerformanceStatisticSwitchHandlerImpl) Mockingbird.getProxyObject(PerformanceStatisticSwitchHandlerImpl.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID", "");
        setPrivateField(performanceStatisticSwitchHandlerImpl, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), null);
        Mockingbird.enterTestMode(PerformanceStatisticSwitchHandlerImpl.class);
        PerformanceStatisticSwitchMO result = performanceStatisticSwitchHandlerImpl.getPerformanceSwitch();
        assertNull("result", result);
    }
    
    public void testSetPerformanceSwitchWithAggressiveMocks() throws Throwable {
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = (PerformanceStatisticSwitchHandlerImpl) Mockingbird.getProxyObject(PerformanceStatisticSwitchHandlerImpl.class, true);
        PerformanceStatisticSwitchMO performanceStatisticSwitchMO = (PerformanceStatisticSwitchMO) Mockingbird.getProxyObject(PerformanceStatisticSwitchMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID", "");
        setPrivateField(performanceStatisticSwitchHandlerImpl, "restRequestHandler", null);
        setPrivateField(performanceStatisticSwitchMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mO, "properties", null);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(performanceStatisticSwitchMO.getCmoPerformanceSwitch(), "");
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(PerformanceStatisticSwitchHandlerImpl.class);
        performanceStatisticSwitchHandlerImpl.setPerformanceSwitch(performanceStatisticSwitchMO);
        assertEquals("performanceStatisticSwitchHandlerImpl.deviceID", "", getPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID"));
        assertNull("performanceStatisticSwitchHandlerImpl.restRequestHandler", getPrivateField(performanceStatisticSwitchHandlerImpl, "restRequestHandler"));
    }
    
    public void testGetPerformanceSwitchThrowsApiException() throws Throwable {
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(null, "testPerformanceStatisticSwitchHandlerImplDeviceID");
        try {
            performanceStatisticSwitchHandlerImpl.getPerformanceSwitch();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetPerformanceSwitchThrowsIllegalArgumentException() throws Throwable {
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(new RestRequestHandler("testPerformanceStatisticSwitchHandlerImplIp", 100), "testPerformanceStatisticSwitchHandlerImpl\rDeviceID");
        try {
            performanceStatisticSwitchHandlerImpl.getPerformanceSwitch();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetPerformanceSwitchThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testPerformanceStatisticSwitchHandlerImplIp", 100);
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(restRequestHandler, "testPerformanceStatisticSwitchHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(PerformanceStatisticSwitchHandlerImpl.class);
        try {
            performanceStatisticSwitchHandlerImpl.getPerformanceSwitch();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("performanceStatisticSwitchHandlerImpl.deviceID", "testPerformanceStatisticSwitchHandlerImplDeviceID", getPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID"));
            assertSame("performanceStatisticSwitchHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(performanceStatisticSwitchHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testSetPerformanceSwitchThrowsApiException() throws Throwable {
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(null, "testPerformanceStatisticSwitchHandlerImplDeviceID");
        try {
            performanceStatisticSwitchHandlerImpl.setPerformanceSwitch(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testSetPerformanceSwitchThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = (PerformanceStatisticSwitchHandlerImpl) Mockingbird.getProxyObject(PerformanceStatisticSwitchHandlerImpl.class, true);
        PerformanceStatisticSwitchMO performanceStatisticSwitchMO = (PerformanceStatisticSwitchMO) Mockingbird.getProxyObject(PerformanceStatisticSwitchMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(performanceStatisticSwitchMO.getCmoPerformanceSwitch(), "");
        Mockingbird.setException(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", jSONException, 1);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(PerformanceStatisticSwitchHandlerImpl.class);
        try {
            performanceStatisticSwitchHandlerImpl.setPerformanceSwitch(performanceStatisticSwitchMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("performanceStatisticSwitchHandlerImpl.deviceID", "", getPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID"));
            assertNull("performanceStatisticSwitchHandlerImpl.restRequestHandler", getPrivateField(performanceStatisticSwitchHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testSetPerformanceSwitchThrowsIllegalArgumentException() throws Throwable {
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(new RestRequestHandler("testPerformanceStatisticSwitchHandlerImplIp", 100), "testPerformanceStatisticSwitchHandlerImpl\rDeviceID");
        PerformanceStatisticSwitchMO mo = new PerformanceStatisticSwitchMO();
        try {
            performanceStatisticSwitchHandlerImpl.setPerformanceSwitch(mo);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNull("mo.getCmoPerformanceBeginTime()", mo.getCmoPerformanceBeginTime());
        }
    }
    
    public void testSetPerformanceSwitchThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testPerformanceStatisticSwitchHandlerImplIp", 100);
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(restRequestHandler, "testPerformanceStatisticSwitchHandlerImplDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(PerformanceStatisticSwitchHandlerImpl.class);
        try {
            performanceStatisticSwitchHandlerImpl.setPerformanceSwitch(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("performanceStatisticSwitchHandlerImpl.deviceID", "testPerformanceStatisticSwitchHandlerImplDeviceID", getPrivateField(performanceStatisticSwitchHandlerImpl, "deviceID"));
            assertSame("performanceStatisticSwitchHandlerImpl.restRequestHandler", restRequestHandler, getPrivateField(performanceStatisticSwitchHandlerImpl, "restRequestHandler"));
        }
    }
    
    public void testSetPerformanceSwitchThrowsNullPointerException1() throws Throwable {
        PerformanceStatisticSwitchHandlerImpl performanceStatisticSwitchHandlerImpl = new PerformanceStatisticSwitchHandlerImpl(new RestRequestHandler("testPerformanceStatisticSwitchHandlerImplIp", 100), "testPerformanceStatisticSwitchHandlerImplDeviceID");
        PerformanceStatisticSwitchMO mo = new PerformanceStatisticSwitchMO((MO) null);
        try {
            performanceStatisticSwitchHandlerImpl.setPerformanceSwitch(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PerformanceStatisticSwitchMO.class, ex);
        }
    }
}

