/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:26:00
 * Time to generate: 00:33.187 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.batchquery.ApiIterator:592fbb87e71ade6d26e6fe9200d66392
 *
 */

package com.huawei.ism.openapi.common.batchquery;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.alarm.AlarmInfoMO;
import com.huawei.ism.openapi.alarm.AlarmIterator;
import com.huawei.ism.openapi.alarm.AlarmQuery;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.disk.DiskMO;
import com.huawei.ism.openapi.disk.DiskQuery;
import com.huawei.ism.openapi.fcoeport.FCoEPortIterator;
import com.huawei.ism.openapi.fcoeport.FCoEPortMO;
import com.huawei.ism.openapi.fcoeport.FCoEPortQuery;
import com.huawei.ism.openapi.fcport.FCPortMO;
import com.huawei.ism.openapi.fcport.FCPortQuery;
import com.huawei.ism.openapi.iscsiinitiator.ISCSIInitiatorIterator;
import com.huawei.ism.openapi.iscsiinitiator.ISCSIInitiatorMO;
import com.huawei.ism.openapi.iscsiinitiator.ISCSIInitiatorQuery;
import com.huawei.ism.openapi.nas.cifsauthclient.CIFSShareAuthClientIterator;
import com.huawei.ism.openapi.nas.cifsauthclient.CIFSShareAuthClientMO;
import com.huawei.ism.openapi.nas.cifsauthclient.CIFSShareAuthClientQuery;
import com.huawei.ism.openapi.nas.cifsshare.CIFSShareIterator;
import com.huawei.ism.openapi.nas.cifsshare.CIFSShareQuery;
import com.huawei.ism.openapi.nas.filesystem.FileSystemIterator;
import com.huawei.ism.openapi.nas.filesystem.FileSystemMO;
import com.huawei.ism.openapi.nas.filesystem.FileSystemQuery;
import com.huawei.ism.openapi.nas.nfsauthclient.NFSShareAuthClientIterator;
import com.huawei.ism.openapi.nas.nfsauthclient.NFSShareAuthClientMO;
import com.huawei.ism.openapi.nas.nfsauthclient.NFSShareAuthClientQuery;
import com.huawei.ism.openapi.nas.nfsshare.NFSShareIterator;
import com.huawei.ism.openapi.nas.nfsshare.NFSShareMO;
import com.huawei.ism.openapi.nas.nfsshare.NFSShareQuery;
import com.huawei.ism.openapi.portgroup.PortGroupIterator;
import com.huawei.ism.openapi.portgroup.PortGroupMO;
import com.huawei.ism.openapi.portgroup.PortGroupQuery;
import com.huawei.ism.openapi.snapshot.SnapshotIterator;
import com.huawei.ism.openapi.snapshot.SnapshotQuery;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;

public class ApiIteratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ApiIterator.class;
    }
    
    public void testComposeFilterHeader() throws Throwable {
        ApiIterator diskIterator = (ApiIterator) callPrivateMethod("com.huawei.ism.openapi.disk.DiskIterator", "<init>", new Class[] {RestRequestHandler.class, String.class, DiskQuery.class}, null, new Object[] {new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new DiskQuery(new DiskMO(), 100L, 1000L)});
        DiskMO diskMO = new DiskMO(new JSONObject(new IdentityHashMap()));
        diskMO.setId("testApiIteratorId");
        HashMap result = (HashMap) callPrivateMethod("com.huawei.ism.openapi.common.batchquery.ApiIterator", "composeFilterHeader", new Class[] {Object.class}, diskIterator, new Object[] {diskMO});
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"filter\")", "ID::testApiIteratorId", ((Map) result).get("filter"));
    }
    
    public void testComposeFilterHeader1() throws Throwable {
        ApiIterator nFSShareIterator = new NFSShareIterator(null, "testApiIteratorDeviceID", new NFSShareQuery(new NFSShareMO(), 100L, 1000L));
        NFSShareMO nFSShareMO = new NFSShareMO();
        nFSShareMO.setTenancyId(new Long(-100L));
        nFSShareMO.setDescription("testApiIteratorDescription");
        nFSShareMO.setSharePath("testApiIteratorSharePath");
        HashMap result = (HashMap) callPrivateMethod("com.huawei.ism.openapi.common.batchquery.ApiIterator", "composeFilterHeader", new Class[] {Object.class}, nFSShareIterator, new Object[] {nFSShareMO});
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"filter\")", "SHAREPATH::testApiIteratorSharePath%20and%20DESCRIPTION::testApiIteratorDescription", ((Map) result).get("filter"));
    }
    
    public void testComposeFilterHeader2() throws Throwable {
        ApiIterator nFSShareIterator = new NFSShareIterator(null, "testApiIteratorDeviceID", new NFSShareQuery(new NFSShareMO(), 100L, 1000L));
        NFSShareMO nFSShareMO = new NFSShareMO();
        nFSShareMO.setDescription("testApiIteratorDescription");
        nFSShareMO.setSharePath("testApiIteratorSharePath");
        HashMap result = (HashMap) callPrivateMethod("com.huawei.ism.openapi.common.batchquery.ApiIterator", "composeFilterHeader", new Class[] {Object.class}, nFSShareIterator, new Object[] {nFSShareMO});
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"filter\")", "SHAREPATH::testApiIteratorSharePath%20and%20DESCRIPTION::testApiIteratorDescription", ((Map) result).get("filter"));
    }
    
    public void testComposeFilterHeader3() throws Throwable {
        CIFSShareAuthClientMO mo = (CIFSShareAuthClientMO) callPrivateMethod("com.huawei.ism.openapi.nas.cifsauthclient.CIFSShareAuthClientMO", "<init>", new Class[] {JSONObject.class}, null, new Object[] {new JSONObject()});
        ApiIterator cIFSShareAuthClientIterator = new CIFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new CIFSShareAuthClientQuery(mo, 100L, 1000L));
        Object result = callPrivateMethod("com.huawei.ism.openapi.common.batchquery.ApiIterator", "composeFilterHeader", new Class[] {Object.class}, cIFSShareAuthClientIterator, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testComposeRequestHeader() throws Throwable {
        ApiIterator portGroupIterator = new PortGroupIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new PortGroupQuery(new PortGroupMO(), 100L, 1000L));
        HashMap result = (HashMap) portGroupIterator.composeRequestHeader(true);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"range\")", "[100-1100]", result.get("range"));
        assertEquals("(PortGroupIterator) portGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(portGroupIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader1() throws Throwable {
        ApiIterator nFSShareAuthClientIterator = new NFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new NFSShareAuthClientQuery(new NFSShareAuthClientMO(), 100L, 1000L));
        HashMap result = (HashMap) nFSShareAuthClientIterator.composeRequestHeader(false);
        assertEquals("result.size()", 0, result.size());
        assertEquals("(NFSShareAuthClientIterator) nFSShareAuthClientIterator.headerMap.size()", 0, ((Map) getPrivateField(nFSShareAuthClientIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader2() throws Throwable {
        ApiIterator fCPortIterator = (ApiIterator) callPrivateMethod("com.huawei.ism.openapi.fcport.FCPortIterator", "<init>", new Class[] {RestRequestHandler.class, String.class, FCPortQuery.class}, null, new Object[] {new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new FCPortQuery(new FCPortMO(), 100L, 1000L)});
        fCPortIterator.composeRequestHeader(true);
        HashMap result = (HashMap) fCPortIterator.composeRequestHeader(false);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testComposeRequestHeader3() throws Throwable {
        ApiIterator alarmIterator = new AlarmIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new AlarmQuery(new AlarmInfoMO(new JSONObject()), 100L, 1000L), true);
        HashMap result = (HashMap) alarmIterator.composeRequestHeader(true);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"range\")", "[100-1100]", result.get("range"));
        assertEquals("(AlarmIterator) alarmIterator.headerMap.size()", 0, ((Map) getPrivateField(alarmIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader4() throws Throwable {
        ApiIterator snapshotIterator = new SnapshotIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new SnapshotQuery(null, 100L, 1000L));
        HashMap result = (HashMap) snapshotIterator.composeRequestHeader(false);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testComposeRequestHeader5() throws Throwable {
        ApiIterator cIFSShareAuthClientIterator = new CIFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new CIFSShareAuthClientQuery(new CIFSShareAuthClientMO(), 100L, 1000L));
        HashMap result = (HashMap) cIFSShareAuthClientIterator.composeRequestHeader(true);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"range\")", "[100-1100]", result.get("range"));
        assertEquals("(CIFSShareAuthClientIterator) cIFSShareAuthClientIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareAuthClientIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader6() throws Throwable {
        ApiIterator nFSShareAuthClientIterator = new NFSShareAuthClientIterator(null, "testApiIteratorDeviceID", null);
        HashMap result = (HashMap) nFSShareAuthClientIterator.composeRequestHeader(true);
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testComposeRequestHeader7() throws Throwable {
        FCoEPortMO mo = (FCoEPortMO) callPrivateMethod("com.huawei.ism.openapi.fcoeport.FCoEPortMO", "<init>", new Class[] {JSONObject.class}, null, new Object[] {new JSONObject(new IdentityHashMap())});
        ApiIterator fCoEPortIterator = new FCoEPortIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new FCoEPortQuery(mo, 100L, 1000L));
        HashMap result = (HashMap) fCoEPortIterator.composeRequestHeader(true);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"range\")", "[100-1100]", result.get("range"));
        assertEquals("(FCoEPortIterator) fCoEPortIterator.headerMap.size()", 0, ((Map) getPrivateField(fCoEPortIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader8() throws Throwable {
        FCoEPortMO mo = (FCoEPortMO) callPrivateMethod("com.huawei.ism.openapi.fcoeport.FCoEPortMO", "<init>", new Class[] {JSONObject.class}, null, new Object[] {new JSONObject(new IdentityHashMap())});
        ApiIterator fCoEPortIterator = new FCoEPortIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new FCoEPortQuery(mo, 100L, 1000L));
        HashMap result = (HashMap) fCoEPortIterator.composeRequestHeader(false);
        assertEquals("result.size()", 0, result.size());
        assertEquals("(FCoEPortIterator) fCoEPortIterator.headerMap.size()", 0, ((Map) getPrivateField(fCoEPortIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader9() throws Throwable {
        ApiIterator nFSShareAuthClientIterator = new NFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new NFSShareAuthClientQuery(new NFSShareAuthClientMO(), 100L, 1000L));
        nFSShareAuthClientIterator.composeRequestHeader(true);
        HashMap result = (HashMap) nFSShareAuthClientIterator.composeRequestHeader(true);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"range\")", "[100-1100]", result.get("range"));
    }
    
    public void testComposeRequestHeader10() throws Throwable {
        ApiIterator alarmIterator = new AlarmIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new AlarmQuery(new AlarmInfoMO(new JSONObject()), 100L, 1000L), true);
        HashMap result = (HashMap) alarmIterator.composeRequestHeader(false);
        assertEquals("result.size()", 0, result.size());
        assertEquals("(AlarmIterator) alarmIterator.headerMap.size()", 0, ((Map) getPrivateField(alarmIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader11() throws Throwable {
        CIFSShareAuthClientMO mo = (CIFSShareAuthClientMO) callPrivateMethod("com.huawei.ism.openapi.nas.cifsauthclient.CIFSShareAuthClientMO", "<init>", new Class[] {JSONObject.class}, null, new Object[] {new JSONObject()});
        ApiIterator cIFSShareAuthClientIterator = new CIFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new CIFSShareAuthClientQuery(mo, 100L, 1000L));
        HashMap result = (HashMap) cIFSShareAuthClientIterator.composeRequestHeader(false);
        assertEquals("result.size()", 0, result.size());
        assertEquals("(CIFSShareAuthClientIterator) cIFSShareAuthClientIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareAuthClientIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader12() throws Throwable {
        ApiIterator fileSystemIterator = new FileSystemIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new FileSystemQuery(null, 100L, 1000L));
        HashMap result = (HashMap) fileSystemIterator.composeRequestHeader(true);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"range\")", "[100-1100]", result.get("range"));
    }
    
    public void testComposeRequestHeader13() throws Throwable {
        ApiIterator cIFSShareAuthClientIterator = new CIFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new CIFSShareAuthClientQuery(new CIFSShareAuthClientMO(), 100L, 1000L));
        HashMap result = (HashMap) cIFSShareAuthClientIterator.composeRequestHeader(false);
        assertEquals("result.size()", 0, result.size());
        assertEquals("(CIFSShareAuthClientIterator) cIFSShareAuthClientIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareAuthClientIterator, "headerMap")).size());
    }
    
    public void testComposeRequestHeader14() throws Throwable {
        CIFSShareAuthClientMO mo = (CIFSShareAuthClientMO) callPrivateMethod("com.huawei.ism.openapi.nas.cifsauthclient.CIFSShareAuthClientMO", "<init>", new Class[] {JSONObject.class}, null, new Object[] {new JSONObject()});
        ApiIterator cIFSShareAuthClientIterator = new CIFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new CIFSShareAuthClientQuery(mo, 100L, 1000L));
        HashMap result = (HashMap) cIFSShareAuthClientIterator.composeRequestHeader(true);
        assertEquals("result.size()", 1, result.size());
        assertEquals("(HashMap) result.get(\"range\")", "[100-1100]", result.get("range"));
        assertEquals("(CIFSShareAuthClientIterator) cIFSShareAuthClientIterator.headerMap.size()", 0, ((Map) getPrivateField(cIFSShareAuthClientIterator, "headerMap")).size());
    }
    
    public void testGetBatchNext() throws Throwable {
        ApiIterator diskIterator = (ApiIterator) callPrivateMethod("com.huawei.ism.openapi.disk.DiskIterator", "<init>", new Class[] {RestRequestHandler.class, String.class, DiskQuery.class}, null, new Object[] {new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", null});
        List result = diskIterator.getBatchNext();
        assertNull("result", result);
    }
    
    public void testGetBatchNextWithAggressiveMocks() throws Throwable {
        ApiIterator apiIterator = (ApiIterator) Mockingbird.getProxyObject(ApiIterator.class, true);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(apiIterator, "queryCondition", Mockingbird.getProxyObject(QueryBase.class));
        setPrivateField(apiIterator, "curIndex", new Long(0L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(apiIterator.getConcretBatchNext(), list);
        Mockingbird.setReturnValue(list.size(), 0);
        Mockingbird.enterTestMode(ApiIterator.class);
        List result = apiIterator.getBatchNext();
        assertNotNull("result", result);
    }
    
    public void testGetDeviceId() throws Throwable {
        ApiIterator iSCSIInitiatorIterator = new ISCSIInitiatorIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new ISCSIInitiatorQuery(new ISCSIInitiatorMO(), 100L, 1000L));
        String result = iSCSIInitiatorIterator.getDeviceId();
        assertEquals("result", "testApiIteratorDeviceID", result);
    }
    
    public void testGetRestRequestHandler() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testApiIteratorIp", 100);
        ApiIterator nFSShareIterator = new NFSShareIterator(restRequestHandler, "testApiIteratorDeviceID", null);
        RestRequestHandler result = nFSShareIterator.getRestRequestHandler();
        assertSame("result", restRequestHandler, result);
    }
    
    public void testHasNext() throws Throwable {
        ApiIterator nFSShareAuthClientIterator = new NFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", null);
        boolean result = nFSShareAuthClientIterator.hasNext();
        assertFalse("result", result);
    }
    
    public void testHasNext1() throws Throwable {
        ApiIterator iSCSIInitiatorIterator = new ISCSIInitiatorIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new ISCSIInitiatorQuery(new ISCSIInitiatorMO(), -1L, 100L));
        iSCSIInitiatorIterator.updateQuery((ISCSIInitiatorQuery) null);
        boolean result = iSCSIInitiatorIterator.hasNext();
        assertTrue("result", result);
    }
    
    public void testHasNext2() throws Throwable {
        ApiIterator nFSShareAuthClientIterator = new NFSShareAuthClientIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", new NFSShareAuthClientQuery(new NFSShareAuthClientMO(), 1L, 100L));
        nFSShareAuthClientIterator.updateQuery((NFSShareAuthClientQuery) null);
        boolean result = nFSShareAuthClientIterator.hasNext();
        assertFalse("result", result);
    }
    
    public void testHasNextWithAggressiveMocks() throws Throwable {
        ApiIterator apiIterator = (ApiIterator) Mockingbird.getProxyObject(ApiIterator.class, true);
        setPrivateField(apiIterator, "curIndex", new Long(1L));
        setPrivateField(apiIterator, "totalCount", new Long(1L));
        Mockingbird.enterTestMode(ApiIterator.class);
        boolean result = apiIterator.hasNext();
        assertFalse("result", result);
    }
    
    public void testUpdateQuery() throws Throwable {
        ApiIterator nFSShareIterator = new NFSShareIterator(new RestRequestHandler("testApiIteratorIp", 100), "testApiIteratorDeviceID", null);
        nFSShareIterator.updateQuery((NFSShareQuery) null);
        assertNull("(NFSShareIterator) nFSShareIterator.headerMap", getPrivateField(nFSShareIterator, "headerMap"));
        assertEquals("(NFSShareIterator) nFSShareIterator.totalCount", 0L, ((Number) getPrivateField(nFSShareIterator, "totalCount")).longValue());
        assertNull("(NFSShareIterator) nFSShareIterator.getQuery()", nFSShareIterator.getQuery());
    }
    
    public void testGetBatchNextThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class);
        CIFSShareQuery qCondition = (CIFSShareQuery) Mockingbird.getProxyObject(CIFSShareQuery.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(qCondition.getBeginIndex(), 0L);
        Mockingbird.enterTestMode(ApiIterator.class);
        ApiIterator cIFSShareIterator = new CIFSShareIterator(restRequestHandler, "testApiIteratorDeviceID", qCondition);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(qCondition.getCount(), 0L);
        Mockingbird.setReturnValue(qCondition.getConcretMO(), null);
        Mockingbird.enterTestMode(ApiIterator.class);
        try {
            cIFSShareIterator.getBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("(CIFSShareIterator) cIFSShareIterator.curIndex", 0L, ((Number) getPrivateField(cIFSShareIterator, "curIndex")).longValue());
        }
    }
    
    public void testHasNextThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class);
        FileSystemQuery qCondition = (FileSystemQuery) Mockingbird.getProxyObject(FileSystemQuery.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(qCondition.getBeginIndex(), 7L);
        Mockingbird.enterTestMode(ApiIterator.class);
        ApiIterator fileSystemIterator = new FileSystemIterator(restRequestHandler, "testApiIteratorDeviceID", qCondition);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(qCondition.getConcretMO(), Mockingbird.getProxyObject(FileSystemMO.class));
        Mockingbird.enterTestMode(ApiIterator.class);
        try {
            fileSystemIterator.hasNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FileSystemIterator.class, ex);
            assertEquals("(FileSystemIterator) fileSystemIterator.totalCount", 0L, ((Number) getPrivateField(fileSystemIterator, "totalCount")).longValue());
        }
    }
    
    public void testHasNextThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = (RestRequestHandler) Mockingbird.getProxyObject(RestRequestHandler.class);
        SnapshotQuery queryCondition = (SnapshotQuery) Mockingbird.getProxyObject(SnapshotQuery.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(queryCondition.getBeginIndex(), 0L);
        Mockingbird.enterTestMode(ApiIterator.class);
        ApiIterator snapshotIterator = new SnapshotIterator(restRequestHandler, "testApiIteratorDeviceID", queryCondition);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(queryCondition.getConcretMO(), null);
        Mockingbird.enterTestMode(ApiIterator.class);
        try {
            snapshotIterator.hasNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("(SnapshotIterator) snapshotIterator.totalCount", 0L, ((Number) getPrivateField(snapshotIterator, "totalCount")).longValue());
        }
    }
}

