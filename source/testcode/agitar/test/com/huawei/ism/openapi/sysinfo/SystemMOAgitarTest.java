/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:40:34
 * Time to generate: 00:24.391 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.sysinfo.SystemMO:f3e2cc9a658ea232b411f39eef4a3aaa
 *
 */

package com.huawei.ism.openapi.sysinfo;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import org.json.JSONObject;

public class SystemMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SystemMO.class;
    }
    
    public void testConstructor() throws Throwable {
        SystemMO systemMO = new SystemMO();
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        assertEquals("systemMO.getCmoSysUtcTime()", -1L, systemMO.getCmoSysUtcTime().longValue());
        assertEquals("systemMO.getSystemStatus()", EnumDefine.SysStatusE.Unknown, systemMO.getSystemStatus());
    }
    
    public void testConstructor1() throws Throwable {
        SystemMO systemMO = new SystemMO(new JSONObject());
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        assertEquals("systemMO.getCmoSysUtcTime()", -1L, systemMO.getCmoSysUtcTime().longValue());
        assertEquals("systemMO.getSystemStatus()", EnumDefine.SysStatusE.Unknown, systemMO.getSystemStatus());
    }
    
    public void testGetCmoSysUtcTime() throws Throwable {
        SystemMO systemMO = new SystemMO();
        systemMO.setCmoSysUtcTime(new Long(0L));
        Long result = systemMO.getCmoSysUtcTime();
        assertEquals("result", 0L, result.longValue());
    }
    
    public void testGetCmoSysUtcTime1() throws Throwable {
        Long result = new SystemMO().getCmoSysUtcTime();
        assertEquals("result", -1L, result.longValue());
    }
    
    public void testGetDescription() throws Throwable {
        SystemMO systemMO = new SystemMO();
        systemMO.setDescription("testSystemMODescription");
        String result = systemMO.getDescription();
        assertEquals("result", "testSystemMODescription", result);
        assertEquals("systemMO.mo.getProperties().size()", 1, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testGetDescription1() throws Throwable {
        SystemMO systemMO = new SystemMO();
        String result = systemMO.getDescription();
        assertNull("result", result);
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        SystemMO systemMO = new SystemMO();
        String result = systemMO.getId();
        assertNull("result", result);
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testGetLocation() throws Throwable {
        SystemMO systemMO = new SystemMO(new JSONObject());
        String result = systemMO.getLocation();
        assertNull("result", result);
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        SystemMO systemMO = new SystemMO();
        String result = systemMO.getName();
        assertNull("result", result);
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testGetProductVersion() throws Throwable {
        SystemMO systemMO = new SystemMO();
        String result = systemMO.getProductVersion();
        assertNull("result", result);
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testGetWWN() throws Throwable {
        SystemMO systemMO = new SystemMO();
        String result = systemMO.getWWN();
        assertNull("result", result);
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testProtectedGetCmoSysUtcTime() throws Throwable {
        SystemMO systemMO = new SystemMO();
        Long result = systemMO.protectedGetCmoSysUtcTime();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testSetCmoSysUtcTime() throws Throwable {
        SystemMO systemMO = new SystemMO();
        systemMO.setCmoSysUtcTime(new Long(0L));
        assertEquals("systemMO.getCmoSysUtcTime()", 0L, systemMO.getCmoSysUtcTime().longValue());
    }
    
    public void testSetDescription() throws Throwable {
        SystemMO systemMO = new SystemMO();
        systemMO.setDescription("testSystemMODescription");
        assertEquals("systemMO.mo.getProperties().size()", 1, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        assertEquals("systemMO.mo.getProperties().get(\"DESCRIPTION\")", "testSystemMODescription", ((MO) getPrivateField(systemMO, "mo")).getProperties().get("DESCRIPTION"));
        assertEquals("systemMO.mo.getProperties().size()", 1, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
    }
    
    public void testSetSystemStatus() throws Throwable {
        SystemMO systemMO = new SystemMO();
        systemMO.setSystemStatus(EnumDefine.SysStatusE.UPGRADING);
        assertEquals("systemMO.getSystemStatus().getValue()", 5, systemMO.getSystemStatus().getValue());
        assertEquals("systemMO.getSystemStatus()", EnumDefine.SysStatusE.UPGRADING, systemMO.getSystemStatus());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.putOpt("testString", "testString");
        jObject.accumulate("testString", new Integer(100));
        jObject.putOpt("E", "true");
        try {
            new SystemMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 27", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException() throws Throwable {
        SystemMO systemMO = new SystemMO();
        try {
            systemMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemMO.class, ex);
            assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        }
    }
    
    public void testGetProductModeThrowsNumberFormatException() throws Throwable {
        SystemMO systemMO = new SystemMO();
        try {
            systemMO.getProductMode();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException() throws Throwable {
        SystemMO systemMO = new SystemMO();
        try {
            systemMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemMO.class, ex);
            assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        }
    }
    
    public void testPtotectedGetSystemStatusThrowsNullPointerException() throws Throwable {
        SystemMO systemMO = new SystemMO();
        try {
            systemMO.ptotectedGetSystemStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemMO.class, ex);
            assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        }
    }
    
    public void testSetCmoSysUtcTimeThrowsNullPointerException() throws Throwable {
        SystemMO systemMO = new SystemMO();
        try {
            systemMO.setCmoSysUtcTime(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemMO.class, ex);
            assertEquals("systemMO.getCmoSysUtcTime()", -1L, systemMO.getCmoSysUtcTime().longValue());
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        SystemMO systemMO = new SystemMO();
        try {
            systemMO.setDescription(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("systemMO.mo.getProperties().size()", 0, ((MO) getPrivateField(systemMO, "mo")).getProperties().size());
        }
    }
}

