/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:36:02
 * Time to generate: 00:13.109 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.mappingview.MappingViewMO:3f4c4854fc04834f503f57b472089efd
 *
 */

package com.huawei.ism.openapi.mappingview;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import org.json.JSONObject;

public class MappingViewMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MappingViewMO.class;
    }
    
    public void testConstructor() throws Throwable {
        MappingViewMO mappingViewMO = new MappingViewMO();
        assertNotNull("mappingViewMO.mo", getPrivateField(mappingViewMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        MappingViewMO mappingViewMO = new MappingViewMO(new JSONObject());
        assertNotNull("mappingViewMO.mo", getPrivateField(mappingViewMO, "mo"));
    }
    
    public void testGetDescription() throws Throwable {
        MappingViewMO mappingViewMO = new MappingViewMO();
        String result = mappingViewMO.getDescription();
        assertNull("result", result);
        assertNotNull("mappingViewMO.mo", getPrivateField(mappingViewMO, "mo"));
    }
    
    public void testGetId() throws Throwable {
        MappingViewMO mappingViewMO = new MappingViewMO();
        String result = mappingViewMO.getId();
        assertNull("result", result);
        assertNotNull("mappingViewMO.mo", getPrivateField(mappingViewMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        MappingViewMO mappingViewMO = new MappingViewMO();
        MO result = mappingViewMO.getMO();
        assertEquals("result.getProperties().size()", 1, result.getProperties().size());
    }
    
    public void testIsForFileSystem() throws Throwable {
        MappingViewMO mappingViewMO = new MappingViewMO();
        boolean result = mappingViewMO.isForFileSystem();
        assertFalse("result", result);
        assertNotNull("mappingViewMO.mo", getPrivateField(mappingViewMO, "mo"));
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testString", 100);
        jObject.accumulate("testString", "testString");
        try {
            new MappingViewMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
}

