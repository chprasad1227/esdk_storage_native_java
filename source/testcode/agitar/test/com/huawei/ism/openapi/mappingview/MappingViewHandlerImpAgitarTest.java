/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-12 20:06:53
 * Time to generate: 01:19.829 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.mappingview.MappingViewHandlerImp:e898bb984b3b59cdb4a431b5724c860b
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.mappingview;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import org.json.JSONException;
import org.json.JSONObject;

public class MappingViewHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return MappingViewHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testMappingViewHandlerImpIp", 100);
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(restRequestHandler, "testMappingViewHandlerImpDeviceID");
        assertEquals("mappingViewHandlerImp.deviceID", "testMappingViewHandlerImpDeviceID", getPrivateField(mappingViewHandlerImp, "deviceID"));
        assertSame("mappingViewHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
    }
    
    public void testComposeMappItemRequestBody() throws Throwable {
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(new RestRequestHandler("testMappingViewHandlerImpIp", 100), "testMappingViewHandlerImpDeviceID");
        JSONObject result = (JSONObject) callPrivateMethod("com.huawei.ism.openapi.mappingview.MappingViewHandlerImp", "composeMappItemRequestBody", new Class[] {String.class, String.class, MOType.class}, mappingViewHandlerImp, new Object[] {"testMappingViewHandlerImpMappViewID", "testMappingViewHandlerImpItemID", MOType.SAS_PORT});
        assertEquals("result.length()", 4, result.length());
    }
    
    public void testCreateMapWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUNGROUP");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        storeStaticField(MOType.class, "HOSTGROUP");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType3 = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MappingViewMO mappingViewMO = (MappingViewMO) Mockingbird.getProxyObject(MappingViewMO.class);
        OpenApiUtils openApiUtils3 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils4 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(mappingViewHandlerImp, "deviceID", "");
        setPrivateField(mappingViewHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGROUP", mOType);
        setPrivateField(MOType.class, "HOSTGROUP", mOType2);
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType3);
        setPrivateField(mOType3, "value", new Integer(0));
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(openApiUtils2.getUTCTime(), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), mappingViewMO);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject2.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils3);
        Mockingbird.setReturnValue(false, openApiUtils3, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager2 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager2);
        Mockingbird.setReturnValue(restManager2.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject3 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject3);
        Mockingbird.setReturnValue(jSONObject3.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject3, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject3, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject3.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils4);
        Mockingbird.setReturnValue(false, openApiUtils4, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager3 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager3);
        Mockingbird.setReturnValue(restManager3.getPutRequestMO(), null);
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        mappingViewHandlerImp.createMap("", "");
        assertEquals("mappingViewHandlerImp.deviceID", "", getPrivateField(mappingViewHandlerImp, "deviceID"));
        assertNull("mappingViewHandlerImp.restRequestHandler", getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateMapWithAggressiveMocks1() throws Throwable {
        storeStaticField(MOType.class, "LUNGROUP");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        storeStaticField(MOType.class, "PORTGROUP");
        storeStaticField(MOType.class, "HOSTGROUP");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType3 = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType4 = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MappingViewMO mappingViewMO = (MappingViewMO) Mockingbird.getProxyObject(MappingViewMO.class);
        OpenApiUtils openApiUtils3 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils4 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils5 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(mappingViewHandlerImp, "deviceID", "");
        setPrivateField(mappingViewHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGROUP", mOType);
        setPrivateField(MOType.class, "PORTGROUP", mOType2);
        setPrivateField(MOType.class, "HOSTGROUP", mOType3);
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType4);
        setPrivateField(mOType4, "value", new Integer(0));
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(mOType3, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(openApiUtils2.getUTCTime(), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), mappingViewMO);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject2.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils3);
        Mockingbird.setReturnValue(false, openApiUtils3, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager2 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager2);
        Mockingbird.setReturnValue(restManager2.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject3 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject3);
        Mockingbird.setReturnValue(jSONObject3.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject3, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject3, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject3.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils4);
        Mockingbird.setReturnValue(false, openApiUtils4, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager3 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager3);
        Mockingbird.setReturnValue(restManager3.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject4 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject4);
        Mockingbird.setReturnValue(jSONObject4.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject4, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject4, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject4.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils5);
        Mockingbird.setReturnValue(false, openApiUtils5, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager4 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager4);
        Mockingbird.setReturnValue(restManager4.getPutRequestMO(), null);
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        mappingViewHandlerImp.createMap("", "", "");
        assertEquals("mappingViewHandlerImp.deviceID", "", getPrivateField(mappingViewHandlerImp, "deviceID"));
        assertNull("mappingViewHandlerImp.restRequestHandler", getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveMapWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUNGROUP");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(mappingViewHandlerImp, "deviceID", "");
        setPrivateField(mappingViewHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType);
        setPrivateField(MOType.class, "LUNGROUP", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), list);
        Mockingbird.setReturnValue(list.isEmpty(), true);
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        mappingViewHandlerImp.removeMap("", "");
        assertEquals("mappingViewHandlerImp.deviceID", "", getPrivateField(mappingViewHandlerImp, "deviceID"));
        assertNull("mappingViewHandlerImp.restRequestHandler", getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveMapWithAggressiveMocks1() throws Throwable {
        storeStaticField(MOType.class, "LUNGROUP");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        storeStaticField(MOType.class, "HOSTGROUP");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType3 = (MOType) Mockingbird.getProxyObject(MOType.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MappingViewMO mappingViewMO = (MappingViewMO) Mockingbird.getProxyObject(MappingViewMO.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils3 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils4 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(mappingViewHandlerImp, "deviceID", "");
        setPrivateField(mappingViewHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGROUP", mOType);
        setPrivateField(MOType.class, "HOSTGROUP", mOType2);
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType3);
        setPrivateField(mOType3, "value", new Integer(0));
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), list);
        Mockingbird.setReturnValue(list.isEmpty(), false);
        Mockingbird.setReturnValue(list.get(0), mappingViewMO);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager2 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager2);
        Mockingbird.setReturnValue(restManager2.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject2.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils3);
        Mockingbird.setReturnValue(false, openApiUtils3, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager3 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager3);
        Mockingbird.setReturnValue(restManager3.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils4);
        Mockingbird.setReturnValue(false, openApiUtils4, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager4 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager4);
        Mockingbird.setReturnValue(restManager4.getDelRequestMO(), null);
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        mappingViewHandlerImp.removeMap("", "");
        assertEquals("mappingViewHandlerImp.deviceID", "", getPrivateField(mappingViewHandlerImp, "deviceID"));
        assertNull("mappingViewHandlerImp.restRequestHandler", getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveMapWithAggressiveMocks2() throws Throwable {
        storeStaticField(MOType.class, "LUNGROUP");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        setPrivateField(mappingViewHandlerImp, "deviceID", "");
        setPrivateField(mappingViewHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType);
        setPrivateField(MOType.class, "LUNGROUP", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), list);
        Mockingbird.setReturnValue(list.isEmpty(), true);
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        mappingViewHandlerImp.removeMap("", "", "");
        assertEquals("mappingViewHandlerImp.deviceID", "", getPrivateField(mappingViewHandlerImp, "deviceID"));
        assertNull("mappingViewHandlerImp.restRequestHandler", getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveMapWithAggressiveMocks3() throws Throwable {
        storeStaticField(MOType.class, "LUNGROUP");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        storeStaticField(MOType.class, "PORTGROUP");
        storeStaticField(MOType.class, "HOSTGROUP");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType3 = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType4 = (MOType) Mockingbird.getProxyObject(MOType.class);
        List list = (List) Mockingbird.getProxyObject(List.class);
        MappingViewMO mappingViewMO = (MappingViewMO) Mockingbird.getProxyObject(MappingViewMO.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils3 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils4 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        OpenApiUtils openApiUtils5 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(mappingViewHandlerImp, "deviceID", "");
        setPrivateField(mappingViewHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGROUP", mOType);
        setPrivateField(MOType.class, "PORTGROUP", mOType2);
        setPrivateField(MOType.class, "HOSTGROUP", mOType3);
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType4);
        setPrivateField(mOType4, "value", new Integer(0));
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(mOType3, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), list);
        Mockingbird.setReturnValue(list.isEmpty(), false);
        Mockingbird.setReturnValue(list.get(0), mappingViewMO);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager2 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager2);
        Mockingbird.setReturnValue(restManager2.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(false, jSONObject2, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject2.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils3);
        Mockingbird.setReturnValue(false, openApiUtils3, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager3 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager3);
        Mockingbird.setReturnValue(restManager3.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        JSONObject jSONObject3 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject3);
        Mockingbird.setReturnValue(jSONObject3.put("TYPE", 0), null);
        Mockingbird.setReturnValue(false, jSONObject3, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", null, 1);
        Mockingbird.setReturnValue(jSONObject3.put("ASSOCIATEOBJID", ""), null);
        Mockingbird.setReturnValue(jSONObject3.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils4);
        Mockingbird.setReturnValue(false, openApiUtils4, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager4 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager4);
        Mockingbird.setReturnValue(restManager4.getPutRequestMO(), null);
        Mockingbird.setReturnValue(mappingViewMO.getId(), "");
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils5);
        Mockingbird.setReturnValue(false, openApiUtils5, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap2 = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap2);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap2, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager5 = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager5);
        Mockingbird.setReturnValue(restManager5.getDelRequestMO(), null);
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        mappingViewHandlerImp.removeMap("", "", "");
        assertEquals("mappingViewHandlerImp.deviceID", "", getPrivateField(mappingViewHandlerImp, "deviceID"));
        assertNull("mappingViewHandlerImp.restRequestHandler", getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
    }
    
    public void testAddElementToMappViewThrowsIllegalArgumentException() throws Throwable {
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(new RestRequestHandler("testMappingViewHandlerImp\rIp", 100), "testMappingViewHandlerImpDeviceID");
        try {
            callPrivateMethod("com.huawei.ism.openapi.mappingview.MappingViewHandlerImp", "addElementToMappView", new Class[] {JSONObject.class}, mappingViewHandlerImp, new Object[] {new JSONObject()});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testComposeMappItemRequestBodyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        Mockingbird.enterRecordingMode();
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType2);
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", Mockingbird.getProxyObject(ApiMessage.class));
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJID", ""), null);
        Mockingbird.setException(jSONObject.put("ASSOCIATEOBJTYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.mappingview.MappingViewHandlerImp", "composeMappItemRequestBody", new Class[] {String.class, String.class, MOType.class}, mappingViewHandlerImp, new Object[] {"", "", mOType});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testCreateMapThrowsApiException() throws Throwable {
        try {
            new MappingViewHandlerImp(null, "testMappingViewHandlerImpDeviceID").createMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateMapThrowsApiException1() throws Throwable {
        try {
            new MappingViewHandlerImp(null, "testMappingViewHandlerImpDeviceID").createMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpPortGroup", "testMappingViewHandlerImpHostGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateMapThrowsIllegalArgumentException() throws Throwable {
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(new RestRequestHandler("testMappingViewHandlerImpIp", 100), "testMappingViewHandlerImp\rDeviceID");
        try {
            mappingViewHandlerImp.createMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateMapThrowsIllegalArgumentException1() throws Throwable {
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(new RestRequestHandler("testMappingViewHandlerImp\rIp", 100), "testMappingViewHandlerImpDeviceID");
        try {
            mappingViewHandlerImp.createMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpPortGroup", "testMappingViewHandlerImpHostGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateMapThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testMappingViewHandlerImpIp", 100);
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(restRequestHandler, "testMappingViewHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        try {
            mappingViewHandlerImp.createMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("mappingViewHandlerImp.deviceID", "testMappingViewHandlerImpDeviceID", getPrivateField(mappingViewHandlerImp, "deviceID"));
            assertSame("mappingViewHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateMapThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testMappingViewHandlerImpIp", 100);
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(restRequestHandler, "testMappingViewHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        try {
            mappingViewHandlerImp.createMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpPortGroup", "testMappingViewHandlerImpHostGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("mappingViewHandlerImp.deviceID", "testMappingViewHandlerImpDeviceID", getPrivateField(mappingViewHandlerImp, "deviceID"));
            assertSame("mappingViewHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testPrivateCreateMapThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "MAPPINGVIEW");
        MappingViewHandlerImp mappingViewHandlerImp = (MappingViewHandlerImp) Mockingbird.getProxyObject(MappingViewHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(mappingViewHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "MAPPINGVIEW", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(openApiUtils2.getUTCTime(), 0L);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setException(false, jSONObject, "put", "(java.lang.String,java.lang.Object)org.json.JSONObject", jSONException, 1);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.mappingview.MappingViewHandlerImp", "privateCreateMap", new Class[] {}, mappingViewHandlerImp, new Object[] {});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("mappingViewHandlerImp.deviceID", "", getPrivateField(mappingViewHandlerImp, "deviceID"));
            assertNull("mappingViewHandlerImp.restRequestHandler", getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testPrivateDelMappViewThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testMappingViewHandlerImpIp", 100);
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(restRequestHandler, "testMappingViewHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.mappingview.MappingViewHandlerImp", "privateDelMappView", new Class[] {String.class}, mappingViewHandlerImp, new Object[] {"testMappingViewHandlerImpMappViewID"});
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("mappingViewHandlerImp.deviceID", "testMappingViewHandlerImpDeviceID", getPrivateField(mappingViewHandlerImp, "deviceID"));
            assertSame("mappingViewHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testRemoveElementFromMappViewThrowsIllegalArgumentException() throws Throwable {
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(new RestRequestHandler("testMappingViewHandlerImp\rIp", 100), "testMappingViewHandlerImpDeviceID");
        try {
            callPrivateMethod("com.huawei.ism.openapi.mappingview.MappingViewHandlerImp", "removeElementFromMappView", new Class[] {JSONObject.class}, mappingViewHandlerImp, new Object[] {new JSONObject()});
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveMapThrowsApiException() throws Throwable {
        try {
            new MappingViewHandlerImp(null, "testMappingViewHandlerImpDeviceID").removeMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRemoveMapThrowsApiException1() throws Throwable {
        try {
            new MappingViewHandlerImp(null, "testMappingViewHandlerImpDeviceID").removeMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpPortGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRemoveMapThrowsIllegalArgumentException() throws Throwable {
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(new RestRequestHandler("testMappingViewHandlerImpIp", 100), "testMappingViewHandlerImpDeviceID");
        try {
            mappingViewHandlerImp.removeMap("testMappingViewHandlerImp\rLunGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveMapThrowsIllegalArgumentException1() throws Throwable {
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(new RestRequestHandler("testMappingViewHandlerImpIp", 100), "testMappingViewHandlerImpDeviceID");
        try {
            mappingViewHandlerImp.removeMap("testMappingViewHandlerImp\rLunGroupID", "testMappingViewHandlerImpPortGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveMapThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testMappingViewHandlerImpIp", 100);
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(restRequestHandler, "testMappingViewHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        try {
            mappingViewHandlerImp.removeMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("mappingViewHandlerImp.deviceID", "testMappingViewHandlerImpDeviceID", getPrivateField(mappingViewHandlerImp, "deviceID"));
            assertSame("mappingViewHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testRemoveMapThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testMappingViewHandlerImpIp", 100);
        MappingViewHandlerImp mappingViewHandlerImp = new MappingViewHandlerImp(restRequestHandler, "testMappingViewHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(MappingViewHandlerImp.class);
        try {
            mappingViewHandlerImp.removeMap("testMappingViewHandlerImpLunGroupID", "testMappingViewHandlerImpPortGroupID", "testMappingViewHandlerImpHostGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("mappingViewHandlerImp.deviceID", "testMappingViewHandlerImpDeviceID", getPrivateField(mappingViewHandlerImp, "deviceID"));
            assertSame("mappingViewHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(mappingViewHandlerImp, "restRequestHandler"));
        }
    }
}

