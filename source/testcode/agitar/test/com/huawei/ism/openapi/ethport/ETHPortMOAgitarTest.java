/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:29:20
 * Time to generate: 00:31.406 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.ethport.ETHPortMO:7508afbe9b85f2763c3e0140cf93b950
 *
 */

package com.huawei.ism.openapi.ethport;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import java.util.WeakHashMap;
import org.json.JSONObject;

public class ETHPortMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return ETHPortMO.class;
    }
    
    public void testConstructor() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO(new JSONObject());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 0, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetErrorPackets() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        Integer result = eTHPortMO.getErrorPackets();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setId("testETHPortMOId");
        String result = eTHPortMO.getId();
        assertEquals("result", "testETHPortMOId", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetId1() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        String result = eTHPortMO.getId();
        assertNull("result", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetIscsiName() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setIscsiName("testETHPortMOName");
        String result = eTHPortMO.getIscsiName();
        assertEquals("result", "testETHPortMOName", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetIscsiName1() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        String result = eTHPortMO.getIscsiName();
        assertNull("result", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetIscsiTcpPort() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        String result = eTHPortMO.getIscsiTcpPort();
        assertNull("result", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetIscsiTcpPort1() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setIscsiTcpPort("testETHPortMOIscsiTcpPort");
        String result = eTHPortMO.getIscsiTcpPort();
        assertEquals("result", "testETHPortMOIscsiTcpPort", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetLocation() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        String result = eTHPortMO.getLocation();
        assertNull("result", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetLogicType() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setLogicType(EnumDefine.PortLogicTypeE.MAINTENANCE_SRV);
        EnumDefine.PortLogicTypeE result = eTHPortMO.getLogicType();
        assertSame("result", EnumDefine.PortLogicTypeE.MAINTENANCE_SRV, result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetLostPackets() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        Integer result = eTHPortMO.getLostPackets();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetMO() throws Throwable {
        MO result = new ETHPortMO().getMO();
        assertEquals("result.getProperties().size()", 1, result.getProperties().size());
    }
    
    public void testGetMTU() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO(new JSONObject());
        Long result = eTHPortMO.getMTU();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 0, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetMTU1() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setMTU(0L);
        Long result = eTHPortMO.getMTU();
        assertEquals("result", 0L, result.longValue());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetMacAddress() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        String result = eTHPortMO.getMacAddress();
        assertNull("result", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        String result = eTHPortMO.getName();
        assertNull("result", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetName1() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setName("testETHPortMOName");
        String result = eTHPortMO.getName();
        assertEquals("result", "testETHPortMOName", result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetOverflowedPackets() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        Integer result = eTHPortMO.getOverflowedPackets();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetRunningStatus() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setRunningStatus(EnumDefine.RunningStatusE.LEVELING);
        EnumDefine.RunningStatusE result = eTHPortMO.getRunningStatus();
        assertSame("result", EnumDefine.RunningStatusE.LEVELING, result);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetSpeed() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        Integer result = eTHPortMO.getSpeed();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testGetStartTime() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        Integer result = eTHPortMO.getStartTime();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testSetId() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setId("testETHPortMOId");
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
        assertEquals("eTHPortMO.getMO().getProperties().get(\"ID\")", "testETHPortMOId", eTHPortMO.getMO().getProperties().get("ID"));
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testSetIscsiName() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setIscsiName("testETHPortMOName");
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
        assertEquals("eTHPortMO.getMO().getProperties().get(\"ISCSINAME\")", "testETHPortMOName", eTHPortMO.getMO().getProperties().get("ISCSINAME"));
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testSetIscsiTcpPort() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setIscsiTcpPort("testETHPortMOIscsiTcpPort");
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
        assertEquals("eTHPortMO.getMO().getProperties().get(\"ISCSITCPPORT\")", "testETHPortMOIscsiTcpPort", eTHPortMO.getMO().getProperties().get("ISCSITCPPORT"));
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testSetLogicType() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setLogicType(EnumDefine.PortLogicTypeE.MAINTENANCE_SRV);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
        assertEquals("eTHPortMO.getMO().getProperties().get(\"LOGICTYPE\")", new Integer(6), eTHPortMO.getMO().getProperties().get("LOGICTYPE"));
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testSetMTU() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setMTU(100L);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
        assertEquals("eTHPortMO.getMO().getProperties().get(\"MTU\")", new Long(100L), eTHPortMO.getMO().getProperties().get("MTU"));
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testSetName() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setName("testETHPortMOName");
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
        assertEquals("eTHPortMO.getMO().getProperties().get(\"NAME\")", "testETHPortMOName", eTHPortMO.getMO().getProperties().get("NAME"));
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testSetRunningStatus() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        eTHPortMO.setRunningStatus(EnumDefine.RunningStatusE.LEVELING);
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
        assertEquals("eTHPortMO.getMO().getProperties().get(\"RUNNINGSTATUS\")", new Integer(32), eTHPortMO.getMO().getProperties().get("RUNNINGSTATUS"));
        assertEquals("eTHPortMO.getMO().getProperties().size()", 2, eTHPortMO.getMO().getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject value = new JSONObject(new WeakHashMap(100));
        JSONObject jObject = new JSONObject();
        value.put("testETHPortMOKey", 100);
        jObject.put("testETHPortMOKey", value);
        jObject.put("testETHPortMOKey1", 1000);
        try {
            new ETHPortMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 1 column 47", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetHealthStatusThrowsNumberFormatException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.getHealthStatus();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testGetIniOrTgtThrowsNumberFormatException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.getIniOrTgt();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testGetLogicTypeThrowsNumberFormatException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.getLogicType();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testGetRunningStatusThrowsNumberFormatException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.getRunningStatus();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIscsiNameThrowsNullPointerException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.setIscsiName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIscsiTcpPortThrowsNullPointerException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.setIscsiTcpPort(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetLogicTypeThrowsNullPointerException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.setLogicType(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ETHPortMO.class, ex);
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetRunningStatusThrowsNullPointerException() throws Throwable {
        ETHPortMO eTHPortMO = new ETHPortMO();
        try {
            eTHPortMO.setRunningStatus(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(ETHPortMO.class, ex);
            assertEquals("eTHPortMO.getMO().getProperties().size()", 1, eTHPortMO.getMO().getProperties().size());
        }
    }
}

