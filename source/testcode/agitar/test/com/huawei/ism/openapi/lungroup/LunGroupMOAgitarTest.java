/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:34:37
 * Time to generate: 00:14.969 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.lungroup.LunGroupMO:8405f9dddc376ebdb4d2fdb679be2d4d
 *
 */

package com.huawei.ism.openapi.lungroup;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import org.json.JSONObject;

public class LunGroupMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LunGroupMO.class;
    }
    
    public void testConstructor() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO(new JSONObject());
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testGetDescription() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        lunGroupMO.setDescription("testLunGroupMODescription");
        String result = lunGroupMO.getDescription();
        assertEquals("result", "testLunGroupMODescription", result);
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testGetDescription1() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        String result = lunGroupMO.getDescription();
        assertNull("result", result);
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testGetId() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        lunGroupMO.setId("testLunGroupMOId");
        String result = lunGroupMO.getId();
        assertEquals("result", "testLunGroupMOId", result);
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testGetId1() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO(new JSONObject());
        String result = lunGroupMO.getId();
        assertNull("result", result);
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testGetIsAddToMapingView() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        Boolean result = lunGroupMO.getIsAddToMapingView();
        assertFalse("result", result.booleanValue());
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO(new JSONObject());
        MO result = lunGroupMO.getMO();
        assertEquals("result.getProperties().size()", 0, result.getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO(new JSONObject());
        String result = lunGroupMO.getName();
        assertNull("result", result);
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testGetName1() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        lunGroupMO.setName("testLunGroupMOName");
        String result = lunGroupMO.getName();
        assertEquals("result", "testLunGroupMOName", result);
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testSetDescription() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        lunGroupMO.setDescription("testLunGroupMODescription");
        assertEquals("lunGroupMO.mo.getProperties().size()", 2, ((MO) getPrivateField(lunGroupMO, "mo")).getProperties().size());
        assertEquals("lunGroupMO.mo.getProperties().get(\"DESCRIPTION\")", "testLunGroupMODescription", ((MO) getPrivateField(lunGroupMO, "mo")).getProperties().get("DESCRIPTION"));
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testSetId() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        lunGroupMO.setId("testLunGroupMOId");
        assertEquals("lunGroupMO.mo.getProperties().size()", 2, ((MO) getPrivateField(lunGroupMO, "mo")).getProperties().size());
        assertEquals("lunGroupMO.mo.getProperties().get(\"ID\")", "testLunGroupMOId", ((MO) getPrivateField(lunGroupMO, "mo")).getProperties().get("ID"));
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testSetName() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO(new JSONObject());
        lunGroupMO.setName("testLunGroupMOName");
        assertEquals("lunGroupMO.mo.getProperties().size()", 1, ((MO) getPrivateField(lunGroupMO, "mo")).getProperties().size());
        assertEquals("lunGroupMO.mo.getProperties().get(\"NAME\")", "testLunGroupMOName", ((MO) getPrivateField(lunGroupMO, "mo")).getProperties().get("NAME"));
        assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testString", 100);
        jObject.accumulate("testString", new Double(19.426849365234375));
        try {
            new LunGroupMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        try {
            lunGroupMO.setDescription(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        try {
            lunGroupMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        LunGroupMO lunGroupMO = new LunGroupMO();
        try {
            lunGroupMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("lunGroupMO.mo", getPrivateField(lunGroupMO, "mo"));
        }
    }
}

