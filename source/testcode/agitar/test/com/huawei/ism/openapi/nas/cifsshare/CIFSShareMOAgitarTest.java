/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:26:24
 * Time to generate: 00:16.844 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.nas.cifsshare.CIFSShareMO:a5671f5eaf9763bd885bdfc9833e00a2
 *
 */

package com.huawei.ism.openapi.nas.cifsshare;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.model.MO;
import org.json.JSONObject;

public class CIFSShareMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return CIFSShareMO.class;
    }
    
    public void testConstructor() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO();
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 0, cIFSShareMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO(new JSONObject());
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 0, cIFSShareMO.getMO().getProperties().size());
    }
    
    public void testConstructor2() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetAbeEnable() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        Boolean result = cIFSShareMO.getAbeEnable();
        assertFalse("result", result.booleanValue());
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetCount() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        Long result = cIFSShareMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetDescription() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO();
        String result = cIFSShareMO.getDescription();
        assertNull("result", result);
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 0, cIFSShareMO.getMO().getProperties().size());
    }
    
    public void testGetDescription1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("DESCRIPTION"), "");
        Mockingbird.enterTestMode(CIFSShareMO.class);
        String result = cIFSShareMO.getDescription();
        assertEquals("result", "", result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetEnableOpLock() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        Boolean enableOpLock = Boolean.TRUE;
        cIFSShareMO.setEnableOpLock(enableOpLock);
        Boolean result = cIFSShareMO.getEnableOpLock();
        assertSame("result", enableOpLock, result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetEnableOpLock1() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO();
        Boolean result = cIFSShareMO.getEnableOpLock();
        assertFalse("result", result.booleanValue());
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 0, cIFSShareMO.getMO().getProperties().size());
    }
    
    public void testGetFsId() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("FSID"), "1O");
        Mockingbird.enterTestMode(CIFSShareMO.class);
        String result = cIFSShareMO.getFsId();
        assertEquals("result", "1O", result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetFsId1() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO();
        String result = cIFSShareMO.getFsId();
        assertNull("result", result);
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 0, cIFSShareMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setId("testCIFSShareMOId");
        String result = cIFSShareMO.getId();
        assertEquals("result", "testCIFSShareMOId", result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetId1() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        String result = cIFSShareMO.getId();
        assertNull("result", result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetMO() throws Throwable {
        MO mo = new MO();
        MO result = new CIFSShareMO(mo).getMO();
        assertSame("result", mo, result);
    }
    
    public void testGetName() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        String result = cIFSShareMO.getName();
        assertNull("result", result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetName1() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setName("testCIFSShareMOName");
        String result = cIFSShareMO.getName();
        assertEquals("result", "testCIFSShareMOName", result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetSharePath() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        String result = cIFSShareMO.getSharePath();
        assertNull("result", result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetSharePath1() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO();
        cIFSShareMO.setSharePath("testCIFSShareMOSharePath");
        String result = cIFSShareMO.getSharePath();
        assertEquals("result", "testCIFSShareMOSharePath", result);
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
    }
    
    public void testGetTenancyId() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("TENANCYID"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(CIFSShareMO.class);
        Long result = cIFSShareMO.getTenancyId();
        assertSame("result", long2, result);
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetTenancyId1() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        Long result = cIFSShareMO.getTenancyId();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetAbeEnable() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setAbeEnable("testCIFSShareMOAbeEnable");
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"ABEENABLE\")", "testCIFSShareMOAbeEnable", cIFSShareMO.getMO().getProperties().get("ABEENABLE"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetDescription() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setDescription("testCIFSShareMODescription");
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"DESCRIPTION\")", "testCIFSShareMODescription", cIFSShareMO.getMO().getProperties().get("DESCRIPTION"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetEnableOpLock() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setEnableOpLock(Boolean.FALSE);
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"ENABLEOPLOCK\")", Boolean.FALSE, cIFSShareMO.getMO().getProperties().get("ENABLEOPLOCK"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetFsId() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setFsId("testCIFSShareMOFsId");
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"FSID\")", "testCIFSShareMOFsId", cIFSShareMO.getMO().getProperties().get("FSID"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetId() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setId("testCIFSShareMOId");
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"ID\")", "testCIFSShareMOId", cIFSShareMO.getMO().getProperties().get("ID"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetName() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setName("testCIFSShareMOName");
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"NAME\")", "testCIFSShareMOName", cIFSShareMO.getMO().getProperties().get("NAME"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetSharePath() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setSharePath("testCIFSShareMOSharePath");
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"SHAREPATH\")", "testCIFSShareMOSharePath", cIFSShareMO.getMO().getProperties().get("SHAREPATH"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testSetTenancyId() throws Throwable {
        MO mo = new MO();
        CIFSShareMO cIFSShareMO = new CIFSShareMO(mo);
        cIFSShareMO.setTenancyId(new Long(0L));
        assertEquals("cIFSShareMO.getMO().getProperties().size()", 1, cIFSShareMO.getMO().getProperties().size());
        assertEquals("cIFSShareMO.getMO().getProperties().get(\"TENANCYID\")", new Long(0L), cIFSShareMO.getMO().getProperties().get("TENANCYID"));
        assertSame("cIFSShareMO.getMO()", mo, cIFSShareMO.getMO());
    }
    
    public void testGetAbeEnableThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getAbeEnable();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetCountThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetDescriptionThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getDescription();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetEnableOpLockThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getEnableOpLock();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetFsIdThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getFsId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetIdThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetNameThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getName();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetSharePathThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getSharePath();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testGetTenancyIdThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.getTenancyId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetAbeEnableThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setAbeEnable("testCIFSShareMOAbeEnable");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setDescription("testCIFSShareMODescription");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetEnableOpLockThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setEnableOpLock(Boolean.FALSE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetFsIdThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setFsId("testCIFSShareMOFsId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setId("testCIFSShareMOId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setName("testCIFSShareMOName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetSharePathThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setSharePath("testCIFSShareMOSharePath");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
    
    public void testSetTenancyIdThrowsNullPointerException() throws Throwable {
        CIFSShareMO cIFSShareMO = new CIFSShareMO((MO) null);
        try {
            cIFSShareMO.setTenancyId(new Long(0L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(CIFSShareMO.class, ex);
            assertNull("cIFSShareMO.getMO()", cIFSShareMO.getMO());
        }
    }
}

