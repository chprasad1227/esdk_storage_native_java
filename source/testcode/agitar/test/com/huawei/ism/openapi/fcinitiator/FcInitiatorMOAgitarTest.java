/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:30:54
 * Time to generate: 00:25.625 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.fcinitiator.FcInitiatorMO:6264edaee912810c8e93bf7c4207408a
 *
 */

package com.huawei.ism.openapi.fcinitiator;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import org.json.JSONObject;

public class FcInitiatorMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FcInitiatorMO.class;
    }
    
    public void testConstructor() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO(new JSONObject());
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        String result = fcInitiatorMO.getId();
        assertNull("result", result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetId1() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        fcInitiatorMO.setId("testFcInitiatorMOId");
        String result = fcInitiatorMO.getId();
        assertEquals("result", "testFcInitiatorMOId", result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetIsFree() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        Boolean isFree = Boolean.TRUE;
        fcInitiatorMO.setIsFree(isFree);
        Boolean result = fcInitiatorMO.getIsFree();
        assertSame("result", isFree, result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetIsFree1() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        Boolean result = fcInitiatorMO.getIsFree();
        assertFalse("result", result.booleanValue());
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetMO() throws Throwable {
        MO result = new FcInitiatorMO().getMO();
        assertEquals("result.getProperties().size()", 2, result.getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        String result = fcInitiatorMO.getName();
        assertNull("result", result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetName1() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        fcInitiatorMO.setName("testFcInitiatorMOName");
        String result = fcInitiatorMO.getName();
        assertEquals("result", "testFcInitiatorMOName", result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetParentId() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        fcInitiatorMO.setParentId("testFcInitiatorMOId");
        String result = fcInitiatorMO.getParentId();
        assertEquals("result", "testFcInitiatorMOId", result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetParentId1() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        String result = fcInitiatorMO.getParentId();
        assertNull("result", result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetParentName() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        String result = fcInitiatorMO.getParentName();
        assertNull("result", result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testGetParentType() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        MOType result = fcInitiatorMO.getParentType();
        assertEquals("result", MOType.HOST, result);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testSetId() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO(new JSONObject());
        fcInitiatorMO.setId("testFcInitiatorMOId");
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
        assertEquals("fcInitiatorMO.getMO().getProperties().get(\"ID\")", "testFcInitiatorMOId", fcInitiatorMO.getMO().getProperties().get("ID"));
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testSetIsFree() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        fcInitiatorMO.setIsFree(Boolean.FALSE);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
        assertEquals("fcInitiatorMO.getMO().getProperties().get(\"ISFREE\")", Boolean.FALSE, fcInitiatorMO.getMO().getProperties().get("ISFREE"));
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testSetName() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        fcInitiatorMO.setName("testFcInitiatorMOName");
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
        assertEquals("fcInitiatorMO.getMO().getProperties().get(\"NAME\")", "testFcInitiatorMOName", fcInitiatorMO.getMO().getProperties().get("NAME"));
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testSetParentId() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO(new JSONObject());
        fcInitiatorMO.setParentId("testFcInitiatorMOId");
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
        assertEquals("fcInitiatorMO.getMO().getProperties().get(\"PARENTID\")", "testFcInitiatorMOId", fcInitiatorMO.getMO().getProperties().get("PARENTID"));
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 3, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testSetParentType() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        fcInitiatorMO.setParentType(MOType.HOST);
        assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        String[] sa = new String[2];
        JSONObject jObject = new JSONObject(new JSONObject(), sa);
        jObject.put("testString", true);
        jObject.accumulate("testString", new Float(0.0F));
        try {
            new FcInitiatorMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        try {
            fcInitiatorMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FcInitiatorMO.class, ex);
            assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        try {
            fcInitiatorMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FcInitiatorMO.class, ex);
            assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        try {
            fcInitiatorMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        try {
            fcInitiatorMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
        }
    }
    
    public void testSetParentIdThrowsNullPointerException() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        try {
            fcInitiatorMO.setParentId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
        }
    }
    
    public void testSetParentTypeThrowsNullPointerException() throws Throwable {
        FcInitiatorMO fcInitiatorMO = new FcInitiatorMO();
        try {
            fcInitiatorMO.setParentType(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FcInitiatorMO.class, ex);
            assertEquals("fcInitiatorMO.getMO().getProperties().size()", 2, fcInitiatorMO.getMO().getProperties().size());
        }
    }
}

