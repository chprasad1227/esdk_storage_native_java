/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:35:26
 * Time to generate: 01:22.578 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.lungroup.LunGroupHandlerImp:5960806d8f998c2a0a1eb4d7677fe105
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.lungroup;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public class LunGroupHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LunGroupHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        assertNull("lunGroupHandlerImp.lunGroupIterator", getPrivateField(lunGroupHandlerImp, "lunGroupIterator"));
        assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
        assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateAssociateWithLunWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        setPrivateField(lunGroupHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(MOType.class, "LUN", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJID", ""), null);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        lunGroupHandlerImp.createAssociateWithLun("", "");
        assertEquals("lunGroupHandlerImp.deviceID", "", getPrivateField(lunGroupHandlerImp, "deviceID"));
        assertNull("lunGroupHandlerImp.restRequestHandler", getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        LunGroupMO lunGroupMO = (LunGroupMO) Mockingbird.getProxyObject(LunGroupMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        setPrivateField(lunGroupHandlerImp, "restRequestHandler", null);
        setPrivateField(lunGroupMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", map);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, map, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        LunGroupMO result = lunGroupHandlerImp.create(lunGroupMO);
        assertNull("result", result);
    }
    
    public void testDeleteWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        setPrivateField(lunGroupHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        lunGroupHandlerImp.delete("");
        assertEquals("lunGroupHandlerImp.deviceID", "", getPrivateField(lunGroupHandlerImp, "deviceID"));
        assertNull("lunGroupHandlerImp.restRequestHandler", getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testGetBatch() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        LunGroupQuery condition = new LunGroupQuery(null, 100L, 1000L);
        LunGroupIterator batch = lunGroupHandlerImp.getBatch(condition);
        LunGroupIterator result = lunGroupHandlerImp.getBatch(condition);
        assertSame("result", batch, result);
    }
    
    public void testGetBatch1() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        LunGroupIterator result = lunGroupHandlerImp.getBatch(new LunGroupQuery(null, 100L, 1000L));
        assertSame("lunGroupHandlerImp.lunGroupIterator", result, getPrivateField(lunGroupHandlerImp, "lunGroupIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 1, result.getConcretFilterHeaders().length);
    }
    
    public void testGetWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        setPrivateField(lunGroupHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), null);
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        LunGroupMO result = lunGroupHandlerImp.get("");
        assertNull("result", result);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        LunGroupMO lunGroupMO = (LunGroupMO) Mockingbird.getProxyObject(LunGroupMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        setPrivateField(lunGroupHandlerImp, "restRequestHandler", null);
        setPrivateField(lunGroupMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", map);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(lunGroupMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, map, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        lunGroupHandlerImp.modify(lunGroupMO);
        assertEquals("lunGroupHandlerImp.deviceID", "", getPrivateField(lunGroupHandlerImp, "deviceID"));
        assertNull("lunGroupHandlerImp.restRequestHandler", getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testRemoveAssociateFromLunWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        setPrivateField(lunGroupHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(MOType.class, "LUN", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ID", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ASSOCIATEOBJTYPE", ""}, null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"ASSOCIATEOBJID", ""}, null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        lunGroupHandlerImp.removeAssociateFromLun("", "");
        assertEquals("lunGroupHandlerImp.deviceID", "", getPrivateField(lunGroupHandlerImp, "deviceID"));
        assertNull("lunGroupHandlerImp.restRequestHandler", getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateAssociateWithLunThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").createAssociateWithLun("testLunGroupHandlerImpLunGroupID", "testLunGroupHandlerImpLunID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateAssociateWithLunThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "LUN");
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(MOType.class, "LUN", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("ASSOCIATEOBJTYPE", 0), null);
        Mockingbird.setException(jSONObject.put("ASSOCIATEOBJID", ""), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.createAssociateWithLun("", "");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertNull("lunGroupHandlerImp.restRequestHandler", getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateAssociateWithLunThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImp\rDeviceID");
        try {
            lunGroupHandlerImp.createAssociateWithLun("testLunGroupHandlerImpLunGroupID", "testLunGroupHandlerImpLunID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateAssociateWithLunThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.createAssociateWithLun("testLunGroupHandlerImpLunGroupID", "testLunGroupHandlerImpLunID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").create(new LunGroupMO());
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertNull("lunGroupHandlerImp.restRequestHandler", getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImp\rDeviceID");
        try {
            lunGroupHandlerImp.create(new LunGroupMO());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        LunGroupMO mo = new LunGroupMO();
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.create(mo);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsNullPointerException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.create(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testDeleteThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").delete("testLunGroupHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testDeleteThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.delete("testLunGroupHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.delete("testLunGroupHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunGroupbyFCPortThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").getLunGroupbyFCPort("testLunGroupHandlerImpPortID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunGroupbyFCPortThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.getLunGroupbyFCPort("testLunGroupHandlerImp\rPortID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunGroupbyFCPortThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.getLunGroupbyFCPort("testLunGroupHandlerImpPortID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunGroupbyFCoEPortThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").getLunGroupbyFCoEPort("testLunGroupHandlerImpPortID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunGroupbyFCoEPortThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.getLunGroupbyFCoEPort("testLunGroupHandlerImp\rPortID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunGroupbyFCoEPortThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.getLunGroupbyFCoEPort("testLunGroupHandlerImpPortID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunGroupbyHostGroupThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").getLunGroupbyHostGroup("testLunGroupHandlerImpHostGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunGroupbyHostGroupThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.getLunGroupbyHostGroup("testLunGroupHandlerImp\rHostGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunGroupbyHostGroupThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.getLunGroupbyHostGroup("testLunGroupHandlerImpHostGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunGroupbyHostThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").getLunGroupbyHost("testLunGroupHandlerImpHostID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunGroupbyHostThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.getLunGroupbyHost("testLunGroupHandlerImp\rHostID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunGroupbyHostThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.getLunGroupbyHost("testLunGroupHandlerImpHostID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunGroupbyISCSIPortThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").getLunGroupbyISCSIPort("testLunGroupHandlerImpPortID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunGroupbyISCSIPortThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.getLunGroupbyISCSIPort("testLunGroupHandlerImp\rPortID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunGroupbyISCSIPortThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.getLunGroupbyISCSIPort("testLunGroupHandlerImpPortID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunGroupbyLunThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").getLunGroupbyLun("testLunGroupHandlerImpLunID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunGroupbyLunThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.getLunGroupbyLun("testLunGroupHandlerImp\rLunID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunGroupbyLunThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.getLunGroupbyLun("testLunGroupHandlerImpLunID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunGroupbyPortGroupThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").getLunGroupbyPortGroup("testLunGroupHandlerImpPortGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunGroupbyPortGroupThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.getLunGroupbyPortGroup("testLunGroupHandlerImp\rPortGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunGroupbyPortGroupThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.getLunGroupbyPortGroup("testLunGroupHandlerImpPortGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").get("testLunGroupHandlerImpId");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.get("testLunGroupHandlerImp\rId");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.get("testLunGroupHandlerImpId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        LunGroupMO mo = new LunGroupMO();
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").modify(mo);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsApiException1() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").modify(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupHandlerImp lunGroupHandlerImp = (LunGroupHandlerImp) Mockingbird.getProxyObject(LunGroupHandlerImp.class, true);
        LunGroupMO lunGroupMO = (LunGroupMO) Mockingbird.getProxyObject(LunGroupMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(lunGroupHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(lunGroupMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.modify(lunGroupMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertNull("lunGroupHandlerImp.restRequestHandler", getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImp\rIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.modify(null);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.modify(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testRemoveAssociateFromLunThrowsApiException() throws Throwable {
        try {
            new LunGroupHandlerImp(null, "testLunGroupHandlerImpDeviceID").removeAssociateFromLun("testLunGroupHandlerImpLunGroupID", "testLunGroupHandlerImpLunID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testRemoveAssociateFromLunThrowsIllegalArgumentException() throws Throwable {
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(new RestRequestHandler("testLunGroupHandlerImpIp", 100), "testLunGroupHandlerImpDeviceID");
        try {
            lunGroupHandlerImp.removeAssociateFromLun("testLunGroupHandlerImp\rLunGroupID", "testLunGroupHandlerImpLunID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testRemoveAssociateFromLunThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupHandlerImpIp", 100);
        LunGroupHandlerImp lunGroupHandlerImp = new LunGroupHandlerImp(restRequestHandler, "testLunGroupHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupHandlerImp.class);
        try {
            lunGroupHandlerImp.removeAssociateFromLun("testLunGroupHandlerImpLunGroupID", "testLunGroupHandlerImpLunID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupHandlerImp.deviceID", "testLunGroupHandlerImpDeviceID", getPrivateField(lunGroupHandlerImp, "deviceID"));
            assertSame("lunGroupHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunGroupHandlerImp, "restRequestHandler"));
        }
    }
}

