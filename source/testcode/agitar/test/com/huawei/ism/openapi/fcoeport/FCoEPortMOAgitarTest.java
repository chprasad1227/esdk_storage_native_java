/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:30:31
 * Time to generate: 00:26.016 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.fcoeport.FCoEPortMO:0f99f64a79830e1ab1a2568b0c158d0e
 *
 */

package com.huawei.ism.openapi.fcoeport;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;

public class FCoEPortMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FCoEPortMO.class;
    }
    
    public void testConstructor() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO(new JSONObject());
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 0, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetErrorPackets() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO(new JSONObject());
        Integer result = fCoEPortMO.getErrorPackets();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 0, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        String result = fCoEPortMO.getId();
        assertNull("result", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetId1() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        fCoEPortMO.setId("testFCoEPortMOId");
        String result = fCoEPortMO.getId();
        assertEquals("result", "testFCoEPortMOId", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 2, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetLocation() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        String result = fCoEPortMO.getLocation();
        assertNull("result", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetLostPackets() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        Integer result = fCoEPortMO.getLostPackets();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetMO() throws Throwable {
        MO result = new FCoEPortMO().getMO();
        assertEquals("result.getProperties().size()", 1, result.getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        fCoEPortMO.setName("testFCoEPortMOName");
        String result = fCoEPortMO.getName();
        assertEquals("result", "testFCoEPortMOName", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 2, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetName1() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        String result = fCoEPortMO.getName();
        assertNull("result", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetRunSpeed() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO(new JSONObject());
        Integer result = fCoEPortMO.getRunSpeed();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 0, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetStartTime() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        Integer result = fCoEPortMO.getStartTime();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetVlanId() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        String result = fCoEPortMO.getVlanId();
        assertNull("result", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetVlanId1() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        fCoEPortMO.setVlanId("testFCoEPortMOId");
        String result = fCoEPortMO.getVlanId();
        assertEquals("result", "testFCoEPortMOId", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 2, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testGetWWN() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO(new JSONObject());
        String result = fCoEPortMO.getWWN();
        assertNull("result", result);
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 0, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testSetId() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO(new JSONObject());
        fCoEPortMO.setId("testFCoEPortMOId");
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        assertEquals("fCoEPortMO.getMO().getProperties().get(\"ID\")", "testFCoEPortMOId", fCoEPortMO.getMO().getProperties().get("ID"));
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testSetName() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO(new JSONObject());
        fCoEPortMO.setName("testFCoEPortMOName");
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        assertEquals("fCoEPortMO.getMO().getProperties().get(\"NAME\")", "testFCoEPortMOName", fCoEPortMO.getMO().getProperties().get("NAME"));
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testSetVlanId() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO(new JSONObject());
        fCoEPortMO.setVlanId("testFCoEPortMOId");
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        assertEquals("fCoEPortMO.getMO().getProperties().get(\"VLANID\")", "testFCoEPortMOId", fCoEPortMO.getMO().getProperties().get("VLANID"));
        assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put(new Integer(32), new JSONArray());
        try {
            new FCoEPortMO(new JSONObject(map));
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 8", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetHealthStatusThrowsNumberFormatException() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        try {
            fCoEPortMO.getHealthStatus();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        }
    }
    
    public void testGetIniOrTgtThrowsNumberFormatException() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        try {
            fCoEPortMO.getIniOrTgt();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        }
    }
    
    public void testGetLogicTypeThrowsNumberFormatException() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        try {
            fCoEPortMO.getLogicType();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        }
    }
    
    public void testGetRunningStatusThrowsNumberFormatException() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        try {
            fCoEPortMO.getRunningStatus();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        try {
            fCoEPortMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        try {
            fCoEPortMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        }
    }
    
    public void testSetVlanIdThrowsNullPointerException() throws Throwable {
        FCoEPortMO fCoEPortMO = new FCoEPortMO();
        try {
            fCoEPortMO.setVlanId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("fCoEPortMO.getMO().getProperties().size()", 1, fCoEPortMO.getMO().getProperties().size());
        }
    }
}

