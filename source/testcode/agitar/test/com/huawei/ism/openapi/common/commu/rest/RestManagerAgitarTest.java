/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:44:56
 * Time to generate: 06:39.875 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.commu.rest.RestManager:64bc510907d35db1acbb111822cde9c9
 *
 */

package com.huawei.ism.openapi.common.commu.rest;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.ClientConnectionManager;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class RestManagerAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return RestManager.class;
    }
    
    public void testConstructor() throws Throwable {
        JSONObject body = new JSONObject();
        Map headerParams = new HashMap(100, 100.0F);
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, body);
        assertSame("restManager.headerParams", headerParams, getPrivateField(restManager, "headerParams"));
        assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
        assertEquals("restManager.relativePath", "testRestManagerRelativePath", getPrivateField(restManager, "relativePath"));
        assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
        assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
        assertSame("restManager.body", body, getPrivateField(restManager, "body"));
        assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
        assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
    }
    
    public void testFormModelItem() throws Throwable {
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", 100L);
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(String.class, new RestRequestHandler("testRestManagerIp", 100), "testRestManagerRelativePath", headerParams, body);
        Object result = callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelItem", new Class[] {Class.class, JSONObject.class}, restManager, new Object[] {Integer.class, null});
        assertNull("result", result);
    }
    
    public void testFormModelMo() throws Throwable {
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        body.putOpt("testRestManagerKey", null);
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(Object.class, new RestRequestHandler("testRestManagerIp", 100), "testRestManagerRelativePath", headerParams, body);
        Object result = callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMo", new Class[] {Class.class}, restManager, new Object[] {Integer.class});
        assertNull("result", result);
    }
    
    public void testFormModelMoList() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        RestManager restManager = new RestManager(Object.class, restRequestHandler, "testRestManagerRelativePath", new HashMap(100, 100.0F), new JSONObject());
        Object result = callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMoList", new Class[] {Class.class}, restManager, new Object[] {Integer.class});
        assertNull("result", result);
    }
    
    public void testFormModelMoListWithAggressiveMocks() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONArray jSONArray = (JSONArray) Mockingbird.getProxyObject(JSONArray.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        setPrivateField(restManager, "isJsonArray", Boolean.TRUE);
        setPrivateField(restManager, "jContents", jSONArray);
        Mockingbird.setReturnValue(jSONArray.length(), 1);
        Mockingbird.setReturnValue(jSONArray.getJSONObject(0), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(jSONArray.length(), 2);
        Mockingbird.setReturnValue(jSONArray.getJSONObject(1), null);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(jSONArray.length(), 1);
        Mockingbird.setReturnValue(arrayList.isEmpty(), true);
        Mockingbird.enterTestMode(RestManager.class);
        List result = (List) callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMoList", new Class[] {Class.class}, restManager, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testFormModelMoListWithAggressiveMocks1() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        setPrivateField(restManager, "isJsonArray", Boolean.TRUE);
        setPrivateField(restManager, "jContents", null);
        Mockingbird.setReturnValue(arrayList.isEmpty(), true);
        Mockingbird.enterTestMode(RestManager.class);
        List result = (List) callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMoList", new Class[] {Class.class}, restManager, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testFormModelMoListWithAggressiveMocks2() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONArray jSONArray = (JSONArray) Mockingbird.getProxyObject(JSONArray.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        setPrivateField(restManager, "isJsonArray", Boolean.TRUE);
        setPrivateField(restManager, "jContents", jSONArray);
        Mockingbird.setReturnValue(jSONArray.length(), 1);
        Mockingbird.setReturnValue(jSONArray.getJSONObject(0), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(jSONArray.length(), 2);
        Mockingbird.setReturnValue(jSONArray.getJSONObject(1), null);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(jSONArray.length(), 1);
        Mockingbird.setReturnValue(arrayList.isEmpty(), false);
        Mockingbird.enterTestMode(RestManager.class);
        List result = (List) callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMoList", new Class[] {Class.class}, restManager, new Object[] {null});
        assertNotNull("result", result);
    }
    
    public void testFormModelMoWithAggressiveMocks() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONArray jSONArray = (JSONArray) Mockingbird.getProxyObject(JSONArray.class);
        setPrivateField(restManager, "isJsonArray", Boolean.TRUE);
        setPrivateField(restManager, "jContents", jSONArray);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONArray.length(), 0);
        Mockingbird.enterTestMode(RestManager.class);
        Object result = callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMo", new Class[] {Class.class}, restManager, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testFormModelMoWithAggressiveMocks1() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        setPrivateField(restManager, "jContents", jSONObject);
        setPrivateField(restManager, "isJsonArray", Boolean.FALSE);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "formModelItem", "(java.lang.Class,org.json.JSONObject)java.lang.Object", new Object[] {null, jSONObject}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        Object result = callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMo", new Class[] {Class.class}, restManager, new Object[] {null});
        assertNull("result", result);
    }
    
    public void testGetDelRequestMOListWithAggressiveMocks() throws Throwable {
        storeStaticField(RestManager.HttpRequestType.class, "DEL_REQUEST");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        setPrivateField(restManager, "objClass", null);
        setPrivateField(RestManager.HttpRequestType.class, "DEL_REQUEST", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "getHttpRequestResult", "(com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, restManager, "formModelMoList", "(java.lang.Class)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        List result = restManager.getDelRequestMOList();
        assertNull("result", result);
    }
    
    public void testGetDelRequestMOWithAggressiveMocks() throws Throwable {
        storeStaticField(RestManager.HttpRequestType.class, "DEL_REQUEST");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        setPrivateField(restManager, "objClass", null);
        setPrivateField(RestManager.HttpRequestType.class, "DEL_REQUEST", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "getHttpRequestResult", "(com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, restManager, "formModelMo", "(java.lang.Class)java.lang.Object", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        Object result = restManager.getDelRequestMO();
        assertNull("result", result);
    }
    
    public void testGetGetRequestMOListWithAggressiveMocks() throws Throwable {
        storeStaticField(RestManager.HttpRequestType.class, "GET_REQUEST");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        setPrivateField(restManager, "objClass", null);
        setPrivateField(RestManager.HttpRequestType.class, "GET_REQUEST", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "getHttpRequestResult", "(com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, restManager, "formModelMoList", "(java.lang.Class)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        List result = restManager.getGetRequestMOList();
        assertNull("result", result);
    }
    
    public void testGetPostRequestMOListWithAggressiveMocks() throws Throwable {
        storeStaticField(RestManager.HttpRequestType.class, "POST_REQUEST");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        setPrivateField(restManager, "objClass", null);
        setPrivateField(RestManager.HttpRequestType.class, "POST_REQUEST", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "getHttpRequestResult", "(com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, restManager, "formModelMoList", "(java.lang.Class)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        List result = restManager.getPostRequestMOList();
        assertNull("result", result);
    }
    
    public void testGetPostRequestMOWithAggressiveMocks() throws Throwable {
        storeStaticField(RestManager.HttpRequestType.class, "POST_REQUEST");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        setPrivateField(restManager, "objClass", null);
        setPrivateField(RestManager.HttpRequestType.class, "POST_REQUEST", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "getHttpRequestResult", "(com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, restManager, "formModelMo", "(java.lang.Class)java.lang.Object", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        Object result = restManager.getPostRequestMO();
        assertNull("result", result);
    }
    
    public void testGetPutRequestMOListWithAggressiveMocks() throws Throwable {
        storeStaticField(RestManager.HttpRequestType.class, "PUT_REQUEST");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        setPrivateField(restManager, "objClass", null);
        setPrivateField(RestManager.HttpRequestType.class, "PUT_REQUEST", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "getHttpRequestResult", "(com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, restManager, "formModelMoList", "(java.lang.Class)java.util.List", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        List result = restManager.getPutRequestMOList();
        assertNull("result", result);
    }
    
    public void testGetPutRequestMOWithAggressiveMocks() throws Throwable {
        storeStaticField(RestManager.HttpRequestType.class, "PUT_REQUEST");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        setPrivateField(restManager, "objClass", null);
        setPrivateField(RestManager.HttpRequestType.class, "PUT_REQUEST", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, restManager, "getHttpRequestResult", "(com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType)void", new Object[] {null}, null, 1);
        Mockingbird.setReturnValue(false, restManager, "formModelMo", "(java.lang.Class)java.lang.Object", new Object[] {null}, null, 1);
        Mockingbird.enterTestMode(RestManager.class);
        Object result = restManager.getPutRequestMO();
        assertNull("result", result);
    }
    
    public void testHttpRequestTypeValues() throws Throwable {
        RestManager.HttpRequestType[] result = RestManager.HttpRequestType.values();
        assertEquals("result.length", 4, result.length);
    }
    
    public void testResolveResponse() throws Throwable {
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(Integer.class, new RestRequestHandler("testRestManagerIp", 100), "testRestManagerRelativePath", headerParams, new JSONObject());
        callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {null});
        assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
        assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
        assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
    }
    
    public void testResolveResponseWithAggressiveMocks() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        JSONArray jSONArray = (JSONArray) Mockingbird.getProxyObject(JSONArray.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 0);
        Mockingbird.setReturnValue(jSONObject.has("data"), true);
        Mockingbird.setReturnValue(jSONObject.get("data"), obj);
        Mockingbird.setReturnValue(jSONObject.get("data"), jSONArray);
        Mockingbird.enterTestMode(RestManager.class);
        callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
        assertEquals("restManager.errorCode", 0, ((Number) getPrivateField(restManager, "errorCode")).intValue());
        assertTrue("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
        assertNotNull("restManager.jContents", getPrivateField(restManager, "jContents"));
    }
    
    public void testResolveResponseWithAggressiveMocks1() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        JSONObject jSONObject3 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 0);
        Mockingbird.setReturnValue(jSONObject.has("data"), true);
        Mockingbird.setReturnValue(jSONObject.get("data"), obj);
        Mockingbird.setReturnValue(jSONObject.get("data"), jSONObject3);
        Mockingbird.enterTestMode(RestManager.class);
        callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
        assertEquals("restManager.errorCode", 0, ((Number) getPrivateField(restManager, "errorCode")).intValue());
        assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
        assertNotNull("restManager.jContents", getPrivateField(restManager, "jContents"));
    }
    
    public void testResolveResponseWithAggressiveMocks2() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 0);
        Mockingbird.setReturnValue(jSONObject.has("data"), true);
        Mockingbird.setReturnValue(jSONObject.get("data"), obj);
        Mockingbird.setReturnValue(jSONObject.get("data"), null);
        Mockingbird.enterTestMode(RestManager.class);
        callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
        assertEquals("restManager.errorCode", 0, ((Number) getPrivateField(restManager, "errorCode")).intValue());
        assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
        assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
    }
    
    public void testResolveResponseWithAggressiveMocks3() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 0);
        Mockingbird.setReturnValue(jSONObject.has("data"), false);
        Mockingbird.enterTestMode(RestManager.class);
        callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
        assertEquals("restManager.errorCode", 0, ((Number) getPrivateField(restManager, "errorCode")).intValue());
        assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
        assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
    }
    
    public void testResolveResponseWithAggressiveMocks4() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 0);
        Mockingbird.setReturnValue(jSONObject.has("data"), true);
        Mockingbird.setReturnValue(jSONObject.get("data"), null);
        Mockingbird.enterTestMode(RestManager.class);
        callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
        assertEquals("restManager.errorCode", 0, ((Number) getPrivateField(restManager, "errorCode")).intValue());
        assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
        assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
    }
    
    public void testFormModelItemThrowsApiException() throws Throwable {
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", 100);
        RestManager restManager = new RestManager(Object.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), body);
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelItem", new Class[] {Class.class, JSONObject.class}, restManager, new Object[] {String.class, new JSONObject()});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "java.lang.String.<init>(org.json.JSONObject)", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "java.lang.String.<init>(org.json.JSONObject)", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getMessage()", "java.lang.String.<init>(org.json.JSONObject)", ex.getException().getMessage());
        }
    }
    
    public void testFormModelMoListThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONArray jSONArray = (JSONArray) Mockingbird.getProxyObject(JSONArray.class);
        Mockingbird.enterRecordingMode();
        ArrayList arrayList = (ArrayList) Mockingbird.getProxyObject(ArrayList.class);
        Mockingbird.replaceObjectForRecording(ArrayList.class, "<init>()", arrayList);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        setPrivateField(restManager, "isJsonArray", Boolean.TRUE);
        setPrivateField(restManager, "jContents", jSONArray);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", Mockingbird.getProxyObject(ApiMessage.class));
        Mockingbird.setReturnValue(jSONArray.length(), 1);
        Mockingbird.setReturnValue(jSONArray.getJSONObject(0), null);
        Boolean boolean2 = Boolean.FALSE;
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(jSONArray.length(), 2);
        Mockingbird.setReturnValue(jSONArray.getJSONObject(1), null);
        Mockingbird.setReturnValue(false, arrayList, "add", "(java.lang.Object)boolean", boolean2, 1);
        Mockingbird.setReturnValue(jSONArray.length(), 3);
        Mockingbird.setException(jSONArray.getJSONObject(2), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMoList", new Class[] {Class.class}, restManager, new Object[] {null});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testFormModelMoThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONArray jSONArray = (JSONArray) Mockingbird.getProxyObject(JSONArray.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        setPrivateField(restManager, "isJsonArray", Boolean.TRUE);
        setPrivateField(restManager, "jContents", jSONArray);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", Mockingbird.getProxyObject(ApiMessage.class));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONArray.length(), 1);
        Mockingbird.setException(jSONArray.getJSONObject(0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "formModelMo", new Class[] {Class.class}, restManager, new Object[] {null});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetDelRequestMOListThrowsApiException() throws Throwable {
        JSONObject body = new JSONObject();
        body.accumulate("testRestManagerKey", new Double(1.5591961145401));
        RestManager restManager = new RestManager(Integer.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), body);
        try {
            restManager.getDelRequestMOList();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetDelRequestMOListThrowsApiException1() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManager/rest", 100);
        RestManager restManager = new RestManager(String.class, restRequestHandler, "testRestManagerRelativePath", new HashMap(100, 100.0F), new JSONObject());
        try {
            restManager.getDelRequestMOList();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restManager, "restRequestHandler"), "httpClientManager");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClient")).getConnectionManager();
            assertNotNull("restManager.restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManager/rest:100/deviceManager/resttestRestManagerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManager/rest:100/deviceManager/resttestRestManagerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", String.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetDelRequestMOListThrowsIllegalArgumentException() throws Throwable {
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("responseEntityk[%s]", "");
        body.accumulate("testRestManagerKey", "");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, body);
        try {
            restManager.getDelRequestMOList();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetDelRequestMOListThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testString", headerParams, new JSONObject(new HashMap(1000, 1000.0F)));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restDelRequest("testString", headerParams), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getDelRequestMOList();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetDelRequestMOThrowsApiException() throws Throwable {
        RestManager restManager = new RestManager(Integer.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), new JSONObject(new HashMap(1000, 1000.0F)));
        try {
            restManager.getDelRequestMO();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetDelRequestMOThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        body.accumulate("testRestManagerKey", "");
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("the restRequestHandler is Anull", "testString");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, body);
        try {
            restManager.getDelRequestMO();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetDelRequestMOThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", new Double(-100.0));
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(Object.class, restRequestHandler, "xi", headerParams, body);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restDelRequest("xi", headerParams), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getDelRequestMO();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Object.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetGetRequestMOListThrowsApiException() throws Throwable {
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        body.accumulate("testRestManagerKey", "");
        RestManager restManager = new RestManager(Integer.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), body);
        try {
            restManager.getGetRequestMOList();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetGetRequestMOListThrowsIllegalArgumentException() throws Throwable {
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("responseEntityk[%s]", "");
        body.accumulate("testRestManagerKey", "");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, body);
        try {
            restManager.getGetRequestMOList();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetGetRequestMOListThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testString", headerParams, new JSONObject());
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restGetRequest("testString", headerParams), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getGetRequestMOList();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetGetRequestMOThrowsApiException() throws Throwable {
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", 100.0);
        RestManager restManager = new RestManager(Integer.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), body);
        try {
            restManager.getGetRequestMO();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetGetRequestMOThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("testString", "Iq>={8z 9?!h \nNS?qP");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, new JSONObject());
        try {
            restManager.getGetRequestMO();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetGetRequestMOThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject();
        body.accumulate("testRestManagerKey", "");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testString", headerParams, body);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restGetRequest("testString", headerParams), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getGetRequestMO();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPostRequestMOListThrowsApiException() throws Throwable {
        RestManager restManager = new RestManager(String.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), new JSONObject());
        try {
            restManager.getPostRequestMOList();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", String.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPostRequestMOListThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManager\rRelativePath", new HashMap(100, 100.0F), new JSONObject(new HashMap(1000, 1000.0F)));
        try {
            restManager.getPostRequestMOList();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPostRequestMOListThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", true);
        RestManager restManager = new RestManager(Object.class, restRequestHandler, "", headerParams, body);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restPostRequest("", headerParams, body), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getPostRequestMOList();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Object.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPostRequestMOThrowsApiException() throws Throwable {
        RestManager restManager = new RestManager(Integer.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), new JSONObject(new HashMap(1000, 1000.0F)));
        try {
            restManager.getPostRequestMO();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPostRequestMOThrowsIllegalArgumentException() throws Throwable {
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("responseEntityk[%s]", "");
        body.accumulate("testRestManagerKey", "");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, body);
        try {
            restManager.getPostRequestMO();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPostRequestMOThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        JSONObject body = new JSONObject(new HashMap(100, 100.0F));
        Map headerParams = new HashMap(1000, 1000.0F);
        body.putOpt("testRestManagerKey", new Object());
        RestManager restManager = new RestManager(Object.class, restRequestHandler, "urror", headerParams, body);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restPostRequest("urror", headerParams, body), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getPostRequestMO();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Object.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPutRequestMOListThrowsApiException() throws Throwable {
        Map headerParams = new HashMap(100, 100.0F);
        RestRequestHandler restRequestHandler = new RestRequestHandler("/deviceManager/rest", 100);
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, new JSONObject());
        try {
            restManager.getPutRequestMOList();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            Object privateField = getPrivateField(getPrivateField(restManager, "restRequestHandler"), "httpClientManager");
            ClientConnectionManager connectionManager = ((HttpClient) getPrivateField(privateField, "httpClient")).getConnectionManager();
            assertNotNull("restManager.restRequestHandler.httpClientManager.httpClient.getConnectionManager().getSchemeRegistry()", connectionManager.getSchemeRegistry());
            assertEquals("ex.getMessage()", "URI does not specify a valid host name: https:///deviceManager/rest:100/deviceManager/resttestRestManagerRelativePath", ex.getMessage());
            assertThrownBy(RestRequestHandler.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "URI does not specify a valid host name: https:///deviceManager/rest:100/deviceManager/resttestRestManagerRelativePath", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getClass()", ClientProtocolException.class, ex.getException().getClass());
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPutRequestMOListThrowsApiException1() throws Throwable {
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", 100.0);
        RestManager restManager = new RestManager(Integer.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), body);
        try {
            restManager.getPutRequestMOList();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPutRequestMOListThrowsIllegalArgumentException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        body.accumulate("testRestManagerKey", "");
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("the restRequestHandler is Anull", "testString");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, body);
        try {
            restManager.getPutRequestMOList();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPutRequestMOListThrowsNullPointerException() throws Throwable {
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", 100.0);
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(Object.class, restRequestHandler, "testString", headerParams, body);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restPutRequest("testString", headerParams, body), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getPutRequestMOList();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Object.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPutRequestMOThrowsApiException() throws Throwable {
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        body.accumulate("testRestManagerKey", "");
        RestManager restManager = new RestManager(Integer.class, null, "testRestManagerRelativePath", new HashMap(100, 100.0F), body);
        try {
            restManager.getPutRequestMO();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.restRequestHandler", getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPutRequestMOThrowsIllegalArgumentException() throws Throwable {
        String[] sa = new String[2];
        JSONObject body = new JSONObject(new JSONObject(), sa);
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        headerParams.put("responseEntityk[%s]", "");
        body.accumulate("testRestManagerKey", "");
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "testRestManagerRelativePath", headerParams, body);
        try {
            restManager.getPutRequestMO();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testGetPutRequestMOThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testRestManagerIp", 100);
        Map headerParams = new HashMap(100, 100.0F);
        JSONObject body = new JSONObject();
        RestManager restManager = new RestManager(Integer.class, restRequestHandler, "", headerParams, body);
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(restRequestHandler.restPutRequest("", headerParams, body), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(RestManager.class);
        try {
            restManager.getPutRequestMO();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertSame("restManager.restRequestHandler", restRequestHandler, getPrivateField(restManager, "restRequestHandler"));
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertEquals("restManager.objClass", Integer.class, getPrivateField(restManager, "objClass"));
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testHttpRequestTypeValueOfThrowsIllegalArgumentException() throws Throwable {
        try {
            RestManager.HttpRequestType.valueOf("testHttpRequestTypeParam1");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertEquals("ex.getMessage()", "No enum const class com.huawei.ism.openapi.common.commu.rest.RestManager$HttpRequestType.testHttpRequestTypeParam1", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testHttpRequestTypeValueOfThrowsNullPointerException() throws Throwable {
        try {
            RestManager.HttpRequestType.valueOf(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("ex.getMessage()", "Name is null", ex.getMessage());
            assertThrownBy(Enum.class, ex);
        }
    }
    
    public void testResolveResponseThrowsApiException() throws Throwable {
        JSONObject body = new JSONObject();
        body.put("testRestManagerKey", 100L);
        Map headerParams = new HashMap(100, 100.0F);
        RestManager restManager = new RestManager(String.class, new RestRequestHandler("testRestManagerIp", 100), "testRestManagerRelativePath", headerParams, body);
        JSONObject jSONObject = new JSONObject();
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "JSONObject[\"error\"] not found.", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "JSONObject[\"error\"] not found.", ex.getErrMessage().getErrorDescription());
            assertEquals("ex.getException().getMessage()", "JSONObject[\"error\"] not found.", ex.getException().getMessage());
            assertEquals("restManager.errorCode", -1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNull("restManager.jContents", getPrivateField(restManager, "jContents"));
            assertEquals("jSONObject.length()", 0, jSONObject.length());
        }
    }
    
    public void testResolveResponseThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 1);
        Mockingbird.setReturnValue(jSONObject2.has("description"), true);
        Mockingbird.setReturnValue(jSONObject2.get("description"), "");
        Mockingbird.setReturnValue(jSONObject2.has("suggestion"), true);
        Mockingbird.setReturnValue(jSONObject2.get("suggestion"), "");
        Mockingbird.replaceObjectForRecording(ApiMessage.class, "<init>(long,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(ApiMessage.class));
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        logUtil.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestManager.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("restManager.errorCode", 1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNotNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testResolveResponseThrowsApiExceptionWithAggressiveMocks1() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 1);
        Mockingbird.setReturnValue(jSONObject2.has("description"), false);
        Mockingbird.setReturnValue(jSONObject2.has("suggestion"), true);
        Mockingbird.setReturnValue(jSONObject2.get("suggestion"), "");
        Mockingbird.replaceObjectForRecording(ApiMessage.class, "<init>(long,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(ApiMessage.class));
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        logUtil.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestManager.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("restManager.errorCode", 1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNotNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
    
    public void testResolveResponseThrowsApiExceptionWithAggressiveMocks2() throws Throwable {
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class, true);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        JSONObject jSONObject2 = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(jSONObject.getJSONObject("error"), jSONObject2);
        Mockingbird.setReturnValue(jSONObject2.getInt("code"), 1);
        Mockingbird.setReturnValue(jSONObject2.has("description"), true);
        Mockingbird.setReturnValue(jSONObject2.get("description"), "");
        Mockingbird.setReturnValue(jSONObject2.has("suggestion"), false);
        Mockingbird.replaceObjectForRecording(ApiMessage.class, "<init>(long,java.lang.String,java.lang.String)", Mockingbird.getProxyObject(ApiMessage.class));
        ApiException apiException = (ApiException) Mockingbird.getProxyObject(ApiException.class);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage)", apiException);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        logUtil.showStackTrace(apiException);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.enterTestMode(RestManager.class);
        try {
            callPrivateMethod("com.huawei.ism.openapi.common.commu.rest.RestManager", "resolveResponse", new Class[] {JSONObject.class}, restManager, new Object[] {jSONObject});
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("restManager.errorCode", 1, ((Number) getPrivateField(restManager, "errorCode")).intValue());
            assertFalse("restManager.isJsonArray", ((Boolean) getPrivateField(restManager, "isJsonArray")).booleanValue());
            assertNotNull("restManager.jContents", getPrivateField(restManager, "jContents"));
        }
    }
}

