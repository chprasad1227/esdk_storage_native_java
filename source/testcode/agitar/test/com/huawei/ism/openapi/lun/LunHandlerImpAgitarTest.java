/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:36:07
 * Time to generate: 01:24.281 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.lun.LunHandlerImp:cb9e506de30d0648bf6eefc637ea063a
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommHandler:b6802204ee7c3e439b341a5d028a1348
 *
 */

package com.huawei.ism.openapi.lun;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.logmanager.LogUtil;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;

public class LunHandlerImpAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LunHandlerImp.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        assertNull("lunHandlerImp.lunIterator", getPrivateField(lunHandlerImp, "lunIterator"));
        assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
        assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "STORAGEPOOL");
        storeStaticField(EnumDefine.LUNAllocTypeE.class, "THICK");
        storeStaticField(EnumDefine.CACHE_MIRROR_STATUS_E.class, "CACHE_MIRROR_DISABLE");
        storeStaticField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO");
        storeStaticField(EnumDefine.MigrateLUNPolicyE.class, "MIGRATE_LUN_POLICY_NONE");
        storeStaticField(MOType.class, "LUN");
        storeStaticField(EnumDefine.InitTierPolicyE.class, "INIT_TIER_POLICY_AUTO");
        storeStaticField(EnumDefine.CACHE_WRITE_BACK_E.class, "WRITE_BACK");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        LunMO lunMO = (LunMO) Mockingbird.getProxyObject(LunMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        EnumDefine.LUNAllocTypeE lUNAllocTypeE = (EnumDefine.LUNAllocTypeE) Mockingbird.getProxyObject(EnumDefine.LUNAllocTypeE.class);
        EnumDefine.CACHE_WRITE_BACK_E cACHE_WRITE_BACK_E = (EnumDefine.CACHE_WRITE_BACK_E) Mockingbird.getProxyObject(EnumDefine.CACHE_WRITE_BACK_E.class);
        EnumDefine.CACHE_MIRROR_STATUS_E cACHE_MIRROR_STATUS_E = (EnumDefine.CACHE_MIRROR_STATUS_E) Mockingbird.getProxyObject(EnumDefine.CACHE_MIRROR_STATUS_E.class);
        EnumDefine.MigrateLUNPolicyE migrateLUNPolicyE = (EnumDefine.MigrateLUNPolicyE) Mockingbird.getProxyObject(EnumDefine.MigrateLUNPolicyE.class);
        EnumDefine.InitTierPolicyE initTierPolicyE = (EnumDefine.InitTierPolicyE) Mockingbird.getProxyObject(EnumDefine.InitTierPolicyE.class);
        Map map = (Map) Mockingbird.getProxyObject(Map.class);
        LogUtil logUtil = (LogUtil) Mockingbird.getProxyObject(LogUtil.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        setPrivateField(lunHandlerImp, "restRequestHandler", null);
        setPrivateField(lunMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(MOType.class, "STORAGEPOOL", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(EnumDefine.LUNAllocTypeE.class, "THICK", lUNAllocTypeE);
        setPrivateField(lUNAllocTypeE, "value", new Integer(0));
        setPrivateField(EnumDefine.CACHE_WRITE_BACK_E.class, "WRITE_BACK", cACHE_WRITE_BACK_E);
        setPrivateField(cACHE_WRITE_BACK_E, "value", new Integer(0));
        setPrivateField(EnumDefine.CACHE_MIRROR_STATUS_E.class, "CACHE_MIRROR_DISABLE", cACHE_MIRROR_STATUS_E);
        setPrivateField(cACHE_MIRROR_STATUS_E, "value", new Integer(0));
        setPrivateField(EnumDefine.MigrateLUNPolicyE.class, "MIGRATE_LUN_POLICY_NONE", migrateLUNPolicyE);
        setPrivateField(migrateLUNPolicyE, "value", new Integer(0));
        setPrivateField(EnumDefine.InitTierPolicyE.class, "INIT_TIER_POLICY_AUTO", initTierPolicyE);
        setPrivateField(initTierPolicyE, "value", new Integer(0));
        setPrivateField(mO, "properties", map);
        setPrivateField(EnumDefine.LOG_TYPE_E.class, "LOG_INFO", null);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("PARENTTYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ALLOCTYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("WRITEPOLICY", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("MIRRORPOLICY", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("DATATRANSFERPOLICY", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("INITIALDISTRIBUTEPOLICY", 0), null);
        Mockingbird.setReturnValue(LogUtil.getLogUtilInstance(), logUtil);
        Mockingbird.setReturnValue(false, map, "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, logUtil, "showLog", "(com.huawei.ism.openapi.common.keydeifines.EnumDefine$LOG_TYPE_E,java.lang.String)void", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPostRequestMO(), null);
        Mockingbird.enterTestMode(LunHandlerImp.class);
        LunMO result = lunHandlerImp.create(lunMO);
        assertNull("result", result);
    }
    
    public void testDeleteWithAggressiveMocks() throws Throwable {
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        setPrivateField(lunHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getDelRequestMO(), null);
        Mockingbird.enterTestMode(LunHandlerImp.class);
        lunHandlerImp.delete("");
        assertEquals("lunHandlerImp.deviceID", "", getPrivateField(lunHandlerImp, "deviceID"));
        assertNull("lunHandlerImp.restRequestHandler", getPrivateField(lunHandlerImp, "restRequestHandler"));
    }
    
    public void testExpandLunCapacityWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        setPrivateField(lunHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setReturnValue(jSONObject.put("CAPACITY", 0L), null);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(LunHandlerImp.class);
        lunHandlerImp.expandLunCapacity("", new Long(0L));
        assertEquals("lunHandlerImp.deviceID", "", getPrivateField(lunHandlerImp, "deviceID"));
        assertNull("lunHandlerImp.restRequestHandler", getPrivateField(lunHandlerImp, "restRequestHandler"));
    }
    
    public void testGetBatch() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImpDeviceID");
        LunIterator result = lunHandlerImp.getBatch(new LunQuery(null, 100L, 1000L));
        assertSame("lunHandlerImp.lunIterator", result, getPrivateField(lunHandlerImp, "lunIterator"));
        assertEquals("result.getConcretFilterHeaders().length", 5, result.getConcretFilterHeaders().length);
    }
    
    public void testGetBatch1() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImpDeviceID");
        LunQuery condition = new LunQuery(null, 100L, 1000L);
        LunIterator batch = lunHandlerImp.getBatch(condition);
        LunIterator result = lunHandlerImp.getBatch(condition);
        assertSame("result", batch, result);
    }
    
    public void testGetLunByLunGroupWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        storeStaticField(MOType.class, "LUNGroup");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        setPrivateField(lunHandlerImp, "restRequestHandler", null);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(MOType.class, "LUN", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(mOType2, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(LunHandlerImp.class);
        List result = lunHandlerImp.getLunByLunGroup("");
        assertNull("result", result);
    }
    
    public void testGetLunByStoragePoolWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        setPrivateField(lunHandlerImp, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", new Object[] {"TYPE", ""}, null, 1);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(LunHandlerImp.class);
        List result = lunHandlerImp.getLunByStoragePool("");
        assertNull("result", result);
    }
    
    public void testModifyWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        LunMO lunMO = (LunMO) Mockingbird.getProxyObject(LunMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        setPrivateField(lunHandlerImp, "restRequestHandler", null);
        setPrivateField(lunMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mO, "properties", null);
        Mockingbird.setReturnValue(lunMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, openApiUtils2, "composeFromMap", "(org.json.JSONObject,java.util.Map)void", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getPutRequestMO(), null);
        Mockingbird.enterTestMode(LunHandlerImp.class);
        lunHandlerImp.modify(lunMO);
        assertEquals("lunHandlerImp.deviceID", "", getPrivateField(lunHandlerImp, "deviceID"));
        assertNull("lunHandlerImp.restRequestHandler", getPrivateField(lunHandlerImp, "restRequestHandler"));
    }
    
    public void testCreateThrowsApiException() throws Throwable {
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testCreateThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "STORAGEPOOL");
        storeStaticField(EnumDefine.LUNAllocTypeE.class, "THICK");
        storeStaticField(EnumDefine.CACHE_MIRROR_STATUS_E.class, "CACHE_MIRROR_DISABLE");
        storeStaticField(EnumDefine.MigrateLUNPolicyE.class, "MIGRATE_LUN_POLICY_NONE");
        storeStaticField(MOType.class, "LUN");
        storeStaticField(EnumDefine.InitTierPolicyE.class, "INIT_TIER_POLICY_AUTO");
        storeStaticField(EnumDefine.CACHE_WRITE_BACK_E.class, "WRITE_BACK");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        MOType mOType2 = (MOType) Mockingbird.getProxyObject(MOType.class);
        EnumDefine.LUNAllocTypeE lUNAllocTypeE = (EnumDefine.LUNAllocTypeE) Mockingbird.getProxyObject(EnumDefine.LUNAllocTypeE.class);
        EnumDefine.CACHE_WRITE_BACK_E cACHE_WRITE_BACK_E = (EnumDefine.CACHE_WRITE_BACK_E) Mockingbird.getProxyObject(EnumDefine.CACHE_WRITE_BACK_E.class);
        EnumDefine.CACHE_MIRROR_STATUS_E cACHE_MIRROR_STATUS_E = (EnumDefine.CACHE_MIRROR_STATUS_E) Mockingbird.getProxyObject(EnumDefine.CACHE_MIRROR_STATUS_E.class);
        EnumDefine.MigrateLUNPolicyE migrateLUNPolicyE = (EnumDefine.MigrateLUNPolicyE) Mockingbird.getProxyObject(EnumDefine.MigrateLUNPolicyE.class);
        EnumDefine.InitTierPolicyE initTierPolicyE = (EnumDefine.InitTierPolicyE) Mockingbird.getProxyObject(EnumDefine.InitTierPolicyE.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(MOType.class, "STORAGEPOOL", mOType2);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(mOType2, "value", new Integer(0));
        setPrivateField(EnumDefine.LUNAllocTypeE.class, "THICK", lUNAllocTypeE);
        setPrivateField(lUNAllocTypeE, "value", new Integer(0));
        setPrivateField(EnumDefine.CACHE_WRITE_BACK_E.class, "WRITE_BACK", cACHE_WRITE_BACK_E);
        setPrivateField(cACHE_WRITE_BACK_E, "value", new Integer(0));
        setPrivateField(EnumDefine.CACHE_MIRROR_STATUS_E.class, "CACHE_MIRROR_DISABLE", cACHE_MIRROR_STATUS_E);
        setPrivateField(cACHE_MIRROR_STATUS_E, "value", new Integer(0));
        setPrivateField(EnumDefine.MigrateLUNPolicyE.class, "MIGRATE_LUN_POLICY_NONE", migrateLUNPolicyE);
        setPrivateField(migrateLUNPolicyE, "value", new Integer(0));
        setPrivateField(EnumDefine.InitTierPolicyE.class, "INIT_TIER_POLICY_AUTO", initTierPolicyE);
        setPrivateField(initTierPolicyE, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("PARENTTYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ALLOCTYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("WRITEPOLICY", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("MIRRORPOLICY", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("DATATRANSFERPOLICY", 0), null);
        Mockingbird.setException(jSONObject.put("INITIALDISTRIBUTEPOLICY", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.create(null);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("lunHandlerImp.deviceID", "", getPrivateField(lunHandlerImp, "deviceID"));
            assertNull("lunHandlerImp.restRequestHandler", getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testCreateThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImp\rDeviceID");
        try {
            lunHandlerImp.create(new LunMO());
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testCreateThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object postRequestMO = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPostRequestMO();
        Mockingbird.setException(true, postRequestMO, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.create(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testDeleteThrowsApiException() throws Throwable {
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").delete("testLunHandlerImpLunID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testDeleteThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImpDeviceID");
        try {
            lunHandlerImp.delete("testLunHandlerImp\rLunID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testDeleteThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getDelRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.delete("testLunHandlerImpLunID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testExpandLunCapacityThrowsApiException() throws Throwable {
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").expandLunCapacity("testLunHandlerImpLunID", new Long(0L));
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testExpandLunCapacityThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "LUN");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setReturnValue(jSONObject.put("TYPE", 0), null);
        Mockingbird.setReturnValue(jSONObject.put("ID", ""), null);
        Mockingbird.setException(jSONObject.put("CAPACITY", 0L), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.expandLunCapacity("", new Long(0L));
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("lunHandlerImp.deviceID", "", getPrivateField(lunHandlerImp, "deviceID"));
            assertNull("lunHandlerImp.restRequestHandler", getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testExpandLunCapacityThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImp\rDeviceID");
        try {
            lunHandlerImp.expandLunCapacity("testLunHandlerImpLunID", new Long(11L));
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testExpandLunCapacityThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.expandLunCapacity("testLunHandlerImpLunID", new Long(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunByHostThrowsApiException() throws Throwable {
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").getLunByHost("testLunHandlerImpHostID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunByHostThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImpDeviceID");
        try {
            lunHandlerImp.getLunByHost("testLunHandlerImp\rHostID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunByHostThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.getLunByHost("testLunHandlerImpHostID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunByLunGroupThrowsApiException() throws Throwable {
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").getLunByLunGroup("testLunHandlerImpLunGroupID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunByLunGroupThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImpDeviceID");
        try {
            lunHandlerImp.getLunByLunGroup("testLunHandlerImp\rLunGroupID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunByLunGroupThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.getLunByLunGroup("testLunHandlerImpLunGroupID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetLunByStoragePoolThrowsApiException() throws Throwable {
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").getLunByStoragePool("testLunHandlerImpStoragePoolID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetLunByStoragePoolThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImpDeviceID");
        try {
            lunHandlerImp.getLunByStoragePool("testLunHandlerImp\rStoragePoolID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetLunByStoragePoolThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.getLunByStoragePool("testLunHandlerImpStoragePoolID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testGetThrowsApiException() throws Throwable {
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").get("testLunHandlerImpLunID");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
        }
    }
    
    public void testGetThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImpIp", 100), "testLunHandlerImpDeviceID");
        try {
            lunHandlerImp.get("testLunHandlerImp\rLunID");
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
        }
    }
    
    public void testGetThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.get("testLunHandlerImpLunID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsApiException() throws Throwable {
        LunMO mo = new LunMO();
        try {
            new LunHandlerImp(null, "testLunHandlerImpDeviceID").modify(mo);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG");
        storeStaticField(MOType.class, "LUN");
        LunHandlerImp lunHandlerImp = (LunHandlerImp) Mockingbird.getProxyObject(LunHandlerImp.class, true);
        LunMO lunMO = (LunMO) Mockingbird.getProxyObject(LunMO.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        JSONException jSONException = (JSONException) Mockingbird.getProxyObject(JSONException.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        setPrivateField(lunHandlerImp, "deviceID", "");
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "JASONEXPMSG", apiMessage);
        Mockingbird.setReturnValue(lunMO.getId(), "");
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        JSONObject jSONObject = (JSONObject) Mockingbird.getProxyObject(JSONObject.class);
        Mockingbird.replaceObjectForRecording(JSONObject.class, "<init>()", jSONObject);
        Mockingbird.setException(jSONObject.put("TYPE", 0), jSONException);
        Mockingbird.setReturnValue(jSONException.getMessage(), "");
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.modify(lunMO);
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("lunHandlerImp.deviceID", "", getPrivateField(lunHandlerImp, "deviceID"));
            assertNull("lunHandlerImp.restRequestHandler", getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
    
    public void testModifyThrowsIllegalArgumentException() throws Throwable {
        LunHandlerImp lunHandlerImp = new LunHandlerImp(new RestRequestHandler("testLunHandlerImp\rIp", 100), "testLunHandlerImpDeviceID");
        LunMO mo = new LunMO();
        try {
            lunHandlerImp.modify(mo);
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertNull("mo.getDescription()", mo.getDescription());
        }
    }
    
    public void testModifyThrowsNullPointerException() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunHandlerImpIp", 100);
        LunHandlerImp lunHandlerImp = new LunHandlerImp(restRequestHandler, "testLunHandlerImpDeviceID");
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getPutRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunHandlerImp.class);
        try {
            lunHandlerImp.modify(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunHandlerImp.deviceID", "testLunHandlerImpDeviceID", getPrivateField(lunHandlerImp, "deviceID"));
            assertSame("lunHandlerImp.restRequestHandler", restRequestHandler, getPrivateField(lunHandlerImp, "restRequestHandler"));
        }
    }
}

