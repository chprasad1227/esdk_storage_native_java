/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:39:25
 * Time to generate: 00:23.875 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.snapshot.SnapshotMO:61de53f8f393d95cc1d3d1103daa67ae
 *
 */

package com.huawei.ism.openapi.snapshot;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import org.json.JSONObject;

public class SnapshotMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SnapshotMO.class;
    }
    
    public void testConstructor() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testConstructor1() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        assertEquals("snapshotMO.getMO().getProperties().size()", 0, snapshotMO.getMO().getProperties().size());
    }
    
    public void testConstructor2() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO(new JSONObject());
        assertEquals("snapshotMO.getMO().getProperties().size()", 0, snapshotMO.getMO().getProperties().size());
    }
    
    public void testGetConsumedCapacity() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Long result = snapshotMO.getConsumedCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetConsumedCapacity1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getLongProperty("CONSUMEDCAPACITY"), 0L);
        Long long2 = new Long(0L);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(long)java.lang.Long", new Object[] {new Long(0L)}, long2, 1);
        Mockingbird.enterTestMode(SnapshotMO.class);
        Long result = snapshotMO.getConsumedCapacity();
        assertSame("result", long2, result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetCount() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Long result = snapshotMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetDescription() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        String result = snapshotMO.getDescription();
        assertNull("result", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetDescription1() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        snapshotMO.setDescription("testSnapshotMODescription");
        String result = snapshotMO.getDescription();
        assertEquals("result", "testSnapshotMODescription", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetHealthStatus() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Mockingbird.enterRecordingMode();
        Integer integer = new Integer(3);
        Mockingbird.setReturnValue(mo.getProperty("HEALTHSTATUS"), integer);
        Mockingbird.setReturnValue(false, integer, "toString", "()java.lang.String", new Object[] {}, "3", 1);
        Mockingbird.setReturnValue(true, Integer.class, "parseInt", "(java.lang.String)int", new Object[] {"3"}, new Integer(3), 1);
        Mockingbird.setReturnValue(EnumDefine.HealthStatusE.valueOf(100), EnumDefine.HealthStatusE.PRE_FAIL);
        Mockingbird.enterTestMode(SnapshotMO.class);
        EnumDefine.HealthStatusE result = snapshotMO.getHealthStatus();
        assertSame("result", EnumDefine.HealthStatusE.PRE_FAIL, result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetId() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("ID"), "testString");
        Mockingbird.enterTestMode(SnapshotMO.class);
        String result = snapshotMO.getId();
        assertEquals("result", "testString", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetId1() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        String result = snapshotMO.getId();
        assertNull("result", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetMO() throws Throwable {
        MO mo = new MO();
        MO result = new SnapshotMO(mo).getMO();
        assertSame("result", mo, result);
    }
    
    public void testGetName() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setName("testSnapshotMOName");
        String result = snapshotMO.getName();
        assertEquals("result", "testSnapshotMOName", result);
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testGetName1() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        String result = snapshotMO.getName();
        assertNull("result", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetParentId() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("PARENTID"), "testString");
        Mockingbird.enterTestMode(SnapshotMO.class);
        String result = snapshotMO.getParentId();
        assertEquals("result", "testString", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetParentId1() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        String result = snapshotMO.getParentId();
        assertNull("result", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetParentName() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        String result = snapshotMO.getParentName();
        assertNull("result", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetParentType() throws Throwable {
        MOType result = new SnapshotMO().getParentType();
        assertEquals("result", MOType.LUN, result);
    }
    
    public void testGetRollbackSpeed() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        EnumDefine.SpeedLevelE result = snapshotMO.getRollbackSpeed();
        assertNull("result", result);
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetRollbackSpeed1() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setRollbackSpeed(EnumDefine.SpeedLevelE.SPEED_LEVEL_LOW);
        EnumDefine.SpeedLevelE result = snapshotMO.getRollbackSpeed();
        assertSame("result", EnumDefine.SpeedLevelE.SPEED_LEVEL_LOW, result);
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testGetRunningStatus() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setRunningStatus(EnumDefine.RunningStatusE.DISABLED);
        EnumDefine.RunningStatusE result = snapshotMO.getRunningStatus();
        assertSame("result", EnumDefine.RunningStatusE.DISABLED, result);
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testGetTimeStamp() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Long result = snapshotMO.getTimeStamp();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetTimeStamp1() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        snapshotMO.setTimeStamp(new Long(0L));
        Long result = snapshotMO.getTimeStamp();
        assertEquals("result", 0L, result.longValue());
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetUserCapacity() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        Long result = snapshotMO.getUserCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testGetUserCapacity1() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        snapshotMO.setUserCapacity(new Long(0L));
        Long result = snapshotMO.getUserCapacity();
        assertEquals("result", 0L, result.longValue());
        assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
    }
    
    public void testSetConsumedCapacity() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setConsumedCapacity(new Long(2L));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"CONSUMEDCAPACITY\")", new Long(2L), snapshotMO.getMO().getProperties().get("CONSUMEDCAPACITY"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetDescription() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setDescription("testSnapshotMODescription");
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"DESCRIPTION\")", "testSnapshotMODescription", snapshotMO.getMO().getProperties().get("DESCRIPTION"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetHealthStatus() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setHealthStatus(EnumDefine.HealthStatusE.PART_BROKEN);
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"HEALTHSTATUS\")", new Integer(4), snapshotMO.getMO().getProperties().get("HEALTHSTATUS"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetId() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setId("testSnapshotMOId");
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"ID\")", "testSnapshotMOId", snapshotMO.getMO().getProperties().get("ID"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetName() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setName("testSnapshotMOName");
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"NAME\")", "testSnapshotMOName", snapshotMO.getMO().getProperties().get("NAME"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetParentId() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setParentId("testSnapshotMOParentID");
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"PARENTID\")", "testSnapshotMOParentID", snapshotMO.getMO().getProperties().get("PARENTID"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetParentType() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setParentType(MOType.STORAGEPOOL);
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"PARENTTYPE\")", new Integer(216), snapshotMO.getMO().getProperties().get("PARENTTYPE"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetRollbackSpeed() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setRollbackSpeed(EnumDefine.SpeedLevelE.SPEED_LEVEL_LOW);
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"ROLLBACKSPEED\")", new Integer(1), snapshotMO.getMO().getProperties().get("ROLLBACKSPEED"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetRunningStatus() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setRunningStatus(EnumDefine.RunningStatusE.DISABLED);
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"RUNNINGSTATUS\")", new Integer(31), snapshotMO.getMO().getProperties().get("RUNNINGSTATUS"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetTimeStamp() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setTimeStamp(new Long(0L));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"TIMESTAMP\")", new Long(0L), snapshotMO.getMO().getProperties().get("TIMESTAMP"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testSetUserCapacity() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO();
        snapshotMO.setUserCapacity(new Long(0L));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
        assertEquals("snapshotMO.getMO().getProperties().get(\"USERCAPACITY\")", new Long(0L), snapshotMO.getMO().getProperties().get("USERCAPACITY"));
        assertEquals("snapshotMO.getMO().getProperties().size()", 1, snapshotMO.getMO().getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.putOpt("testString", "testString");
        jObject.accumulate("testString", "*t");
        jObject.put("testSnapshotMOKey", 100);
        try {
            new SnapshotMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetConsumedCapacityThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getConsumedCapacity();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetCountThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetDescriptionThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getDescription();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        try {
            snapshotMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
        }
    }
    
    public void testGetIdThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetNameThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getName();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetParentIdThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getParentId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetParentNameThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getParentName();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetRollbackSpeedThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getRollbackSpeed();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException() throws Throwable {
        MO mo = new MO();
        SnapshotMO snapshotMO = new SnapshotMO(mo);
        try {
            snapshotMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertSame("snapshotMO.getMO()", mo, snapshotMO.getMO());
        }
    }
    
    public void testGetTimeStampThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getTimeStamp();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testGetUserCapacityThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.getUserCapacity();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetConsumedCapacityThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setConsumedCapacity(new Long(-129L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setDescription("testSnapshotMODescription");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetHealthStatusThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setHealthStatus(EnumDefine.HealthStatusE.BUSY);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setId("testSnapshotMOId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setName("testSnapshotMOName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetParentIdThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setParentId("testSnapshotMOParentID");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetParentTypeThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setParentType(MOType.NAS_LDAP_FIELD);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetRollbackSpeedThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setRollbackSpeed(EnumDefine.SpeedLevelE.SPEED_LEVEL_MIDDLE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetRunningStatusThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setRunningStatus(EnumDefine.RunningStatusE.INACTIVATED);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetTimeStampThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setTimeStamp(new Long(100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
    
    public void testSetUserCapacityThrowsNullPointerException() throws Throwable {
        SnapshotMO snapshotMO = new SnapshotMO((MO) null);
        try {
            snapshotMO.setUserCapacity(new Long(-100L));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SnapshotMO.class, ex);
            assertNull("snapshotMO.getMO()", snapshotMO.getMO());
        }
    }
}

