/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:40:57
 * Time to generate: 00:13.500 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.fcinitiator.system.systime.SystemTimeMO:8533f2cbc7099b0152a741bb2ef9af60
 *
 */

package com.huawei.ism.openapi.fcinitiator.system.systime;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import org.json.JSONObject;

public class SystemTimeMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return SystemTimeMO.class;
    }
    
    public void testConstructor() throws Throwable {
        SystemTimeMO systemTimeMO = new SystemTimeMO();
        assertEquals("systemTimeMO.getMO().getProperties().size()", 0, systemTimeMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        String[] sa = new String[1];
        MO mo = new MO(new JSONObject(new JSONObject(), sa));
        SystemTimeMO systemTimeMO = new SystemTimeMO(mo);
        assertSame("systemTimeMO.getMO()", mo, systemTimeMO.getMO());
    }
    
    public void testConstructor2() throws Throwable {
        SystemTimeMO systemTimeMO = new SystemTimeMO(new JSONObject());
        assertEquals("systemTimeMO.getMO().getProperties().size()", 0, systemTimeMO.getMO().getProperties().size());
    }
    
    public void testGetCmoSysTimeZonNameStyle() throws Throwable {
        String[] sa = new String[1];
        MO mo = new MO(new JSONObject(new JSONObject(), sa));
        SystemTimeMO systemTimeMO = new SystemTimeMO(mo);
        String result = systemTimeMO.getCmoSysTimeZonNameStyle();
        assertNull("result", result);
        assertSame("systemTimeMO.getMO()", mo, systemTimeMO.getMO());
    }
    
    public void testGetCmoSysTimeZone() throws Throwable {
        MO mo = new MO();
        SystemTimeMO systemTimeMO = new SystemTimeMO(mo);
        String result = systemTimeMO.getCmoSysTimeZone();
        assertNull("result", result);
        assertSame("systemTimeMO.getMO()", mo, systemTimeMO.getMO());
    }
    
    public void testGetCmoSysTimeZoneName() throws Throwable {
        String[] sa = new String[1];
        MO mo = new MO(new JSONObject(new JSONObject(), sa));
        SystemTimeMO systemTimeMO = new SystemTimeMO(mo);
        String result = systemTimeMO.getCmoSysTimeZoneName();
        assertNull("result", result);
        assertSame("systemTimeMO.getMO()", mo, systemTimeMO.getMO());
    }
    
    public void testGetCmoSysTimeZoneUseDst() throws Throwable {
        String[] sa = new String[1];
        MO mo = new MO(new JSONObject(new JSONObject(), sa));
        SystemTimeMO systemTimeMO = new SystemTimeMO(mo);
        String result = systemTimeMO.getCmoSysTimeZoneUseDst();
        assertNull("result", result);
        assertSame("systemTimeMO.getMO()", mo, systemTimeMO.getMO());
    }
    
    public void testGetMO() throws Throwable {
        String[] sa = new String[1];
        MO mo = new MO(new JSONObject(new JSONObject(), sa));
        MO result = new SystemTimeMO(mo).getMO();
        assertSame("result", mo, result);
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testString", 100.0);
        jObject.accumulate("testString", null);
        try {
            new SystemTimeMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetCmoSysTimeZonNameStyleThrowsNullPointerException() throws Throwable {
        SystemTimeMO systemTimeMO = new SystemTimeMO((MO) null);
        try {
            systemTimeMO.getCmoSysTimeZonNameStyle();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemTimeMO.class, ex);
            assertNull("systemTimeMO.getMO()", systemTimeMO.getMO());
        }
    }
    
    public void testGetCmoSysTimeZoneNameThrowsNullPointerException() throws Throwable {
        SystemTimeMO systemTimeMO = new SystemTimeMO((MO) null);
        try {
            systemTimeMO.getCmoSysTimeZoneName();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemTimeMO.class, ex);
            assertNull("systemTimeMO.getMO()", systemTimeMO.getMO());
        }
    }
    
    public void testGetCmoSysTimeZoneThrowsNullPointerException() throws Throwable {
        SystemTimeMO systemTimeMO = new SystemTimeMO((MO) null);
        try {
            systemTimeMO.getCmoSysTimeZone();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemTimeMO.class, ex);
            assertNull("systemTimeMO.getMO()", systemTimeMO.getMO());
        }
    }
    
    public void testGetCmoSysTimeZoneUseDstThrowsNullPointerException() throws Throwable {
        SystemTimeMO systemTimeMO = new SystemTimeMO((MO) null);
        try {
            systemTimeMO.getCmoSysTimeZoneUseDst();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(SystemTimeMO.class, ex);
            assertNull("systemTimeMO.getMO()", systemTimeMO.getMO());
        }
    }
}

