/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:35:44
 * Time to generate: 00:58.063 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.lun.LunIterator:d6956c8aeacb7295f37fd1253e390db9
 * agitar.src.md5=com.huawei.ism.openapi.common.batchquery.ApiIterator:592fbb87e71ade6d26e6fe9200d66392
 *
 */

package com.huawei.ism.openapi.lun;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class LunIteratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LunIterator.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunIteratorIp", 100);
        LunQuery queryCondition = new LunQuery(new LunMO(), 100L, 1000L);
        LunIterator lunIterator = new LunIterator(restRequestHandler, "testLunIteratorDeviceID", queryCondition);
        assertNull("lunIterator.headerMap", getPrivateField(lunIterator, "headerMap"));
        assertEquals("lunIterator.totalCount", 0L, ((Number) getPrivateField(lunIterator, "totalCount")).longValue());
        assertSame("lunIterator.restRequestHandler", restRequestHandler, getPrivateField(lunIterator, "restRequestHandler"));
        assertEquals("lunIterator.curIndex", 100L, ((Number) getPrivateField(lunIterator, "curIndex")).longValue());
        assertEquals("lunIterator.deviceID", "testLunIteratorDeviceID", getPrivateField(lunIterator, "deviceID"));
        assertSame("lunIterator.getQuery()", queryCondition, lunIterator.getQuery());
    }
    
    public void testGetConcretBatchNextWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUN");
        LunIterator lunIterator = (LunIterator) Mockingbird.getProxyObject(LunIterator.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunIterator, "deviceID", "");
        setPrivateField(lunIterator, "queryCondition", null);
        setPrivateField(lunIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUN", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(LunIterator.class);
        List result = lunIterator.getConcretBatchNext();
        assertNull("result", result);
        assertNull("lunIterator.headerMap", getPrivateField(lunIterator, "headerMap"));
    }
    
    public void testGetConcretFilterHeaders() throws Throwable {
        LunIterator lunIterator = new LunIterator(new RestRequestHandler("testLunIteratorIp", 100), "testLunIteratorDeviceID", new LunQuery(new LunMO(), 100L, 1000L));
        String[] result = lunIterator.getConcretFilterHeaders();
        assertEquals("result.length", 5, result.length);
        assertEquals("result[0]", "PARENTID", result[0]);
    }
    
    public void testGetConcretMoMap() throws Throwable {
        LunIterator lunIterator = new LunIterator(new RestRequestHandler("testLunIteratorIp", 100), "testLunIteratorDeviceID", null);
        ConcurrentHashMap result = (ConcurrentHashMap) lunIterator.getConcretMoMap(new LunMO());
        assertEquals("result.size()", 2, result.size());
        assertEquals("(ConcurrentHashMap) result.get(\"TYPE\")", new Integer(11), result.get("TYPE"));
    }
    
    public void testGetConcretMoMap1() throws Throwable {
        LunIterator lunIterator = new LunIterator(null, "testLunIteratorDeviceID", new LunQuery(new LunMO(), 100L, 1000L));
        Map result = lunIterator.getConcretMoMap((LunMO) null);
        assertNull("result", result);
    }
    
    public void testGetConcretBatchNextThrowsApiException() throws Throwable {
        LunMO mo = new LunMO();
        mo.setParentId("testLunIteratorParentId");
        mo.setAllocType(EnumDefine.LUNAllocTypeE.THIN);
        LunIterator lunIterator = new LunIterator(null, "testLunIteratorDeviceID", new LunQuery(mo, 100L, 1000L));
        try {
            lunIterator.getConcretBatchNext();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("lunIterator.headerMap.size()", 1, ((Map) getPrivateField(lunIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException() throws Throwable {
        LunMO mo = new LunMO();
        mo.setParentId("testLunIterator\rParentId");
        mo.setAllocType(EnumDefine.LUNAllocTypeE.THIN);
        LunIterator lunIterator = new LunIterator(new RestRequestHandler("testLunIteratorIp", 100), "testLunIteratorDeviceID", new LunQuery(mo, 100L, 1000L));
        try {
            lunIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("lunIterator.headerMap.size()", 1, ((Map) getPrivateField(lunIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException1() throws Throwable {
        LunIterator lunIterator = new LunIterator(new RestRequestHandler("testLunIterator\rIp", 100), "testLunIteratorDeviceID", new LunQuery(new LunMO(), 100L, 1000L));
        try {
            lunIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("lunIterator.headerMap.size()", 0, ((Map) getPrivateField(lunIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException() throws Throwable {
        LunMO mo = new LunMO();
        mo.setParentId("testLunIteratorParentId");
        mo.setAllocType(EnumDefine.LUNAllocTypeE.THIN);
        LunIterator lunIterator = new LunIterator(new RestRequestHandler("testLunIteratorIp", 100), "testLunIteratorDeviceID", new LunQuery(mo, 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunIterator.class);
        try {
            lunIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunIterator.headerMap.size()", 1, ((Map) getPrivateField(lunIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsApiException() throws Throwable {
        LunMO mo = new LunMO();
        mo.setParentId("testLunIteratorParentId");
        mo.setAllocType(EnumDefine.LUNAllocTypeE.THIN);
        LunIterator lunIterator = new LunIterator(null, "testLunIteratorDeviceID", new LunQuery(mo, 100L, 1000L));
        try {
            lunIterator.getConcretCount();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("lunIterator.headerMap.size()", 1, ((Map) getPrivateField(lunIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsIllegalArgumentException() throws Throwable {
        LunMO mo = new LunMO();
        LunQuery queryCondition = new LunQuery(mo, 100L, 1000L);
        mo.setParentId("testLunIterator\rParentId");
        mo.setAllocType(EnumDefine.LUNAllocTypeE.THIN);
        LunIterator lunIterator = new LunIterator(new RestRequestHandler("testLunIteratorIp", 100), "testLunIteratorDeviceID", queryCondition);
        try {
            lunIterator.getConcretCount();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("lunIterator.headerMap.size()", 1, ((Map) getPrivateField(lunIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException() throws Throwable {
        LunIterator lunIterator = new LunIterator(new RestRequestHandler("testLunIteratorIp", 100), "testLunIteratorDeviceID", new LunQuery(new LunMO(), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunIterator.class);
        try {
            lunIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunIterator.headerMap.size()", 0, ((Map) getPrivateField(lunIterator, "headerMap")).size());
        }
    }
}

