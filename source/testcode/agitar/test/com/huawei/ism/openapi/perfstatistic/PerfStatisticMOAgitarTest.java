/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:37:42
 * Time to generate: 00:17.312 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.perfstatistic.PerfStatisticMO:01b3dcda7dd6aa6b764919b706c3f932
 *
 */

package com.huawei.ism.openapi.perfstatistic;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import org.json.JSONObject;

public class PerfStatisticMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return PerfStatisticMO.class;
    }
    
    public void testConstructor() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO(new JSONObject());
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testGetDataId() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        Long result = perfStatisticMO.getDataId();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        MO result = perfStatisticMO.getMO();
        assertEquals("result.getProperties().size()", 0, result.getProperties().size());
    }
    
    public void testGetPerfData() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        Long result = perfStatisticMO.getPerfData();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testGetTimeStamp() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        Long result = perfStatisticMO.getTimeStamp();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testGetUuId() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        perfStatisticMO.setListenObjectType(MOType.SNAS_CIFS_SHARE_AUTH_CLIENT);
        perfStatisticMO.setListenObjectId("testPerfStatisticMOObjectId");
        String result = perfStatisticMO.getUuId();
        assertEquals("perfStatisticMO.uuId", "-2:testPerfStatisticMOObjectId", getPrivateField(perfStatisticMO, "uuId"));
        assertEquals("result", "-2:testPerfStatisticMOObjectId", result);
    }
    
    public void testGetUuId1() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        perfStatisticMO.setListenObjectType(MOType.FC_INITIATOR);
        String result = perfStatisticMO.getUuId();
        assertNull("result", result);
    }
    
    public void testGetUuId2() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        String result = perfStatisticMO.getUuId();
        assertNull("result", result);
    }
    
    public void testSetDataId() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        perfStatisticMO.setDataId(EnumDefine.StatisticDataId.BE_MBS_READ_SEC);
        assertEquals("perfStatisticMO.mo.getProperties().size()", 1, ((MO) getPrivateField(perfStatisticMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(perfStatisticMO, "mo")).getProperties().get("CMO_STATISTIC_DATA_ID");
        assertEquals("perfStatisticMO.mo.getProperties().get(\"CMO_STATISTIC_DATA_ID\")", new Long(261L), actual);
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testSetListenObjectId() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        perfStatisticMO.setListenObjectId("testPerfStatisticMOObjectId");
        assertEquals("perfStatisticMO.id", "testPerfStatisticMOObjectId", getPrivateField(perfStatisticMO, "id"));
    }
    
    public void testSetListenObjectType() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        perfStatisticMO.setListenObjectType(MOType.SNAS_CIFS_SHARE_AUTH_CLIENT);
        assertEquals("perfStatisticMO.moType", MOType.SNAS_CIFS_SHARE_AUTH_CLIENT, getPrivateField(perfStatisticMO, "moType"));
    }
    
    public void testSetPerfSpan() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        perfStatisticMO.setPerfSpan(new Long(0L));
        assertEquals("perfStatisticMO.mo.getProperties().size()", 1, ((MO) getPrivateField(perfStatisticMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(perfStatisticMO, "mo")).getProperties().get("CMO_STATISTIC_TIME_SPAN");
        assertEquals("perfStatisticMO.mo.getProperties().get(\"CMO_STATISTIC_TIME_SPAN\")", new Long(0L), actual);
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testSetSkipSwitch() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        perfStatisticMO.setSkipSwitch(Boolean.FALSE);
        assertEquals("perfStatisticMO.mo.getProperties().size()", 1, ((MO) getPrivateField(perfStatisticMO, "mo")).getProperties().size());
        Object actual = ((MO) getPrivateField(perfStatisticMO, "mo")).getProperties().get("CMO_STATISTIC_SKIP_SWITCH");
        assertEquals("perfStatisticMO.mo.getProperties().get(\"CMO_STATISTIC_SKIP_SWITCH\")", Boolean.FALSE, actual);
        assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testString", 100L);
        jObject.accumulate("testString", new Double(-1.0));
        try {
            new PerfStatisticMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testSetDataIdThrowsNullPointerException() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        try {
            perfStatisticMO.setDataId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(PerfStatisticMO.class, ex);
            assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
        }
    }
    
    public void testSetPerfSpanThrowsNullPointerException() throws Throwable {
        PerfStatisticMO perfStatisticMO = new PerfStatisticMO();
        try {
            perfStatisticMO.setPerfSpan(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("perfStatisticMO.mo", getPrivateField(perfStatisticMO, "mo"));
        }
    }
}

