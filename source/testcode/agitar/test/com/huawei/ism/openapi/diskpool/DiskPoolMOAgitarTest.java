/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:28:46
 * Time to generate: 00:37.375 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.diskpool.DiskPoolMO:1185e3cc9685196d5c55fae0aaa63f87
 *
 */

package com.huawei.ism.openapi.diskpool;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.model.MO;
import java.util.HashMap;
import java.util.Hashtable;
import org.json.JSONObject;

public class DiskPoolMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DiskPoolMO.class;
    }
    
    public void testConstructor() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO(new JSONObject());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 0, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetDescription() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setDescription("testDiskPoolMODescription");
        String result = diskPoolMO.getDescription();
        assertEquals("result", "testDiskPoolMODescription", result);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetDescription1() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        String result = diskPoolMO.getDescription();
        assertNull("result", result);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetFreeCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getFreeCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        String result = diskPoolMO.getId();
        assertNull("result", result);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetId1() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setId("testDiskPoolMOId");
        String result = diskPoolMO.getId();
        assertEquals("result", "testDiskPoolMOId", result);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetMO() throws Throwable {
        MO result = new DiskPoolMO().getMO();
        assertEquals("result.getProperties().size()", 1, result.getProperties().size());
    }
    
    public void testGetNLSASdiskNum() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setNLSASdiskNum(0);
        Integer result = diskPoolMO.getNLSASdiskNum();
        assertEquals("result", 0, result.intValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetNLSASdiskNum1() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO(new JSONObject());
        Integer result = diskPoolMO.getNLSASdiskNum();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 0, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetNLSASfreeCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getNLSASfreeCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetNLSASspareCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getNLSASspareCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetNLSAStotalCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getNLSAStotalCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetNLSASusedCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO(new JSONObject(new HashMap(100, 100.0F)));
        Long result = diskPoolMO.getNLSASusedCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 0, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetNLSASusedSpareCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getNLSASusedSpareCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetName() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setName("testDiskPoolMOName");
        String result = diskPoolMO.getName();
        assertEquals("result", "testDiskPoolMOName", result);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetName1() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        String result = diskPoolMO.getName();
        assertNull("result", result);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSASdiskNum() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Integer result = diskPoolMO.getSASdiskNum();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSASdiskNum1() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setSASdiskNum(0);
        Integer result = diskPoolMO.getSASdiskNum();
        assertEquals("result", 0, result.intValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSASfreeCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSASfreeCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSASspareCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSASspareCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSAStotalCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSAStotalCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSASusedCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSASusedCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSASusedSpareCapaci() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSASusedSpareCapaci();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSSDdiskNum() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setSSDdiskNum(0);
        Integer result = diskPoolMO.getSSDdiskNum();
        assertEquals("result", 0, result.intValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSSDdiskNum1() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Integer result = diskPoolMO.getSSDdiskNum();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSSDfreeCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSSDfreeCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSSDspareCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSSDspareCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSSDtotalCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSSDtotalCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSSDusedCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO(null);
        Long result = diskPoolMO.getSSDusedCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 0, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSSDusedSpareCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSSDusedSpareCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetSpareCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getSpareCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetTotalCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO(new JSONObject(new Hashtable(100)));
        Long result = diskPoolMO.getTotalCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 0, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetUsedCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getUsedCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testGetUsedSpareCapacity() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        Long result = diskPoolMO.getUsedSpareCapacity();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testSetDescription() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setDescription("testDiskPoolMODescription");
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
        assertEquals("diskPoolMO.getMO().getProperties().get(\"DESCRIPTION\")", "testDiskPoolMODescription", diskPoolMO.getMO().getProperties().get("DESCRIPTION"));
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testSetId() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setId("testDiskPoolMOId");
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
        assertEquals("diskPoolMO.getMO().getProperties().get(\"ID\")", "testDiskPoolMOId", diskPoolMO.getMO().getProperties().get("ID"));
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testSetNLSASdiskNum() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setNLSASdiskNum(100);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
        assertEquals("diskPoolMO.getMO().getProperties().get(\"NLSASDISKNUM\")", new Integer(100), diskPoolMO.getMO().getProperties().get("NLSASDISKNUM"));
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testSetName() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setName("testDiskPoolMOName");
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
        assertEquals("diskPoolMO.getMO().getProperties().get(\"NAME\")", "testDiskPoolMOName", diskPoolMO.getMO().getProperties().get("NAME"));
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testSetSASdiskNum() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setSASdiskNum(100);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
        assertEquals("diskPoolMO.getMO().getProperties().get(\"SASDISKNUM\")", new Integer(100), diskPoolMO.getMO().getProperties().get("SASDISKNUM"));
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testSetSSDdiskNum() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        diskPoolMO.setSSDdiskNum(100);
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
        assertEquals("diskPoolMO.getMO().getProperties().get(\"SSDDISKNUM\")", new Integer(100), diskPoolMO.getMO().getProperties().get("SSDDISKNUM"));
        assertEquals("diskPoolMO.getMO().getProperties().size()", 2, diskPoolMO.getMO().getProperties().size());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.putOpt("testString", new Double(4.5555596351623535));
        jObject.accumulate("testString", new Object());
        try {
            new DiskPoolMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 16", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testGetHealthStatusThrowsNumberFormatException() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO(new JSONObject());
        try {
            diskPoolMO.getHealthStatus();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("diskPoolMO.getMO().getProperties().size()", 0, diskPoolMO.getMO().getProperties().size());
        }
    }
    
    public void testGetRunningStatusThrowsNumberFormatException() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        try {
            diskPoolMO.getRunningStatus();
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException ex) {
            assertEquals("ex.getMessage()", "null", ex.getMessage());
            assertThrownBy(Integer.class, ex);
            assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        try {
            diskPoolMO.setDescription(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        try {
            diskPoolMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        DiskPoolMO diskPoolMO = new DiskPoolMO();
        try {
            diskPoolMO.setName(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertEquals("diskPoolMO.getMO().getProperties().size()", 1, diskPoolMO.getMO().getProperties().size());
        }
    }
}

