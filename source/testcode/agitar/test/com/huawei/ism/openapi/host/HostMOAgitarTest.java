/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:32:40
 * Time to generate: 00:24.047 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.host.HostMO:03bc0cc4bd1a2917b010122f72642693
 *
 */

package com.huawei.ism.openapi.host;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import org.json.JSONObject;

public class HostMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HostMO.class;
    }
    
    public void testConstructor() throws Throwable {
        HostMO hostMO = new HostMO();
        assertEquals("hostMO.getMO().getProperties().size()", 0, hostMO.getMO().getProperties().size());
    }
    
    public void testConstructor1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testConstructor2() throws Throwable {
        HostMO hostMO = new HostMO(new JSONObject());
        assertEquals("hostMO.getMO().getProperties().size()", 0, hostMO.getMO().getProperties().size());
    }
    
    public void testGetCount() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setCount(0L);
        Long result = hostMO.getCount();
        assertEquals("result", 0L, result.longValue());
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetCount1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        Long result = hostMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result.longValue());
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetDescription() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        HostMO hostMO = new HostMO(mo);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(mo.getStrProperty("DESCRIPTION"), "testString");
        Mockingbird.enterTestMode(HostMO.class);
        String result = hostMO.getDescription();
        assertEquals("result", "testString", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetDescription1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        String result = hostMO.getDescription();
        assertNull("result", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetHealthStatus() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setHealthStatus(EnumDefine.HealthStatusE.PRE_FAIL);
        EnumDefine.HealthStatusE result = hostMO.getHealthStatus();
        assertSame("result", EnumDefine.HealthStatusE.PRE_FAIL, result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetIP() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        String result = hostMO.getIP();
        assertNull("result", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetIP1() throws Throwable {
        HostMO hostMO = new HostMO();
        hostMO.setIP("testHostMOIp");
        String result = hostMO.getIP();
        assertEquals("result", "testHostMOIp", result);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
    }
    
    public void testGetId() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        String result = hostMO.getId();
        assertNull("result", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetId1() throws Throwable {
        HostMO hostMO = new HostMO();
        hostMO.setId("testHostMOId");
        String result = hostMO.getId();
        assertEquals("result", "testHostMOId", result);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
    }
    
    public void testGetIsAdd2HostGroup() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        Boolean result = hostMO.getIsAdd2HostGroup();
        assertFalse("result", result.booleanValue());
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetIsAdd2HostGroup1() throws Throwable {
        MO mo = (MO) Mockingbird.getProxyObject(MO.class);
        HostMO hostMO = new HostMO(mo);
        Mockingbird.enterRecordingMode();
        Boolean boolean2 = Boolean.TRUE;
        Mockingbird.setReturnValue(mo.getBoolProperty("ISADD2HOSTGROUP"), boolean2);
        Mockingbird.enterTestMode(HostMO.class);
        Boolean result = hostMO.getIsAdd2HostGroup();
        assertSame("result", boolean2, result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetLocation() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        String result = hostMO.getLocation();
        assertNull("result", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetLocation1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setLocation("testHostMOLocation");
        String result = hostMO.getLocation();
        assertEquals("result", "testHostMOLocation", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetMO() throws Throwable {
        MO mo = new MO();
        MO result = new HostMO(mo).getMO();
        assertSame("result", mo, result);
    }
    
    public void testGetName() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        String result = hostMO.getName();
        assertNull("result", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetName1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setName("testHostMOName");
        String result = hostMO.getName();
        assertEquals("result", "testHostMOName", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetOperationSystem() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        EnumDefine.OSTypeE result = hostMO.getOperationSystem();
        assertNull("result", result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetOperationSystem1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setOperationSystem(EnumDefine.OSTypeE.MacOS);
        EnumDefine.OSTypeE result = hostMO.getOperationSystem();
        assertSame("result", EnumDefine.OSTypeE.MacOS, result);
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testGetParentType() throws Throwable {
        MOType result = new HostMO(new MO()).getParentType();
        assertEquals("result", MOType.MAPPINGVIEW, result);
    }
    
    public void testGetRunningStatus() throws Throwable {
        HostMO hostMO = new HostMO();
        hostMO.setRunningStatus(EnumDefine.RunningStatusE.ERASEMENT_RUNNING_NORMAL);
        EnumDefine.RunningStatusE result = hostMO.getRunningStatus();
        assertSame("result", EnumDefine.RunningStatusE.ERASEMENT_RUNNING_NORMAL, result);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
    }
    
    public void testSetCount() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setCount(100L);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"COUNT\")", new Long(100L), hostMO.getMO().getProperties().get("COUNT"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetDescription() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setDescription("testHostMODescription");
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"DESCRIPTION\")", "testHostMODescription", hostMO.getMO().getProperties().get("DESCRIPTION"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetHealthStatus() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setHealthStatus(EnumDefine.HealthStatusE.POWER_NOT_ENOUGH);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"HEALTHSTATUS\")", new Integer(12), hostMO.getMO().getProperties().get("HEALTHSTATUS"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetIP() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setIP("testHostMOIp");
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"IP\")", "testHostMOIp", hostMO.getMO().getProperties().get("IP"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetId() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setId("testHostMOId");
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"ID\")", "testHostMOId", hostMO.getMO().getProperties().get("ID"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetIsAdd2HostGroup() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setIsAdd2HostGroup(Boolean.FALSE);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"ISADD2HOSTGROUP\")", Boolean.FALSE, hostMO.getMO().getProperties().get("ISADD2HOSTGROUP"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetLocation() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setLocation("testHostMOLocation");
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"LOCATION\")", "testHostMOLocation", hostMO.getMO().getProperties().get("LOCATION"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetName() throws Throwable {
        HostMO hostMO = new HostMO();
        hostMO.setName("testHostMOName");
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"NAME\")", "testHostMOName", hostMO.getMO().getProperties().get("NAME"));
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
    }
    
    public void testSetOperationSystem() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setOperationSystem(EnumDefine.OSTypeE.Windows);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"OPERATIONSYSTEM\")", new Integer(1), hostMO.getMO().getProperties().get("OPERATIONSYSTEM"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetParentType() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setParentType(MOType.NAS_AD_FIELD);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"PARENTTYPE\")", new Integer(16414), hostMO.getMO().getProperties().get("PARENTTYPE"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testSetRunningStatus() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        hostMO.setRunningStatus(EnumDefine.RunningStatusE.OFFLINE);
        assertEquals("hostMO.getMO().getProperties().size()", 1, hostMO.getMO().getProperties().size());
        assertEquals("hostMO.getMO().getProperties().get(\"RUNNINGSTATUS\")", new Integer(28), hostMO.getMO().getProperties().get("RUNNINGSTATUS"));
        assertSame("hostMO.getMO()", mo, hostMO.getMO());
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testHostMOKey", 100);
        Mockingbird.enterRecordingMode();
        Mockingbird.setConstructorForException(MO.class, "<init>(org.json.JSONObject)", (Throwable) Mockingbird.getProxyObject(JsonSyntaxException.class));
        Mockingbird.enterTestMode(HostMO.class);
        try {
            new HostMO(jObject);
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
    
    public void testGetCountThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetDescriptionThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getDescription();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        try {
            hostMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertSame("hostMO.getMO()", mo, hostMO.getMO());
        }
    }
    
    public void testGetIPThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getIP();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetIdThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getId();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetIsAdd2HostGroupThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getIsAdd2HostGroup();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetLocationThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getLocation();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetNameThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getName();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetOperationSystemThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getOperationSystem();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException1() throws Throwable {
        MO mo = new MO();
        HostMO hostMO = new HostMO(mo);
        try {
            hostMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertSame("hostMO.getMO()", mo, hostMO.getMO());
        }
    }
    
    public void testSetCountThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setCount(100L);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetDescriptionThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setDescription("testHostMODescription");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetHealthStatusThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setHealthStatus(EnumDefine.HealthStatusE.SINGLE_LINK_FAULT);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetIPThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setIP("testHostMOIp");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setId("testHostMOId");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetIsAdd2HostGroupThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setIsAdd2HostGroup(Boolean.FALSE);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetLocationThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setLocation("testHostMOLocation");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetNameThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setName("testHostMOName");
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetOperationSystemThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setOperationSystem(EnumDefine.OSTypeE.MacOS);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetParentTypeThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setParentType(MOType.ETH_PORT);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
    
    public void testSetRunningStatusThrowsNullPointerException() throws Throwable {
        HostMO hostMO = new HostMO((MO) null);
        try {
            hostMO.setRunningStatus(EnumDefine.RunningStatusE.NOT_SYNCHRONIZED);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostMO.class, ex);
            assertNull("hostMO.getMO()", hostMO.getMO());
        }
    }
}

