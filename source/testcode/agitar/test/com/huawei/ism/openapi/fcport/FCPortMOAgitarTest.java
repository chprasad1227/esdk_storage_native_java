/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:30:00
 * Time to generate: 00:38.453 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.fcport.FCPortMO:ae536bf21a849e1ba488a2afd465e96c
 *
 */

package com.huawei.ism.openapi.fcport;

import com.agitar.lib.junit.AgitarTestCase;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.huawei.ism.openapi.common.keydeifines.EnumDefine;
import com.huawei.ism.openapi.common.model.MO;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;

public class FCPortMOAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return FCPortMO.class;
    }
    
    public void testConstructor() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testConstructor1() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO(new JSONObject(new LinkedHashMap(100, 100.0F, true)));
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetBadCharNumber() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO(new JSONObject());
        Integer result = fCPortMO.getBadCharNumber();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetConfSpeed() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setConfSpeed(new Integer(0));
        Integer result = fCPortMO.getConfSpeed();
        assertEquals("result", 0, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetConfSpeed1() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO(new JSONObject());
        Integer result = fCPortMO.getConfSpeed();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetCount() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        long result = fCPortMO.getCount();
        assertEquals("result", Long.MIN_VALUE, result);
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetFloginDelayTimes() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setFloginDelayTimes(new Integer(0));
        Integer result = fCPortMO.getFloginDelayTimes();
        assertEquals("result", 0, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetFloginDelayTimes1() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        Integer result = fCPortMO.getFloginDelayTimes();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetId() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setId("testFCPortMOId");
        String result = fCPortMO.getId();
        assertEquals("result", "testFCPortMOId", result);
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetId1() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        String result = fCPortMO.getId();
        assertNull("result", result);
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetIniOrTgt() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setIniOrTgt(EnumDefine.IniOrTgtE.TGT);
        EnumDefine.IniOrTgtE result = fCPortMO.getIniOrTgt();
        assertSame("result", EnumDefine.IniOrTgtE.TGT, result);
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetLinkFail() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        Integer result = fCPortMO.getLinkFail();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetLocation() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        String result = fCPortMO.getLocation();
        assertNull("result", result);
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetLostSignals() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        Integer result = fCPortMO.getLostSignals();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetLostSync() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        Integer result = fCPortMO.getLostSync();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetMO() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        MO result = fCPortMO.getMO();
        assertEquals("result.getProperties().size()", 1, result.getProperties().size());
    }
    
    public void testGetMaxSupportSpeed() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        Integer result = fCPortMO.getMaxSupportSpeed();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetName() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO(new JSONObject());
        String result = fCPortMO.getName();
        assertNull("result", result);
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetRunSpeed() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        Integer result = fCPortMO.getRunSpeed();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetStartTime() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        Integer result = fCPortMO.getStartTime();
        assertEquals("result", Integer.MIN_VALUE, result.intValue());
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testGetWWN() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO(new JSONObject());
        String result = fCPortMO.getWWN();
        assertNull("result", result);
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testSetConfSpeed() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setConfSpeed(new Integer(-1));
        assertEquals("fCPortMO.mo.getProperties().size()", 2, ((MO) getPrivateField(fCPortMO, "mo")).getProperties().size());
        assertEquals("fCPortMO.mo.getProperties().get(\"CONFSPEED\")", new Integer(-1), ((MO) getPrivateField(fCPortMO, "mo")).getProperties().get("CONFSPEED"));
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testSetFloginDelayTimes() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setFloginDelayTimes(new Integer(-2));
        assertEquals("fCPortMO.mo.getProperties().size()", 2, ((MO) getPrivateField(fCPortMO, "mo")).getProperties().size());
        assertEquals("fCPortMO.mo.getProperties().get(\"FLOGINDELAYTIMES\")", new Integer(-2), ((MO) getPrivateField(fCPortMO, "mo")).getProperties().get("FLOGINDELAYTIMES"));
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testSetId() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setId("testFCPortMOId");
        assertEquals("fCPortMO.mo.getProperties().size()", 2, ((MO) getPrivateField(fCPortMO, "mo")).getProperties().size());
        assertEquals("fCPortMO.mo.getProperties().get(\"ID\")", "testFCPortMOId", ((MO) getPrivateField(fCPortMO, "mo")).getProperties().get("ID"));
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testSetIniOrTgt() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        fCPortMO.setIniOrTgt(EnumDefine.IniOrTgtE.INI);
        assertEquals("fCPortMO.mo.getProperties().size()", 2, ((MO) getPrivateField(fCPortMO, "mo")).getProperties().size());
        assertEquals("fCPortMO.mo.getProperties().get(\"INIORTGT\")", new Integer(2), ((MO) getPrivateField(fCPortMO, "mo")).getProperties().get("INIORTGT"));
        assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
    }
    
    public void testConstructorThrowsJsonSyntaxException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put(new Long(Long.MIN_VALUE), new JSONArray());
        try {
            new FCPortMO(new JSONObject(map));
            fail("Expected JsonSyntaxException to be thrown");
        } catch (JsonSyntaxException ex) {
            assertEquals("ex.getMessage()", "java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 26", ex.getMessage());
            assertThrownBy(Gson.class, ex);
        }
    }
    
    public void testConstructorThrowsNullPointerException() throws Throwable {
        Map map = new HashMap(100, 100.0F);
        map.put((Object) null, "charsetName");
        try {
            new FCPortMO(new JSONObject(map));
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(MO.class, ex);
        }
    }
    
    public void testGetFCRunModeThrowsNullPointerException() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        try {
            fCPortMO.getFCRunMode();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FCPortMO.class, ex);
            assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
        }
    }
    
    public void testGetHealthStatusThrowsNullPointerException() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        try {
            fCPortMO.getHealthStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FCPortMO.class, ex);
            assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
        }
    }
    
    public void testGetIniOrTgtThrowsNullPointerException() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        try {
            fCPortMO.getIniOrTgt();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FCPortMO.class, ex);
            assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
        }
    }
    
    public void testGetLogicTypeThrowsNullPointerException() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        try {
            fCPortMO.getLogicType();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FCPortMO.class, ex);
            assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
        }
    }
    
    public void testGetRunningStatusThrowsNullPointerException() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO(new JSONObject());
        try {
            fCPortMO.getRunningStatus();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FCPortMO.class, ex);
            assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
        }
    }
    
    public void testSetIdThrowsNullPointerException() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        try {
            fCPortMO.setId(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
        }
    }
    
    public void testSetIniOrTgtThrowsNullPointerException() throws Throwable {
        FCPortMO fCPortMO = new FCPortMO();
        try {
            fCPortMO.setIniOrTgt(null);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(FCPortMO.class, ex);
            assertNotNull("fCPortMO.mo", getPrivateField(fCPortMO, "mo"));
        }
    }
}

