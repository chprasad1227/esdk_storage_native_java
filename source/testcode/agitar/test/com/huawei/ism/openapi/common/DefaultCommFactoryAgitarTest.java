/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:27:31
 * Time to generate: 00:12.563 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.common.DefaultCommFactory:7b1406a11775affe8c04dda937f137c4
 *
 */

package com.huawei.ism.openapi.common;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.exception.ApiMessage;
import com.huawei.ism.openapi.common.handlercfg.HandlerMaps;
import com.huawei.ism.openapi.common.keydeifines.ConstantsDefine;
import com.huawei.ism.openapi.diskpool.DiskPoolHandlerImp;

public class DefaultCommFactoryAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return DefaultCommFactory.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testDefaultCommFactoryIp", 100);
        DefaultCommFactory defaultCommFactory = new DefaultCommFactory(restRequestHandler, "testDefaultCommFactoryDeviceID");
        assertEquals("defaultCommFactory.deviceID", "testDefaultCommFactoryDeviceID", getPrivateField(defaultCommFactory, "deviceID"));
        assertSame("defaultCommFactory.restRequestHandler", restRequestHandler, getPrivateField(defaultCommFactory, "restRequestHandler"));
    }
    
    public void testGetHandler() throws Throwable {
        DefaultCommFactory defaultCommFactory = new DefaultCommFactory(new RestRequestHandler("testDefaultCommFactoryIp", 100), "testDefaultCommFactoryDeviceID");
        DiskPoolHandlerImp result = (DiskPoolHandlerImp) defaultCommFactory.getHandler("DiskPoolHandler");
        assertNotNull("result", result);
    }
    
    public void testGetHandler1() throws Throwable {
        DefaultCommFactory defaultCommFactory = new DefaultCommFactory(new RestRequestHandler("testDefaultCommFactoryIp", 100), "testDefaultCommFactoryDeviceID");
        Object result = defaultCommFactory.getHandler("testDefaultCommFactoryHandlerName");
        assertNull("result", result);
    }
    
    public void testGetHandlerThrowsApiExceptionWithAggressiveMocks() throws Throwable {
        storeStaticField(ConstantsDefine.ExceptionConstant.class, "SECURITYEXPMSG");
        DefaultCommFactory defaultCommFactory = (DefaultCommFactory) Mockingbird.getProxyObject(DefaultCommFactory.class, true);
        HandlerMaps handlerMaps = (HandlerMaps) Mockingbird.getProxyObject(HandlerMaps.class);
        Class class2 = (Class) Mockingbird.getProxyObject(Class.class);
        ApiMessage apiMessage = (ApiMessage) Mockingbird.getProxyObject(ApiMessage.class);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(HandlerMaps.getHandlerMapsInstance(), handlerMaps);
        setPrivateField(ConstantsDefine.ExceptionConstant.class, "SECURITYEXPMSG", apiMessage);
        Mockingbird.setReturnValue(handlerMaps.getValue(""), class2);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(Throwable.class), "getMessage", "()java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(ApiException.class, "<init>(com.huawei.ism.openapi.common.exception.ApiMessage,java.lang.Exception)", Mockingbird.getProxyObject(ApiException.class));
        Mockingbird.enterTestMode(DefaultCommFactory.class);
        try {
            defaultCommFactory.getHandler("");
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertTrue("Test call resulted in expected outcome", true);
        }
    }
}

