/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:35:11
 * Time to generate: 00:54.953 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.lungroup.LunGroupIterator:f7bad98735254f1f588ed81d64c5da55
 * agitar.src.md5=com.huawei.ism.openapi.common.batchquery.ApiIterator:592fbb87e71ade6d26e6fe9200d66392
 *
 */

package com.huawei.ism.openapi.lungroup;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.batchquery.QueryBase;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.model.MOType;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class LunGroupIteratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return LunGroupIterator.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testLunGroupIteratorIp", 100);
        LunGroupQuery queryCondition = new LunGroupQuery(new LunGroupMO(), 100L, 1000L);
        LunGroupIterator lunGroupIterator = new LunGroupIterator(restRequestHandler, "testLunGroupIteratorDeviceID", queryCondition);
        assertNull("lunGroupIterator.headerMap", getPrivateField(lunGroupIterator, "headerMap"));
        assertEquals("lunGroupIterator.totalCount", 0L, ((Number) getPrivateField(lunGroupIterator, "totalCount")).longValue());
        assertSame("lunGroupIterator.restRequestHandler", restRequestHandler, getPrivateField(lunGroupIterator, "restRequestHandler"));
        assertEquals("lunGroupIterator.curIndex", 100L, ((Number) getPrivateField(lunGroupIterator, "curIndex")).longValue());
        assertEquals("lunGroupIterator.deviceID", "testLunGroupIteratorDeviceID", getPrivateField(lunGroupIterator, "deviceID"));
        assertSame("lunGroupIterator.getQuery()", queryCondition, lunGroupIterator.getQuery());
    }
    
    public void testGetConcretBatchNextWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupIterator lunGroupIterator = (LunGroupIterator) Mockingbird.getProxyObject(LunGroupIterator.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        setPrivateField(lunGroupIterator, "deviceID", "");
        setPrivateField(lunGroupIterator, "queryCondition", null);
        setPrivateField(lunGroupIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(LunGroupIterator.class);
        List result = lunGroupIterator.getConcretBatchNext();
        assertNull("result", result);
        assertNull("lunGroupIterator.headerMap", getPrivateField(lunGroupIterator, "headerMap"));
    }
    
    public void testGetConcretCountWithAggressiveMocks() throws Throwable {
        storeStaticField(MOType.class, "LUNGroup");
        LunGroupIterator lunGroupIterator = (LunGroupIterator) Mockingbird.getProxyObject(LunGroupIterator.class, true);
        QueryBase queryBase = (QueryBase) Mockingbird.getProxyObject(QueryBase.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        MOType mOType = (MOType) Mockingbird.getProxyObject(MOType.class);
        LunGroupMO lunGroupMO = (LunGroupMO) Mockingbird.getProxyObject(LunGroupMO.class);
        MO mO = (MO) Mockingbird.getProxyObject(MO.class);
        setPrivateField(lunGroupIterator, "deviceID", "");
        setPrivateField(lunGroupIterator, "queryCondition", queryBase);
        setPrivateField(lunGroupIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.enterNormalMode();
        callPrivateMethod("com.huawei.ism.openapi.common.batchquery.QueryBase", "setConcretQueryMO", new Class[] {Object.class}, queryBase, new Object[] {obj});
        setPrivateField(MOType.class, "LUNGroup", mOType);
        setPrivateField(mOType, "value", new Integer(0));
        setPrivateField(lunGroupMO, "mo", mO);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, lunGroupIterator, "getHeadMap", "(java.lang.Object)java.util.Map", null, 1);
        Mockingbird.setReturnValue(openApiUtils2.convertToStringMaps(null), null);
        hashMap.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), lunGroupMO);
        Mockingbird.setReturnValue(false, mO, "getProperty", "(java.lang.Object)java.lang.Object", "", 1);
        Mockingbird.setReturnValue(true, Long.class, "valueOf", "(java.lang.String)java.lang.Long", new Object[] {""}, new Long(0L), 1);
        Mockingbird.enterTestMode(LunGroupIterator.class);
        long result = lunGroupIterator.getConcretCount();
        assertEquals("result", 0L, result);
        assertNull("lunGroupIterator.headerMap", getPrivateField(lunGroupIterator, "headerMap"));
    }
    
    public void testGetConcretFilterHeaders() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(null, "testLunGroupIteratorDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        String[] result = lunGroupIterator.getConcretFilterHeaders();
        assertEquals("result.length", 1, result.length);
        assertEquals("result[0]", "ID", result[0]);
    }
    
    public void testGetConcretMoMap() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(new RestRequestHandler("testLunGroupIteratorIp", 100), "testLunGroupIteratorDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        ConcurrentHashMap result = (ConcurrentHashMap) lunGroupIterator.getConcretMoMap(new LunGroupMO());
        assertEquals("result.size()", 1, result.size());
        assertEquals("(ConcurrentHashMap) result.get(\"TYPE\")", new Integer(256), result.get("TYPE"));
    }
    
    public void testGetConcretMoMap1() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(new RestRequestHandler("testLunGroupIteratorIp", 100), "testLunGroupIteratorDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        Map result = lunGroupIterator.getConcretMoMap((LunGroupMO) null);
        assertNull("result", result);
    }
    
    public void testGetConcretBatchNextThrowsApiException() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(null, "testLunGroupIteratorDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        try {
            lunGroupIterator.getConcretBatchNext();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("lunGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(lunGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(new RestRequestHandler("testLunGroupIteratorIp", 100), "testLunGroupIterator\rDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        try {
            lunGroupIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("lunGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(lunGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(new RestRequestHandler("testLunGroupIteratorIp", 100), "testLunGroupIteratorDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupIterator.class);
        try {
            lunGroupIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(lunGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsApiException() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(null, "testLunGroupIteratorDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        try {
            lunGroupIterator.getConcretCount();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("lunGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(lunGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsIllegalArgumentException() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(new RestRequestHandler("testLunGroupIteratorIp", 100), "testLunGroupIterator\rDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        try {
            lunGroupIterator.getConcretCount();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("lunGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(lunGroupIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException() throws Throwable {
        LunGroupIterator lunGroupIterator = new LunGroupIterator(new RestRequestHandler("testLunGroupIteratorIp", 100), "testLunGroupIteratorDeviceID", new LunGroupQuery(new LunGroupMO(), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(LunGroupIterator.class);
        try {
            lunGroupIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("lunGroupIterator.headerMap.size()", 0, ((Map) getPrivateField(lunGroupIterator, "headerMap")).size());
        }
    }
}

