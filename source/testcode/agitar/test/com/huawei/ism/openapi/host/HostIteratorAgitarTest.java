/**
 * Generated by Agitar build: AgitarOne Version 6.0.0.000018 (Build date: Sep 06, 2013) [6.0.0.000018]
 * JDK Version: 1.6.0_14
 *
 * Generated on 2014-3-11 13:32:54
 * Time to generate: 00:48.266 seconds
 *
 *
 * agitar.src.md5=com.huawei.ism.openapi.host.HostIterator:6507c3e00798a1429b0338bd96fc3ccc
 * agitar.src.md5=com.huawei.ism.openapi.common.batchquery.ApiIterator:592fbb87e71ade6d26e6fe9200d66392
 *
 */

package com.huawei.ism.openapi.host;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import com.huawei.ism.openapi.common.batchquery.QueryBase;
import com.huawei.ism.openapi.common.commu.rest.RestManager;
import com.huawei.ism.openapi.common.commu.rest.RestRequestHandler;
import com.huawei.ism.openapi.common.exception.ApiException;
import com.huawei.ism.openapi.common.model.MO;
import com.huawei.ism.openapi.common.utils.OpenApiUtils;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import org.json.JSONObject;

public class HostIteratorAgitarTest extends AgitarTestCase {
    
    public Class getTargetClass()  {
        return HostIterator.class;
    }
    
    public void testConstructor() throws Throwable {
        RestRequestHandler restRequestHandler = new RestRequestHandler("testHostIteratorIp", 100);
        HostQuery queryCondition = new HostQuery(new HostMO(), 100L, 1000L);
        HostIterator hostIterator = new HostIterator(restRequestHandler, "testHostIteratorDeviceID", queryCondition);
        assertNull("hostIterator.headerMap", getPrivateField(hostIterator, "headerMap"));
        assertEquals("hostIterator.totalCount", 0L, ((Number) getPrivateField(hostIterator, "totalCount")).longValue());
        assertSame("hostIterator.restRequestHandler", restRequestHandler, getPrivateField(hostIterator, "restRequestHandler"));
        assertEquals("hostIterator.curIndex", 100L, ((Number) getPrivateField(hostIterator, "curIndex")).longValue());
        assertEquals("hostIterator.deviceID", "testHostIteratorDeviceID", getPrivateField(hostIterator, "deviceID"));
        assertSame("hostIterator.getQuery()", queryCondition, hostIterator.getQuery());
    }
    
    public void testGetConcretBatchNextWithAggressiveMocks() throws Throwable {
        HostIterator hostIterator = (HostIterator) Mockingbird.getProxyObject(HostIterator.class, true);
        QueryBase queryBase = (QueryBase) Mockingbird.getProxyObject(QueryBase.class);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        Object obj = Mockingbird.getProxyObject(Object.class);
        OpenApiUtils openApiUtils2 = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        setPrivateField(hostIterator, "deviceID", "");
        setPrivateField(hostIterator, "curIndex", new Long(0L));
        setPrivateField(hostIterator, "queryCondition", queryBase);
        setPrivateField(hostIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.enterNormalMode();
        queryBase.setCount(0L);
        callPrivateMethod("com.huawei.ism.openapi.common.batchquery.QueryBase", "setConcretQueryMO", new Class[] {Object.class}, queryBase, new Object[] {obj});
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        HashMap hashMap = (HashMap) Mockingbird.getProxyObject(HashMap.class);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", hashMap);
        Mockingbird.setReturnValue(false, Mockingbird.getProxyObject(StringBuilder.class), "toString", "()java.lang.String", "", 1);
        Mockingbird.setReturnValue(false, hashMap, "put", "(java.lang.Object,java.lang.Object)java.lang.Object", null, 1);
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils2);
        Mockingbird.setReturnValue(false, hostIterator, "getHeadMap", "(java.lang.Object)java.util.Map", null, 1);
        Mockingbird.setReturnValue(openApiUtils2.convertToStringMaps(null), null);
        hashMap.putAll((Map) null);
        Mockingbird.setNormalReturnForVoid();
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMOList(), null);
        Mockingbird.enterTestMode(HostIterator.class);
        List result = hostIterator.getConcretBatchNext();
        assertNull("result", result);
        assertNull("hostIterator.headerMap", getPrivateField(hostIterator, "headerMap"));
    }
    
    public void testGetConcretCountWithAggressiveMocks() throws Throwable {
        HostIterator hostIterator = (HostIterator) Mockingbird.getProxyObject(HostIterator.class, true);
        OpenApiUtils openApiUtils = (OpenApiUtils) Mockingbird.getProxyObject(OpenApiUtils.class);
        HostMO hostMO = (HostMO) Mockingbird.getProxyObject(HostMO.class);
        setPrivateField(hostIterator, "deviceID", "");
        setPrivateField(hostIterator, "queryCondition", null);
        setPrivateField(hostIterator, "restRequestHandler", null);
        Mockingbird.enterRecordingMode();
        Mockingbird.setReturnValue(OpenApiUtils.getOpenApiUtilsInstance(), openApiUtils);
        Mockingbird.setReturnValue(false, openApiUtils, "composeRelativeUri", "(java.lang.String[])java.lang.String", "", 1);
        Mockingbird.replaceObjectForRecording(HashMap.class, "<init>()", Mockingbird.getProxyObject(HashMap.class));
        RestManager restManager = (RestManager) Mockingbird.getProxyObject(RestManager.class);
        Mockingbird.replaceObjectForRecording(RestManager.class, "<init>(java.lang.Class,com.huawei.ism.openapi.common.commu.rest.RestRequestHandler,java.lang.String,java.util.Map,org.json.JSONObject)", restManager);
        Mockingbird.setReturnValue(restManager.getGetRequestMO(), hostMO);
        Mockingbird.setReturnValue(hostMO.getCount(), new Long(0L));
        Mockingbird.enterTestMode(HostIterator.class);
        long result = hostIterator.getConcretCount();
        assertEquals("result", 0L, result);
        assertNull("hostIterator.headerMap", getPrivateField(hostIterator, "headerMap"));
    }
    
    public void testGetConcretFilterHeaders() throws Throwable {
        HostIterator hostIterator = new HostIterator(new RestRequestHandler("testHostIteratorIp", 100), "testHostIteratorDeviceID", new HostQuery(new HostMO(), 100L, 1000L));
        String[] result = hostIterator.getConcretFilterHeaders();
        assertEquals("result.length", 3, result.length);
        assertEquals("result[0]", "ID", result[0]);
    }
    
    public void testGetConcretMoMap() throws Throwable {
        HostIterator hostIterator = new HostIterator(null, "testHostIteratorDeviceID", new HostQuery(new HostMO(), 100L, 1000L));
        ConcurrentHashMap result = (ConcurrentHashMap) hostIterator.getConcretMoMap(new HostMO());
        assertEquals("result.size()", 0, result.size());
    }
    
    public void testGetConcretMoMap1() throws Throwable {
        HostIterator hostIterator = new HostIterator(new RestRequestHandler("testHostIteratorIp", 100), "testHostIteratorDeviceID", new HostQuery(new HostMO(), 100L, 1000L));
        Map result = hostIterator.getConcretMoMap((HostMO) null);
        assertNull("result", result);
    }
    
    public void testGetConcretBatchNextThrowsApiException() throws Throwable {
        JSONObject jsonBody = new JSONObject();
        jsonBody.put("testHostIteratorKey", 100);
        HostIterator hostIterator = new HostIterator(null, "testHostIteratorDeviceID", new HostQuery(new HostMO(new MO(jsonBody)), 100L, 1000L));
        try {
            hostIterator.getConcretBatchNext();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("hostIterator.headerMap.size()", 0, ((Map) getPrivateField(hostIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsIllegalArgumentException() throws Throwable {
        HostIterator hostIterator = new HostIterator(new RestRequestHandler("testHostIterator\rIp", 100), "testHostIteratorDeviceID", new HostQuery(new HostMO(), 100L, 1000L));
        try {
            hostIterator.getConcretBatchNext();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("hostIterator.headerMap.size()", 0, ((Map) getPrivateField(hostIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testHostIteratorKey", 100.0);
        HostIterator hostIterator = new HostIterator(new RestRequestHandler("testHostIteratorIp", 100), "testHostIteratorDeviceID", new HostQuery(new HostMO(jObject), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Object getRequestMOList = ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMOList();
        Mockingbird.setException(true, getRequestMOList, (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostIterator.class);
        try {
            hostIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostIterator.headerMap.size()", 0, ((Map) getPrivateField(hostIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretBatchNextThrowsNullPointerException1() throws Throwable {
        HostIterator hostIterator = new HostIterator(new RestRequestHandler("testHostIteratorIp", 100), "testHostIteratorDeviceID", new HostQuery(new HostMO((MO) null), 100L, 1000L));
        try {
            hostIterator.getConcretBatchNext();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(HostIterator.class, ex);
            assertNull("hostIterator.headerMap", getPrivateField(hostIterator, "headerMap"));
        }
    }
    
    public void testGetConcretCountThrowsApiException() throws Throwable {
        HostIterator hostIterator = new HostIterator(null, "testHostIteratorDeviceID", new HostQuery(new HostMO(), 100L, 1000L));
        try {
            hostIterator.getConcretCount();
            fail("Expected ApiException to be thrown");
        } catch (ApiException ex) {
            assertEquals("ex.getMessage()", "the restRequestHandler is null", ex.getMessage());
            assertThrownBy(RestManager.class, ex);
            assertEquals("ex.getErrMessage().getErrorDescription()", "the restRequestHandler is null", ex.getErrMessage().getErrorDescription());
            assertNull("ex.getException()", ex.getException());
            assertEquals("hostIterator.headerMap.size()", 0, ((Map) getPrivateField(hostIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsIllegalArgumentException() throws Throwable {
        HostIterator hostIterator = new HostIterator(new RestRequestHandler("testHostIterator\rIp", 100), "testHostIteratorDeviceID", new HostQuery(new HostMO(), 100L, 1000L));
        try {
            hostIterator.getConcretCount();
            fail("Expected IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException ex) {
            assertNull("ex.getMessage()", ex.getMessage());
            assertThrownBy(URI.class, ex);
            assertEquals("hostIterator.headerMap.size()", 0, ((Map) getPrivateField(hostIterator, "headerMap")).size());
        }
    }
    
    public void testGetConcretCountThrowsNullPointerException() throws Throwable {
        JSONObject jObject = new JSONObject();
        jObject.put("testHostIteratorKey", 100);
        jObject.putOpt("testHostIteratorKey", null);
        HostIterator hostIterator = new HostIterator(new RestRequestHandler("testHostIteratorIp", 100), "testHostIteratorDeviceID", new HostQuery(new HostMO(jObject), 100L, 1000L));
        Mockingbird.enterRecordingMode();
        Mockingbird.setException(true, ((RestManager) Mockingbird.getProxyObject(RestManager.class)).getGetRequestMO(), (Throwable) Mockingbird.getProxyObject(NullPointerException.class));
        Mockingbird.enterTestMode(HostIterator.class);
        try {
            hostIterator.getConcretCount();
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException ex) {
            assertEquals("hostIterator.headerMap.size()", 0, ((Map) getPrivateField(hostIterator, "headerMap")).size());
        }
    }
}

